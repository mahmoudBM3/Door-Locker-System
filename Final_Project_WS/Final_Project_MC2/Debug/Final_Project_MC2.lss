
Final_Project_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000294e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  0000294e  000029e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080017e  0080017e  00002b00  2**0
                  ALLOC
  3 .stab         00002b74  00000000  00000000  00002b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001522  00000000  00000000  00005674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00006f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00009332  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b884  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000ba44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000bd37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <main>
      8a:	0c 94 a5 14 	jmp	0x294a	; 0x294a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 14 	jmp	0x292c	; 0x292c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 14 	jmp	0x292c	; 0x292c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 96 14 	jmp	0x292c	; 0x292c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 96 14 	jmp	0x292c	; 0x292c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 96 14 	jmp	0x292c	; 0x292c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <APP_setPassword>:
#include"dc_motor.h"
#include"external_eeprom.h"
#include<util/delay.h>
/**This function is used to change the password of the system and when called it
 * can't be left before a password is set and confirmed**/
void APP_setPassword(void) {
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	a9 97       	sbiw	r28, 0x29	; 41
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
	/***/
	uint8 wrongcount = 0;
     e10:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 password1[5];
	uint8 password2[5];
	uint8 count = 0;
     e12:	1e 8e       	std	Y+30, r1	; 0x1e
	while (1) {
		uint8 flag = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	8d 8f       	std	Y+29, r24	; 0x1d
		/**Get the first Password**/
		for (count = 0; count < 5; count++) {
     e18:	1e 8e       	std	Y+30, r1	; 0x1e
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <APP_setPassword+0x42>
			password1[count] = UART_receiveByte();
     e1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e1e:	08 2f       	mov	r16, r24
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_receiveByte>
     e26:	28 2f       	mov	r18, r24
     e28:	ce 01       	movw	r24, r28
     e2a:	80 96       	adiw	r24, 0x20	; 32
     e2c:	fc 01       	movw	r30, r24
     e2e:	e0 0f       	add	r30, r16
     e30:	f1 1f       	adc	r31, r17
     e32:	20 83       	st	Z, r18
	uint8 password2[5];
	uint8 count = 0;
	while (1) {
		uint8 flag = 1;
		/**Get the first Password**/
		for (count = 0; count < 5; count++) {
     e34:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
     e3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e3c:	85 30       	cpi	r24, 0x05	; 5
     e3e:	70 f3       	brcs	.-36     	; 0xe1c <APP_setPassword+0x24>
			password1[count] = UART_receiveByte();
		}
		/**wait for the Enter KEY**/
		while (UART_receiveByte() != ENTER_KEY)
     e40:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_receiveByte>
     e44:	80 32       	cpi	r24, 0x20	; 32
     e46:	e1 f7       	brne	.-8      	; 0xe40 <APP_setPassword+0x48>
			;
		/**Get the Second Password**/
		for (count = 0; count < 5; count++) {
     e48:	1e 8e       	std	Y+30, r1	; 0x1e
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <APP_setPassword+0x72>
			password2[count] = UART_receiveByte();
     e4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e4e:	08 2f       	mov	r16, r24
     e50:	10 e0       	ldi	r17, 0x00	; 0
     e52:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_receiveByte>
     e56:	28 2f       	mov	r18, r24
     e58:	ce 01       	movw	r24, r28
     e5a:	85 96       	adiw	r24, 0x25	; 37
     e5c:	fc 01       	movw	r30, r24
     e5e:	e0 0f       	add	r30, r16
     e60:	f1 1f       	adc	r31, r17
     e62:	20 83       	st	Z, r18
		}
		/**wait for the Enter KEY**/
		while (UART_receiveByte() != ENTER_KEY)
			;
		/**Get the Second Password**/
		for (count = 0; count < 5; count++) {
     e64:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	8e 8f       	std	Y+30, r24	; 0x1e
     e6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e6c:	85 30       	cpi	r24, 0x05	; 5
     e6e:	70 f3       	brcs	.-36     	; 0xe4c <APP_setPassword+0x54>
			password2[count] = UART_receiveByte();
		}
		/**wait for the Enter KEY**/
		while (UART_receiveByte() != ENTER_KEY)
     e70:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_receiveByte>
     e74:	80 32       	cpi	r24, 0x20	; 32
     e76:	e1 f7       	brne	.-8      	; 0xe70 <APP_setPassword+0x78>
			;
		/**Compare the Two passwords**/
		for (count = 0; count < 5; count++) {
     e78:	1e 8e       	std	Y+30, r1	; 0x1e
     e7a:	19 c0       	rjmp	.+50     	; 0xeae <APP_setPassword+0xb6>
			if (password1[count] != password2[count]) {
     e7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	ce 01       	movw	r24, r28
     e84:	80 96       	adiw	r24, 0x20	; 32
     e86:	fc 01       	movw	r30, r24
     e88:	e2 0f       	add	r30, r18
     e8a:	f3 1f       	adc	r31, r19
     e8c:	40 81       	ld	r20, Z
     e8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	ce 01       	movw	r24, r28
     e96:	85 96       	adiw	r24, 0x25	; 37
     e98:	fc 01       	movw	r30, r24
     e9a:	e2 0f       	add	r30, r18
     e9c:	f3 1f       	adc	r31, r19
     e9e:	80 81       	ld	r24, Z
     ea0:	48 17       	cp	r20, r24
     ea2:	11 f0       	breq	.+4      	; 0xea8 <APP_setPassword+0xb0>
				/**This flag when set means that the passwords are matched when
				 * cleared means that the passwords are not matched**/
				flag = 0;
     ea4:	1d 8e       	std	Y+29, r1	; 0x1d
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <APP_setPassword+0xbc>
		}
		/**wait for the Enter KEY**/
		while (UART_receiveByte() != ENTER_KEY)
			;
		/**Compare the Two passwords**/
		for (count = 0; count < 5; count++) {
     ea8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eaa:	8f 5f       	subi	r24, 0xFF	; 255
     eac:	8e 8f       	std	Y+30, r24	; 0x1e
     eae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eb0:	85 30       	cpi	r24, 0x05	; 5
     eb2:	20 f3       	brcs	.-56     	; 0xe7c <APP_setPassword+0x84>
				flag = 0;
				break;
			}
		}
		/**if the passwords match store it in the EEPROM**/
		if (flag == 1) {
     eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f0       	breq	.+2      	; 0xebc <APP_setPassword+0xc4>
     eba:	92 c0       	rjmp	.+292    	; 0xfe0 <APP_setPassword+0x1e8>
			/**Tell the other µCthat the passwords are matched**/
			UART_sendByte(PASSWORD_MATCHED);
     ebc:	8e ef       	ldi	r24, 0xFE	; 254
     ebe:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
			/**PUT The Password in the EEPROM**/
			for (count = 0; count < 5; count++) {
     ec2:	1e 8e       	std	Y+30, r1	; 0x1e
     ec4:	88 c0       	rjmp	.+272    	; 0xfd6 <APP_setPassword+0x1de>
				EEPROM_writeByte(PASSWORD_ADDRESS + count, password1[count]);
     ec6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	80 5c       	subi	r24, 0xC0	; 192
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	ac 01       	movw	r20, r24
     ed2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	ce 01       	movw	r24, r28
     eda:	80 96       	adiw	r24, 0x20	; 32
     edc:	fc 01       	movw	r30, r24
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	20 81       	ld	r18, Z
     ee4:	ca 01       	movw	r24, r20
     ee6:	62 2f       	mov	r22, r18
     ee8:	0e 94 bd 0b 	call	0x177a	; 0x177a <EEPROM_writeByte>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a0 e2       	ldi	r26, 0x20	; 32
     ef2:	b1 e4       	ldi	r27, 0x41	; 65
     ef4:	89 8f       	std	Y+25, r24	; 0x19
     ef6:	9a 8f       	std	Y+26, r25	; 0x1a
     ef8:	ab 8f       	std	Y+27, r26	; 0x1b
     efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efc:	69 8d       	ldd	r22, Y+25	; 0x19
     efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4a ef       	ldi	r20, 0xFA	; 250
     f0a:	54 e4       	ldi	r21, 0x44	; 68
     f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8d 8b       	std	Y+21, r24	; 0x15
     f16:	9e 8b       	std	Y+22, r25	; 0x16
     f18:	af 8b       	std	Y+23, r26	; 0x17
     f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e8       	ldi	r20, 0x80	; 128
     f2a:	5f e3       	ldi	r21, 0x3F	; 63
     f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f30:	88 23       	and	r24, r24
     f32:	2c f4       	brge	.+10     	; 0xf3e <APP_setPassword+0x146>
		__ticks = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9c 8b       	std	Y+20, r25	; 0x14
     f3a:	8b 8b       	std	Y+19, r24	; 0x13
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <APP_setPassword+0x1c4>
	else if (__tmp > 65535)
     f3e:	6d 89       	ldd	r22, Y+21	; 0x15
     f40:	7e 89       	ldd	r23, Y+22	; 0x16
     f42:	8f 89       	ldd	r24, Y+23	; 0x17
     f44:	98 8d       	ldd	r25, Y+24	; 0x18
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	4f e7       	ldi	r20, 0x7F	; 127
     f4c:	57 e4       	ldi	r21, 0x47	; 71
     f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f52:	18 16       	cp	r1, r24
     f54:	4c f5       	brge	.+82     	; 0xfa8 <APP_setPassword+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	69 8d       	ldd	r22, Y+25	; 0x19
     f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e2       	ldi	r20, 0x20	; 32
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9c 8b       	std	Y+20, r25	; 0x14
     f7c:	8b 8b       	std	Y+19, r24	; 0x13
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <APP_setPassword+0x1a6>
     f80:	88 ec       	ldi	r24, 0xC8	; 200
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9a 8b       	std	Y+18, r25	; 0x12
     f86:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f88:	89 89       	ldd	r24, Y+17	; 0x11
     f8a:	9a 89       	ldd	r25, Y+18	; 0x12
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <APP_setPassword+0x194>
     f90:	9a 8b       	std	Y+18, r25	; 0x12
     f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	8b 89       	ldd	r24, Y+19	; 0x13
     f96:	9c 89       	ldd	r25, Y+20	; 0x14
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	9c 8b       	std	Y+20, r25	; 0x14
     f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9e:	8b 89       	ldd	r24, Y+19	; 0x13
     fa0:	9c 89       	ldd	r25, Y+20	; 0x14
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	69 f7       	brne	.-38     	; 0xf80 <APP_setPassword+0x188>
     fa6:	14 c0       	rjmp	.+40     	; 0xfd0 <APP_setPassword+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa8:	6d 89       	ldd	r22, Y+21	; 0x15
     faa:	7e 89       	ldd	r23, Y+22	; 0x16
     fac:	8f 89       	ldd	r24, Y+23	; 0x17
     fae:	98 8d       	ldd	r25, Y+24	; 0x18
     fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	8b 89       	ldd	r24, Y+19	; 0x13
     fbe:	9c 89       	ldd	r25, Y+20	; 0x14
     fc0:	98 8b       	std	Y+16, r25	; 0x10
     fc2:	8f 87       	std	Y+15, r24	; 0x0f
     fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc6:	98 89       	ldd	r25, Y+16	; 0x10
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <APP_setPassword+0x1d0>
     fcc:	98 8b       	std	Y+16, r25	; 0x10
     fce:	8f 87       	std	Y+15, r24	; 0x0f
		/**if the passwords match store it in the EEPROM**/
		if (flag == 1) {
			/**Tell the other µCthat the passwords are matched**/
			UART_sendByte(PASSWORD_MATCHED);
			/**PUT The Password in the EEPROM**/
			for (count = 0; count < 5; count++) {
     fd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	8e 8f       	std	Y+30, r24	; 0x1e
     fd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd8:	85 30       	cpi	r24, 0x05	; 5
     fda:	08 f4       	brcc	.+2      	; 0xfde <APP_setPassword+0x1e6>
     fdc:	74 cf       	rjmp	.-280    	; 0xec6 <APP_setPassword+0xce>
     fde:	92 c0       	rjmp	.+292    	; 0x1104 <APP_setPassword+0x30c>
				EEPROM_writeByte(PASSWORD_ADDRESS + count, password1[count]);
				/**This delay is required by the EEPROM**/
				_delay_ms(10);
			}
			break;
		} else if (flag == 0) {
     fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fe2:	88 23       	and	r24, r24
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <APP_setPassword+0x1f0>
     fe6:	16 cf       	rjmp	.-468    	; 0xe14 <APP_setPassword+0x1c>
			/**If the passwords are not matched incriment the counter and tell
			 * µC that the passwords don't match to start taking the password
			 * again**/
			wrongcount++;
     fe8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	8f 8f       	std	Y+31, r24	; 0x1f
			/**If number of trials limit is reached Alert**/
			if (wrongcount >= 3) {
     fee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff0:	83 30       	cpi	r24, 0x03	; 3
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <APP_setPassword+0x1fe>
     ff4:	83 c0       	rjmp	.+262    	; 0x10fc <APP_setPassword+0x304>
				/**Tell the other µC to display Error**/
				UART_sendByte(PASSWORD_TRIALS_EXHAUSTED);
     ff6:	8c ef       	ldi	r24, 0xFC	; 252
     ff8:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
				/**Turning the buzzer on**/
				BUZZER_ON();
     ffc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <BUZZER_ON>
				for (count = 0; count < BUZZER_TIME; count++) {
    1000:	1e 8e       	std	Y+30, r1	; 0x1e
    1002:	75 c0       	rjmp	.+234    	; 0x10ee <APP_setPassword+0x2f6>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	aa e7       	ldi	r26, 0x7A	; 122
    100a:	b4 e4       	ldi	r27, 0x44	; 68
    100c:	8b 87       	std	Y+11, r24	; 0x0b
    100e:	9c 87       	std	Y+12, r25	; 0x0c
    1010:	ad 87       	std	Y+13, r26	; 0x0d
    1012:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1014:	6b 85       	ldd	r22, Y+11	; 0x0b
    1016:	7c 85       	ldd	r23, Y+12	; 0x0c
    1018:	8d 85       	ldd	r24, Y+13	; 0x0d
    101a:	9e 85       	ldd	r25, Y+14	; 0x0e
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	4a ef       	ldi	r20, 0xFA	; 250
    1022:	54 e4       	ldi	r21, 0x44	; 68
    1024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	8f 83       	std	Y+7, r24	; 0x07
    102e:	98 87       	std	Y+8, r25	; 0x08
    1030:	a9 87       	std	Y+9, r26	; 0x09
    1032:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1048:	88 23       	and	r24, r24
    104a:	2c f4       	brge	.+10     	; 0x1056 <APP_setPassword+0x25e>
		__ticks = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	3f c0       	rjmp	.+126    	; 0x10d4 <APP_setPassword+0x2dc>
	else if (__tmp > 65535)
    1056:	6f 81       	ldd	r22, Y+7	; 0x07
    1058:	78 85       	ldd	r23, Y+8	; 0x08
    105a:	89 85       	ldd	r24, Y+9	; 0x09
    105c:	9a 85       	ldd	r25, Y+10	; 0x0a
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	4f e7       	ldi	r20, 0x7F	; 127
    1064:	57 e4       	ldi	r21, 0x47	; 71
    1066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    106a:	18 16       	cp	r1, r24
    106c:	4c f5       	brge	.+82     	; 0x10c0 <APP_setPassword+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1070:	7c 85       	ldd	r23, Y+12	; 0x0c
    1072:	8d 85       	ldd	r24, Y+13	; 0x0d
    1074:	9e 85       	ldd	r25, Y+14	; 0x0e
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
    1096:	0f c0       	rjmp	.+30     	; 0x10b6 <APP_setPassword+0x2be>
    1098:	88 ec       	ldi	r24, 0xC8	; 200
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9c 83       	std	Y+4, r25	; 0x04
    109e:	8b 83       	std	Y+3, r24	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <APP_setPassword+0x2ac>
    10a8:	9c 83       	std	Y+4, r25	; 0x04
    10aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	69 f7       	brne	.-38     	; 0x1098 <APP_setPassword+0x2a0>
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <APP_setPassword+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <APP_setPassword+0x2e8>
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	8e 8f       	std	Y+30, r24	; 0x1e
    10ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10f0:	8c 33       	cpi	r24, 0x3C	; 60
    10f2:	08 f4       	brcc	.+2      	; 0x10f6 <APP_setPassword+0x2fe>
    10f4:	87 cf       	rjmp	.-242    	; 0x1004 <APP_setPassword+0x20c>
					_delay_ms(1000);
				}

				BUZZER_OFF();
    10f6:	0e 94 18 0b 	call	0x1630	; 0x1630 <BUZZER_OFF>
    10fa:	8c ce       	rjmp	.-744    	; 0xe14 <APP_setPassword+0x1c>
			} else {
				/**if the passwords don't match Tell the Other µC and retake the
				 * password**/
				UART_sendByte(WRONG_CONFIRMATION);
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
    1102:	88 ce       	rjmp	.-752    	; 0xe14 <APP_setPassword+0x1c>
				continue;
			}
		}
	}
}
    1104:	a9 96       	adiw	r28, 0x29	; 41
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <APP_systemControl>:
/**The main Function that controls the main system when in main menu**/
void APP_systemControl(void) {
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	a0 97       	sbiw	r28, 0x20	; 32
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
	uint8 count = 0;
    112e:	18 a2       	std	Y+32, r1	; 0x20
	static uint8 wrongpasscount = 0;
	/**Get the user choice**/
	uint8 choice = UART_receiveByte();
    1130:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_receiveByte>
    1134:	8f 8f       	std	Y+31, r24	; 0x1f
	if (choice == OPEN_DOOR) {
    1136:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1138:	8b 32       	cpi	r24, 0x2B	; 43
    113a:	09 f0       	breq	.+2      	; 0x113e <APP_systemControl+0x24>
    113c:	a5 c0       	rjmp	.+330    	; 0x1288 <APP_systemControl+0x16e>
		/**get the password Comparison result **/
		APP_PasswordCompareType result = APP_getPassword();
    113e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <APP_getPassword>
    1142:	8e 8f       	std	Y+30, r24	; 0x1e
		if (result == PASSWORD_CORRECT) {
    1144:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	41 f4       	brne	.+16     	; 0x115a <APP_systemControl+0x40>
			/**if the password is correct Open the Door and Reset the wrong
			 * trials counter and tell the other µC**/
			UART_sendByte(PASSWORD_MATCHED);
    114a:	8e ef       	ldi	r24, 0xFE	; 254
    114c:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
			wrongpasscount = 0;
    1150:	10 92 7e 01 	sts	0x017E, r1
			/**Open The Door**/
			APP_openDoor();
    1154:	0e 94 bc 0a 	call	0x1578	; 0x1578 <APP_openDoor>
    1158:	3f c1       	rjmp	.+638    	; 0x13d8 <APP_systemControl+0x2be>
		} else if (result == PASSWORD_WRONG) {
    115a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    115c:	88 23       	and	r24, r24
    115e:	09 f0       	breq	.+2      	; 0x1162 <APP_systemControl+0x48>
    1160:	3b c1       	rjmp	.+630    	; 0x13d8 <APP_systemControl+0x2be>
			/**if the password is not correct reset the wrong trials counter**/
			wrongpasscount++;
    1162:	80 91 7e 01 	lds	r24, 0x017E
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	80 93 7e 01 	sts	0x017E, r24
			if (wrongpasscount == 3) {
    116c:	80 91 7e 01 	lds	r24, 0x017E
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	09 f0       	breq	.+2      	; 0x1176 <APP_systemControl+0x5c>
    1174:	85 c0       	rjmp	.+266    	; 0x1280 <APP_systemControl+0x166>
				/**if the number of wrong trials reaches the limit make an ALERT**/
				wrongpasscount = 0;
    1176:	10 92 7e 01 	sts	0x017E, r1
				UART_sendByte(PASSWORD_TRIALS_EXHAUSTED);
    117a:	8c ef       	ldi	r24, 0xFC	; 252
    117c:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
				/**Ring the buzzer**/
				BUZZER_ON();
    1180:	0e 94 0c 0b 	call	0x1618	; 0x1618 <BUZZER_ON>
				for (count = 0; count < BUZZER_TIME; count++) {
    1184:	18 a2       	std	Y+32, r1	; 0x20
    1186:	75 c0       	rjmp	.+234    	; 0x1272 <APP_systemControl+0x158>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	aa e7       	ldi	r26, 0x7A	; 122
    118e:	b4 e4       	ldi	r27, 0x44	; 68
    1190:	89 8f       	std	Y+25, r24	; 0x19
    1192:	9a 8f       	std	Y+26, r25	; 0x1a
    1194:	ab 8f       	std	Y+27, r26	; 0x1b
    1196:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1198:	69 8d       	ldd	r22, Y+25	; 0x19
    119a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	4a ef       	ldi	r20, 0xFA	; 250
    11a6:	54 e4       	ldi	r21, 0x44	; 68
    11a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	8d 8b       	std	Y+21, r24	; 0x15
    11b2:	9e 8b       	std	Y+22, r25	; 0x16
    11b4:	af 8b       	std	Y+23, r26	; 0x17
    11b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11b8:	6d 89       	ldd	r22, Y+21	; 0x15
    11ba:	7e 89       	ldd	r23, Y+22	; 0x16
    11bc:	8f 89       	ldd	r24, Y+23	; 0x17
    11be:	98 8d       	ldd	r25, Y+24	; 0x18
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e8       	ldi	r20, 0x80	; 128
    11c6:	5f e3       	ldi	r21, 0x3F	; 63
    11c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11cc:	88 23       	and	r24, r24
    11ce:	2c f4       	brge	.+10     	; 0x11da <APP_systemControl+0xc0>
		__ticks = 1;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 8b       	std	Y+20, r25	; 0x14
    11d6:	8b 8b       	std	Y+19, r24	; 0x13
    11d8:	3f c0       	rjmp	.+126    	; 0x1258 <APP_systemControl+0x13e>
	else if (__tmp > 65535)
    11da:	6d 89       	ldd	r22, Y+21	; 0x15
    11dc:	7e 89       	ldd	r23, Y+22	; 0x16
    11de:	8f 89       	ldd	r24, Y+23	; 0x17
    11e0:	98 8d       	ldd	r25, Y+24	; 0x18
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	3f ef       	ldi	r19, 0xFF	; 255
    11e6:	4f e7       	ldi	r20, 0x7F	; 127
    11e8:	57 e4       	ldi	r21, 0x47	; 71
    11ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ee:	18 16       	cp	r1, r24
    11f0:	4c f5       	brge	.+82     	; 0x1244 <APP_systemControl+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f2:	69 8d       	ldd	r22, Y+25	; 0x19
    11f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e2       	ldi	r20, 0x20	; 32
    1200:	51 e4       	ldi	r21, 0x41	; 65
    1202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	9c 8b       	std	Y+20, r25	; 0x14
    1218:	8b 8b       	std	Y+19, r24	; 0x13
    121a:	0f c0       	rjmp	.+30     	; 0x123a <APP_systemControl+0x120>
    121c:	88 ec       	ldi	r24, 0xC8	; 200
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9a 8b       	std	Y+18, r25	; 0x12
    1222:	89 8b       	std	Y+17, r24	; 0x11
    1224:	89 89       	ldd	r24, Y+17	; 0x11
    1226:	9a 89       	ldd	r25, Y+18	; 0x12
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <APP_systemControl+0x10e>
    122c:	9a 8b       	std	Y+18, r25	; 0x12
    122e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1230:	8b 89       	ldd	r24, Y+19	; 0x13
    1232:	9c 89       	ldd	r25, Y+20	; 0x14
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	9c 8b       	std	Y+20, r25	; 0x14
    1238:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123a:	8b 89       	ldd	r24, Y+19	; 0x13
    123c:	9c 89       	ldd	r25, Y+20	; 0x14
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	69 f7       	brne	.-38     	; 0x121c <APP_systemControl+0x102>
    1242:	14 c0       	rjmp	.+40     	; 0x126c <APP_systemControl+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1244:	6d 89       	ldd	r22, Y+21	; 0x15
    1246:	7e 89       	ldd	r23, Y+22	; 0x16
    1248:	8f 89       	ldd	r24, Y+23	; 0x17
    124a:	98 8d       	ldd	r25, Y+24	; 0x18
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	8b 89       	ldd	r24, Y+19	; 0x13
    125a:	9c 89       	ldd	r25, Y+20	; 0x14
    125c:	98 8b       	std	Y+16, r25	; 0x10
    125e:	8f 87       	std	Y+15, r24	; 0x0f
    1260:	8f 85       	ldd	r24, Y+15	; 0x0f
    1262:	98 89       	ldd	r25, Y+16	; 0x10
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <APP_systemControl+0x14a>
    1268:	98 8b       	std	Y+16, r25	; 0x10
    126a:	8f 87       	std	Y+15, r24	; 0x0f
    126c:	88 a1       	ldd	r24, Y+32	; 0x20
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	88 a3       	std	Y+32, r24	; 0x20
    1272:	88 a1       	ldd	r24, Y+32	; 0x20
    1274:	8c 33       	cpi	r24, 0x3C	; 60
    1276:	08 f4       	brcc	.+2      	; 0x127a <APP_systemControl+0x160>
    1278:	87 cf       	rjmp	.-242    	; 0x1188 <APP_systemControl+0x6e>
					_delay_ms(1000);
				}

				BUZZER_OFF();
    127a:	0e 94 18 0b 	call	0x1630	; 0x1630 <BUZZER_OFF>
    127e:	ac c0       	rjmp	.+344    	; 0x13d8 <APP_systemControl+0x2be>
			} else {
				UART_sendByte(PASSWORD_UNMATCHED);
    1280:	8d ef       	ldi	r24, 0xFD	; 253
    1282:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
    1286:	a8 c0       	rjmp	.+336    	; 0x13d8 <APP_systemControl+0x2be>
			}
		}
	} else if (choice == RESET_PASSWORD) {
    1288:	8f 8d       	ldd	r24, Y+31	; 0x1f
    128a:	8d 32       	cpi	r24, 0x2D	; 45
    128c:	09 f0       	breq	.+2      	; 0x1290 <APP_systemControl+0x176>
    128e:	a4 c0       	rjmp	.+328    	; 0x13d8 <APP_systemControl+0x2be>
		/**get the password Comparison result **/
		APP_PasswordCompareType result = APP_getPassword();
    1290:	0e 94 f5 09 	call	0x13ea	; 0x13ea <APP_getPassword>
    1294:	8d 8f       	std	Y+29, r24	; 0x1d
		if (result == PASSWORD_CORRECT) {
    1296:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	41 f4       	brne	.+16     	; 0x12ac <APP_systemControl+0x192>
			/**if the password is correct start resetting the password and Reset
			 *  the wrong trials counter adn tell the other µC**/
			UART_sendByte(PASSWORD_MATCHED);
    129c:	8e ef       	ldi	r24, 0xFE	; 254
    129e:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
			wrongpasscount = 0;
    12a2:	10 92 7e 01 	sts	0x017E, r1
			/**Reset the password**/
			APP_setPassword();
    12a6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <APP_setPassword>
    12aa:	96 c0       	rjmp	.+300    	; 0x13d8 <APP_systemControl+0x2be>
		} else if (result == PASSWORD_WRONG) {
    12ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ae:	88 23       	and	r24, r24
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <APP_systemControl+0x19a>
    12b2:	92 c0       	rjmp	.+292    	; 0x13d8 <APP_systemControl+0x2be>
			/**if the password is not correct reset the wrong trials counter**/
			wrongpasscount++;
    12b4:	80 91 7e 01 	lds	r24, 0x017E
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	80 93 7e 01 	sts	0x017E, r24
			if (wrongpasscount == 3) {
    12be:	80 91 7e 01 	lds	r24, 0x017E
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <APP_systemControl+0x1ae>
    12c6:	85 c0       	rjmp	.+266    	; 0x13d2 <APP_systemControl+0x2b8>
				/**if the number of wrong trials reaches the limit make an ALERT**/
				wrongpasscount = 0;
    12c8:	10 92 7e 01 	sts	0x017E, r1
				UART_sendByte(PASSWORD_TRIALS_EXHAUSTED);
    12cc:	8c ef       	ldi	r24, 0xFC	; 252
    12ce:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
				/**Ring the buzzer**/
				BUZZER_ON();
    12d2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <BUZZER_ON>
				for (count = 0; count < BUZZER_TIME; count++) {
    12d6:	18 a2       	std	Y+32, r1	; 0x20
    12d8:	75 c0       	rjmp	.+234    	; 0x13c4 <APP_systemControl+0x2aa>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	aa e7       	ldi	r26, 0x7A	; 122
    12e0:	b4 e4       	ldi	r27, 0x44	; 68
    12e2:	8b 87       	std	Y+11, r24	; 0x0b
    12e4:	9c 87       	std	Y+12, r25	; 0x0c
    12e6:	ad 87       	std	Y+13, r26	; 0x0d
    12e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	4a ef       	ldi	r20, 0xFA	; 250
    12f8:	54 e4       	ldi	r21, 0x44	; 68
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	8f 83       	std	Y+7, r24	; 0x07
    1304:	98 87       	std	Y+8, r25	; 0x08
    1306:	a9 87       	std	Y+9, r26	; 0x09
    1308:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    130a:	6f 81       	ldd	r22, Y+7	; 0x07
    130c:	78 85       	ldd	r23, Y+8	; 0x08
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	9a 85       	ldd	r25, Y+10	; 0x0a
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e8       	ldi	r20, 0x80	; 128
    1318:	5f e3       	ldi	r21, 0x3F	; 63
    131a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    131e:	88 23       	and	r24, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <APP_systemControl+0x212>
		__ticks = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	3f c0       	rjmp	.+126    	; 0x13aa <APP_systemControl+0x290>
	else if (__tmp > 65535)
    132c:	6f 81       	ldd	r22, Y+7	; 0x07
    132e:	78 85       	ldd	r23, Y+8	; 0x08
    1330:	89 85       	ldd	r24, Y+9	; 0x09
    1332:	9a 85       	ldd	r25, Y+10	; 0x0a
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	3f ef       	ldi	r19, 0xFF	; 255
    1338:	4f e7       	ldi	r20, 0x7F	; 127
    133a:	57 e4       	ldi	r21, 0x47	; 71
    133c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1340:	18 16       	cp	r1, r24
    1342:	4c f5       	brge	.+82     	; 0x1396 <APP_systemControl+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1344:	6b 85       	ldd	r22, Y+11	; 0x0b
    1346:	7c 85       	ldd	r23, Y+12	; 0x0c
    1348:	8d 85       	ldd	r24, Y+13	; 0x0d
    134a:	9e 85       	ldd	r25, Y+14	; 0x0e
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
    136c:	0f c0       	rjmp	.+30     	; 0x138c <APP_systemControl+0x272>
    136e:	88 ec       	ldi	r24, 0xC8	; 200
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <APP_systemControl+0x260>
    137e:	9c 83       	std	Y+4, r25	; 0x04
    1380:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	69 f7       	brne	.-38     	; 0x136e <APP_systemControl+0x254>
    1394:	14 c0       	rjmp	.+40     	; 0x13be <APP_systemControl+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1396:	6f 81       	ldd	r22, Y+7	; 0x07
    1398:	78 85       	ldd	r23, Y+8	; 0x08
    139a:	89 85       	ldd	r24, Y+9	; 0x09
    139c:	9a 85       	ldd	r25, Y+10	; 0x0a
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	9a 81       	ldd	r25, Y+2	; 0x02
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <APP_systemControl+0x29c>
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	88 a1       	ldd	r24, Y+32	; 0x20
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	88 a3       	std	Y+32, r24	; 0x20
    13c4:	88 a1       	ldd	r24, Y+32	; 0x20
    13c6:	8c 33       	cpi	r24, 0x3C	; 60
    13c8:	08 f4       	brcc	.+2      	; 0x13cc <APP_systemControl+0x2b2>
    13ca:	87 cf       	rjmp	.-242    	; 0x12da <APP_systemControl+0x1c0>
					_delay_ms(1000);
				}

				BUZZER_OFF();
    13cc:	0e 94 18 0b 	call	0x1630	; 0x1630 <BUZZER_OFF>
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <APP_systemControl+0x2be>
			} else {
				UART_sendByte(PASSWORD_UNMATCHED);
    13d2:	8d ef       	ldi	r24, 0xFD	; 253
    13d4:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
			}
		}
	}
}
    13d8:	a0 96       	adiw	r28, 0x20	; 32
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <APP_getPassword>:
APP_PasswordCompareType APP_getPassword(void) {
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	66 97       	sbiw	r28, 0x16	; 22
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
	/**This function gets the password from the other µC compares it with the
	 * the password stored in the EEPROM then reurns the result of this comparison**/
	uint8 count = 0;
    1402:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 password[5];
	/**get the user input password**/
	for (count = 0; count < 5; count++) {
    1404:	1f 86       	std	Y+15, r1	; 0x0f
    1406:	0f c0       	rjmp	.+30     	; 0x1426 <APP_getPassword+0x3c>
		password[count] = UART_receiveByte();
    1408:	8f 85       	ldd	r24, Y+15	; 0x0f
    140a:	08 2f       	mov	r16, r24
    140c:	10 e0       	ldi	r17, 0x00	; 0
    140e:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_receiveByte>
    1412:	28 2f       	mov	r18, r24
    1414:	ce 01       	movw	r24, r28
    1416:	40 96       	adiw	r24, 0x10	; 16
    1418:	fc 01       	movw	r30, r24
    141a:	e0 0f       	add	r30, r16
    141c:	f1 1f       	adc	r31, r17
    141e:	20 83       	st	Z, r18
	/**This function gets the password from the other µC compares it with the
	 * the password stored in the EEPROM then reurns the result of this comparison**/
	uint8 count = 0;
	uint8 password[5];
	/**get the user input password**/
	for (count = 0; count < 5; count++) {
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	8f 87       	std	Y+15, r24	; 0x0f
    1426:	8f 85       	ldd	r24, Y+15	; 0x0f
    1428:	85 30       	cpi	r24, 0x05	; 5
    142a:	70 f3       	brcs	.-36     	; 0x1408 <APP_getPassword+0x1e>
		password[count] = UART_receiveByte();
	}
	/**wait for the Enter KEY**/
	while (UART_receiveByte() != ENTER_KEY)
    142c:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_receiveByte>
    1430:	80 32       	cpi	r24, 0x20	; 32
    1432:	e1 f7       	brne	.-8      	; 0x142c <APP_getPassword+0x42>
		;
	/**Compare the Input password with the saved password**/
	for (count = 0; count < 5; count++) {
    1434:	1f 86       	std	Y+15, r1	; 0x0f
    1436:	8e c0       	rjmp	.+284    	; 0x1554 <APP_getPassword+0x16a>
		uint8 eepromdata;
		EEPROM_readByte(PASSWORD_ADDRESS + count, &eepromdata);
    1438:	8f 85       	ldd	r24, Y+15	; 0x0f
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	80 5c       	subi	r24, 0xC0	; 192
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	9e 01       	movw	r18, r28
    1444:	2b 5e       	subi	r18, 0xEB	; 235
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	b9 01       	movw	r22, r18
    144a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <EEPROM_readByte>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a0 e2       	ldi	r26, 0x20	; 32
    1454:	b1 e4       	ldi	r27, 0x41	; 65
    1456:	8b 87       	std	Y+11, r24	; 0x0b
    1458:	9c 87       	std	Y+12, r25	; 0x0c
    145a:	ad 87       	std	Y+13, r26	; 0x0d
    145c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1460:	7c 85       	ldd	r23, Y+12	; 0x0c
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	4a ef       	ldi	r20, 0xFA	; 250
    146c:	54 e4       	ldi	r21, 0x44	; 68
    146e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	8f 83       	std	Y+7, r24	; 0x07
    1478:	98 87       	std	Y+8, r25	; 0x08
    147a:	a9 87       	std	Y+9, r26	; 0x09
    147c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e8       	ldi	r20, 0x80	; 128
    148c:	5f e3       	ldi	r21, 0x3F	; 63
    148e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1492:	88 23       	and	r24, r24
    1494:	2c f4       	brge	.+10     	; 0x14a0 <APP_getPassword+0xb6>
		__ticks = 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	3f c0       	rjmp	.+126    	; 0x151e <APP_getPassword+0x134>
	else if (__tmp > 65535)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	3f ef       	ldi	r19, 0xFF	; 255
    14ac:	4f e7       	ldi	r20, 0x7F	; 127
    14ae:	57 e4       	ldi	r21, 0x47	; 71
    14b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	4c f5       	brge	.+82     	; 0x150a <APP_getPassword+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    14bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14be:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <APP_getPassword+0x116>
    14e2:	88 ec       	ldi	r24, 0xC8	; 200
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	9c 83       	std	Y+4, r25	; 0x04
    14e8:	8b 83       	std	Y+3, r24	; 0x03
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <APP_getPassword+0x104>
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	69 f7       	brne	.-38     	; 0x14e2 <APP_getPassword+0xf8>
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <APP_getPassword+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150a:	6f 81       	ldd	r22, Y+7	; 0x07
    150c:	78 85       	ldd	r23, Y+8	; 0x08
    150e:	89 85       	ldd	r24, Y+9	; 0x09
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <APP_getPassword+0x140>
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if (eepromdata != password[count]) {
    1532:	8f 85       	ldd	r24, Y+15	; 0x0f
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	ce 01       	movw	r24, r28
    153a:	40 96       	adiw	r24, 0x10	; 16
    153c:	fc 01       	movw	r30, r24
    153e:	e2 0f       	add	r30, r18
    1540:	f3 1f       	adc	r31, r19
    1542:	90 81       	ld	r25, Z
    1544:	8d 89       	ldd	r24, Y+21	; 0x15
    1546:	98 17       	cp	r25, r24
    1548:	11 f0       	breq	.+4      	; 0x154e <APP_getPassword+0x164>
			return PASSWORD_WRONG;
    154a:	1e 8a       	std	Y+22, r1	; 0x16
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <APP_getPassword+0x176>
	}
	/**wait for the Enter KEY**/
	while (UART_receiveByte() != ENTER_KEY)
		;
	/**Compare the Input password with the saved password**/
	for (count = 0; count < 5; count++) {
    154e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	8f 87       	std	Y+15, r24	; 0x0f
    1554:	8f 85       	ldd	r24, Y+15	; 0x0f
    1556:	85 30       	cpi	r24, 0x05	; 5
    1558:	08 f4       	brcc	.+2      	; 0x155c <APP_getPassword+0x172>
    155a:	6e cf       	rjmp	.-292    	; 0x1438 <APP_getPassword+0x4e>
		_delay_ms(10);
		if (eepromdata != password[count]) {
			return PASSWORD_WRONG;
		}
	}
	return PASSWORD_CORRECT;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	8e 8b       	std	Y+22, r24	; 0x16
    1560:	8e 89       	ldd	r24, Y+22	; 0x16
}
    1562:	66 96       	adiw	r28, 0x16	; 22
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <APP_openDoor>:
void APP_openDoor(void) {
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	/**This function starts the motor Rotation for a Certian period of time to
	 * open it then Calls the function that holds it in place**/
	/**Start Motor Rotation**/
	DCMOTOR_rotate(CLOCKWISE, 100);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	64 e6       	ldi	r22, 0x64	; 100
    1584:	0e 94 3e 0b 	call	0x167c	; 0x167c <DCMOTOR_rotate>
	Timer1_countSeconds(OPEN_DOOR_TIME);
    1588:	8f e0       	ldi	r24, 0x0F	; 15
    158a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <Timer1_countSeconds>
	Timer1_setCallBack(APP_holdDoor);
    158e:	8e ec       	ldi	r24, 0xCE	; 206
    1590:	9a e0       	ldi	r25, 0x0A	; 10
    1592:	0e 94 ca 11 	call	0x2394	; 0x2394 <Timer1_setCallBack>
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <APP_holdDoor>:
void APP_holdDoor(void) {
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	/**This function Stops the motor Rotation for a certain period then calls
	 * the function that Closes the Door**/
	static uint8 holdcount = 0;
	/**Stop the Motor**/
	DCMOTOR_rotate(STOP, 100);
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	64 e6       	ldi	r22, 0x64	; 100
    15a8:	0e 94 3e 0b 	call	0x167c	; 0x167c <DCMOTOR_rotate>
	/**if the motor wasn't stopped before then initiate Door closing after the
	 * timer fires but if it was closed before only stop the motor**/
	if (holdcount != 0) {
    15ac:	80 91 7f 01 	lds	r24, 0x017F
    15b0:	88 23       	and	r24, r24
    15b2:	19 f0       	breq	.+6      	; 0x15ba <APP_holdDoor+0x1e>
		holdcount = 0;
    15b4:	10 92 7f 01 	sts	0x017F, r1
    15b8:	0c c0       	rjmp	.+24     	; 0x15d2 <APP_holdDoor+0x36>
	} else {
		/**Initiate the timer**/
		Timer1_countSeconds(HOLD_DOOR_TIME);
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <Timer1_countSeconds>
		Timer1_setCallBack(APP_closeDoor);
    15c0:	8c ee       	ldi	r24, 0xEC	; 236
    15c2:	9a e0       	ldi	r25, 0x0A	; 10
    15c4:	0e 94 ca 11 	call	0x2394	; 0x2394 <Timer1_setCallBack>
		holdcount++;
    15c8:	80 91 7f 01 	lds	r24, 0x017F
    15cc:	8f 5f       	subi	r24, 0xFF	; 255
    15ce:	80 93 7f 01 	sts	0x017F, r24
	}
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <APP_closeDoor>:
void APP_closeDoor(void) {
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	/**this function strts the motor rotation in the direction of closing then
	 * after the timer fires calls the function that stops the motor**/
	/**initiate the Timer**/
	DCMOTOR_rotate(ANTICLOCKWISE, 100);
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	64 e6       	ldi	r22, 0x64	; 100
    15e4:	0e 94 3e 0b 	call	0x167c	; 0x167c <DCMOTOR_rotate>
	Timer1_countSeconds(CLOSE_DOOR_TIME);
    15e8:	8f e0       	ldi	r24, 0x0F	; 15
    15ea:	0e 94 d6 10 	call	0x21ac	; 0x21ac <Timer1_countSeconds>
	Timer1_setCallBack(APP_holdDoor);
    15ee:	8e ec       	ldi	r24, 0xCE	; 206
    15f0:	9a e0       	ldi	r25, 0x0A	; 10
    15f2:	0e 94 ca 11 	call	0x2394	; 0x2394 <Timer1_setCallBack>
}
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <BUZZER_init>:
 *      Author: mabkr
 */
#include"gpio.h"
#include"buzzer.h"

void BUZZER_init(void) {
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	BUZZER_OFF();
    160e:	0e 94 18 0b 	call	0x1630	; 0x1630 <BUZZER_OFF>
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <BUZZER_ON>:
void BUZZER_ON(void) {
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <BUZZER_OFF>:
void BUZZER_OFF(void) {
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <DCMOTOR_init>:
 *******************************************************************************/
#include"dc_motor.h"
#include"gpio.h"
#include"pwm.h"
/**This function initializes the DC Motor*/
void DCMOTOR_init(void){
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	/**Setting up Motor Pins**/
	GPIO_setupPinDirection(DCMOTOR_E_PORT,DCMOTOR_E_PIN,PIN_OUTPUT);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	63 e0       	ldi	r22, 0x03	; 3
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_IN1_PORT,DCMOTOR_IN1_PIN,PIN_OUTPUT);
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	65 e0       	ldi	r22, 0x05	; 5
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_IN2_PORT,DCMOTOR_IN2_PIN,PIN_OUTPUT);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	66 e0       	ldi	r22, 0x06	; 6
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPinDirection>
	/**Initializing Motor Pins**/
	DCMOTOR_rotate(STOP,0);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	0e 94 3e 0b 	call	0x167c	; 0x167c <DCMOTOR_rotate>
}
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <DCMOTOR_rotate>:
/**This function Changes the DC Motor settings to work with the given speed and
 * state*/
void DCMOTOR_rotate(DCMOTOR_STATE state,uint8 speed){
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <DCMOTOR_rotate+0x6>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	6a 83       	std	Y+2, r22	; 0x02
	/**Changing Motor Speed**/
	PWM_Timer0_Start(speed);
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <PWM_Timer0_Start>
	/**Changing Motor State**/
	GPIO_writePin(DCMOTOR_IN1_PORT,DCMOTOR_IN1_PIN,(state)&(1<<0));
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	98 2f       	mov	r25, r24
    1694:	91 70       	andi	r25, 0x01	; 1
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	65 e0       	ldi	r22, 0x05	; 5
    169a:	49 2f       	mov	r20, r25
    169c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
	GPIO_writePin(DCMOTOR_IN2_PORT,DCMOTOR_IN2_PIN,(state)&(1<<1));
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	98 2f       	mov	r25, r24
    16a4:	92 70       	andi	r25, 0x02	; 2
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	66 e0       	ldi	r22, 0x06	; 6
    16aa:	49 2f       	mov	r20, r25
    16ac:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GPIO_writePin>
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <EEPROM_readByte>:
 * µC		   : ATMega 32 (8-BIT)
 * Date 	   : 4/11/2022(November)
 *******************************************************************************/
#include"external_eeprom.h"
#include"twi.h"
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data) {
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <EEPROM_readByte+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <EEPROM_readByte+0x8>
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	7c 83       	std	Y+4, r23	; 0x04
    16ce:	6b 83       	std	Y+3, r22	; 0x03
	/**Sending the Start Condition**/
	TWI_start();
    16d0:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_start>
	if (TWI_getStatus() != TWI_START) {
    16d4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    16d8:	88 30       	cpi	r24, 0x08	; 8
    16da:	11 f0       	breq	.+4      	; 0x16e0 <EEPROM_readByte+0x26>
		return ERROR;
    16dc:	1d 82       	std	Y+5, r1	; 0x05
    16de:	44 c0       	rjmp	.+136    	; 0x1768 <EEPROM_readByte+0xae>
	}
	/**Sending EEPROM Address and the first three bits of the byte address**/
	TWI_writeByte(((uint8) (0xA0)) | ((u16addr & 0x0700) >> 7));
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	80 70       	andi	r24, 0x00	; 0
    16e6:	97 70       	andi	r25, 0x07	; 7
    16e8:	88 0f       	add	r24, r24
    16ea:	89 2f       	mov	r24, r25
    16ec:	88 1f       	adc	r24, r24
    16ee:	99 0b       	sbc	r25, r25
    16f0:	91 95       	neg	r25
    16f2:	80 6a       	ori	r24, 0xA0	; 160
    16f4:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK) {
    16f8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    16fc:	88 31       	cpi	r24, 0x18	; 24
    16fe:	11 f0       	breq	.+4      	; 0x1704 <EEPROM_readByte+0x4a>
		return ERROR;
    1700:	1d 82       	std	Y+5, r1	; 0x05
    1702:	32 c0       	rjmp	.+100    	; 0x1768 <EEPROM_readByte+0xae>
	}
	/**Sending the rest of the byte address**/
	TWI_writeByte((uint8) u16addr);
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK) {
    170a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    170e:	88 32       	cpi	r24, 0x28	; 40
    1710:	11 f0       	breq	.+4      	; 0x1716 <EEPROM_readByte+0x5c>
		return ERROR;
    1712:	1d 82       	std	Y+5, r1	; 0x05
    1714:	29 c0       	rjmp	.+82     	; 0x1768 <EEPROM_readByte+0xae>
	}
	/**Sending the repeated Start Condition to get the Data**/
	TWI_start();
    1716:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_start>
	if (TWI_getStatus()!= TWI_REP_START) {
    171a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    171e:	80 31       	cpi	r24, 0x10	; 16
    1720:	11 f0       	breq	.+4      	; 0x1726 <EEPROM_readByte+0x6c>
		return ERROR;
    1722:	1d 82       	std	Y+5, r1	; 0x05
    1724:	21 c0       	rjmp	.+66     	; 0x1768 <EEPROM_readByte+0xae>
	}
	/**Sending the device address again but now with read**/
	TWI_writeByte((uint8) (0xA0) | ((u16addr & 0x0700) >> 7) | 1);
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	80 70       	andi	r24, 0x00	; 0
    172c:	97 70       	andi	r25, 0x07	; 7
    172e:	88 0f       	add	r24, r24
    1730:	89 2f       	mov	r24, r25
    1732:	88 1f       	adc	r24, r24
    1734:	99 0b       	sbc	r25, r25
    1736:	91 95       	neg	r25
    1738:	81 6a       	ori	r24, 0xA1	; 161
    173a:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK) {
    173e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    1742:	80 34       	cpi	r24, 0x40	; 64
    1744:	11 f0       	breq	.+4      	; 0x174a <EEPROM_readByte+0x90>
		return ERROR;
    1746:	1d 82       	std	Y+5, r1	; 0x05
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <EEPROM_readByte+0xae>
	}
	*u8data = TWI_readByteWithNACK();
    174a:	0e 94 4e 12 	call	0x249c	; 0x249c <TWI_readByteWithNACK>
    174e:	eb 81       	ldd	r30, Y+3	; 0x03
    1750:	fc 81       	ldd	r31, Y+4	; 0x04
    1752:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK) {
    1754:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    1758:	88 35       	cpi	r24, 0x58	; 88
    175a:	11 f0       	breq	.+4      	; 0x1760 <EEPROM_readByte+0xa6>
		return ERROR;
    175c:	1d 82       	std	Y+5, r1	; 0x05
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <EEPROM_readByte+0xae>
	}
	TWI_stop();
    1760:	0e 94 19 12 	call	0x2432	; 0x2432 <TWI_stop>
	return SUCCESS;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	8d 81       	ldd	r24, Y+5	; 0x05

}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data) {
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <EEPROM_writeByte+0x6>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <EEPROM_writeByte+0x8>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	9a 83       	std	Y+2, r25	; 0x02
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	6b 83       	std	Y+3, r22	; 0x03
	/**Sending the Start Condition**/
	TWI_start();
    178c:	0e 94 09 12 	call	0x2412	; 0x2412 <TWI_start>
	if (TWI_getStatus() != TWI_START) {
    1790:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    1794:	88 30       	cpi	r24, 0x08	; 8
    1796:	11 f0       	breq	.+4      	; 0x179c <EEPROM_writeByte+0x22>
		return ERROR;
    1798:	1c 82       	std	Y+4, r1	; 0x04
    179a:	28 c0       	rjmp	.+80     	; 0x17ec <EEPROM_writeByte+0x72>
	}
	/**Sending EEPROM Address and the first three bits of the byte address**/
	TWI_writeByte(((uint8) (0xA0)) | ((u16addr & 0x0700) >> 7));
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	80 70       	andi	r24, 0x00	; 0
    17a2:	97 70       	andi	r25, 0x07	; 7
    17a4:	88 0f       	add	r24, r24
    17a6:	89 2f       	mov	r24, r25
    17a8:	88 1f       	adc	r24, r24
    17aa:	99 0b       	sbc	r25, r25
    17ac:	91 95       	neg	r25
    17ae:	80 6a       	ori	r24, 0xA0	; 160
    17b0:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK) {
    17b4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    17b8:	88 31       	cpi	r24, 0x18	; 24
    17ba:	11 f0       	breq	.+4      	; 0x17c0 <EEPROM_writeByte+0x46>
		return ERROR;
    17bc:	1c 82       	std	Y+4, r1	; 0x04
    17be:	16 c0       	rjmp	.+44     	; 0x17ec <EEPROM_writeByte+0x72>
	}
	/**Sending the rest of the byte address**/
	TWI_writeByte((uint8) u16addr);
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK) {
    17c6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    17ca:	88 32       	cpi	r24, 0x28	; 40
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <EEPROM_writeByte+0x58>
		return ERROR;
    17ce:	1c 82       	std	Y+4, r1	; 0x04
    17d0:	0d c0       	rjmp	.+26     	; 0x17ec <EEPROM_writeByte+0x72>
	}
	TWI_writeByte(u8data);
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	0e 94 24 12 	call	0x2448	; 0x2448 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17d8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <TWI_getStatus>
    17dc:	88 32       	cpi	r24, 0x28	; 40
    17de:	11 f0       	breq	.+4      	; 0x17e4 <EEPROM_writeByte+0x6a>
		return ERROR;
    17e0:	1c 82       	std	Y+4, r1	; 0x04
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <EEPROM_writeByte+0x72>
	/**Sending the Stop Condition**/
	TWI_stop();
    17e4:	0e 94 19 12 	call	0x2432	; 0x2432 <TWI_stop>
	return SUCCESS;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	8c 83       	std	Y+4, r24	; 0x04
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04

}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <GPIO_setupPinDirection>:
#include"gpio.h"
#include"common_macros.h"
#include "avr/io.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <GPIO_setupPinDirection+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <GPIO_setupPinDirection+0x8>
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6a 83       	std	Y+2, r22	; 0x02
    180e:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	08 f0       	brcs	.+2      	; 0x1818 <GPIO_setupPinDirection+0x1c>
    1816:	d5 c0       	rjmp	.+426    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 30       	cpi	r24, 0x08	; 8
    181c:	08 f0       	brcs	.+2      	; 0x1820 <GPIO_setupPinDirection+0x24>
    181e:	d1 c0       	rjmp	.+418    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
		return;
	} else {
		switch (port_num) {
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	3d 83       	std	Y+5, r19	; 0x05
    1828:	2c 83       	std	Y+4, r18	; 0x04
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	91 05       	cpc	r25, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <GPIO_setupPinDirection+0x3a>
    1834:	43 c0       	rjmp	.+134    	; 0x18bc <GPIO_setupPinDirection+0xc0>
    1836:	2c 81       	ldd	r18, Y+4	; 0x04
    1838:	3d 81       	ldd	r19, Y+5	; 0x05
    183a:	22 30       	cpi	r18, 0x02	; 2
    183c:	31 05       	cpc	r19, r1
    183e:	2c f4       	brge	.+10     	; 0x184a <GPIO_setupPinDirection+0x4e>
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	71 f0       	breq	.+28     	; 0x1864 <GPIO_setupPinDirection+0x68>
    1848:	bc c0       	rjmp	.+376    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <GPIO_setupPinDirection+0x5a>
    1854:	5f c0       	rjmp	.+190    	; 0x1914 <GPIO_setupPinDirection+0x118>
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <GPIO_setupPinDirection+0x66>
    1860:	85 c0       	rjmp	.+266    	; 0x196c <GPIO_setupPinDirection+0x170>
    1862:	af c0       	rjmp	.+350    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_INPUT) {
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	88 23       	and	r24, r24
    1868:	a9 f4       	brne	.+42     	; 0x1894 <GPIO_setupPinDirection+0x98>
				CLEAR_BIT(DDRA, pin_num);
    186a:	aa e3       	ldi	r26, 0x3A	; 58
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ea e3       	ldi	r30, 0x3A	; 58
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <GPIO_setupPinDirection+0x8c>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <GPIO_setupPinDirection+0x88>
    188c:	80 95       	com	r24
    188e:	84 23       	and	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	97 c0       	rjmp	.+302    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRA, pin_num);
    1894:	aa e3       	ldi	r26, 0x3A	; 58
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ea e3       	ldi	r30, 0x3A	; 58
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_setupPinDirection+0xb6>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_setupPinDirection+0xb2>
    18b6:	84 2b       	or	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	83 c0       	rjmp	.+262    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_INPUT) {
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	88 23       	and	r24, r24
    18c0:	a9 f4       	brne	.+42     	; 0x18ec <GPIO_setupPinDirection+0xf0>
				CLEAR_BIT(DDRB, pin_num);
    18c2:	a7 e3       	ldi	r26, 0x37	; 55
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e7 e3       	ldi	r30, 0x37	; 55
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_setupPinDirection+0xe4>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_setupPinDirection+0xe0>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	6b c0       	rjmp	.+214    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRB, pin_num);
    18ec:	a7 e3       	ldi	r26, 0x37	; 55
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e3       	ldi	r30, 0x37	; 55
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_setupPinDirection+0x10e>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_setupPinDirection+0x10a>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	57 c0       	rjmp	.+174    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_INPUT) {
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	88 23       	and	r24, r24
    1918:	a9 f4       	brne	.+42     	; 0x1944 <GPIO_setupPinDirection+0x148>
				CLEAR_BIT(DDRC, pin_num);
    191a:	a4 e3       	ldi	r26, 0x34	; 52
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e4 e3       	ldi	r30, 0x34	; 52
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_setupPinDirection+0x13c>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_setupPinDirection+0x138>
    193c:	80 95       	com	r24
    193e:	84 23       	and	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	3f c0       	rjmp	.+126    	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRC, pin_num);
    1944:	a4 e3       	ldi	r26, 0x34	; 52
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e4 e3       	ldi	r30, 0x34	; 52
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_setupPinDirection+0x166>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_setupPinDirection+0x162>
    1966:	84 2b       	or	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	2b c0       	rjmp	.+86     	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_INPUT) {
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	88 23       	and	r24, r24
    1970:	a9 f4       	brne	.+42     	; 0x199c <GPIO_setupPinDirection+0x1a0>
				CLEAR_BIT(DDRD, pin_num);
    1972:	a1 e3       	ldi	r26, 0x31	; 49
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e1 e3       	ldi	r30, 0x31	; 49
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <GPIO_setupPinDirection+0x194>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <GPIO_setupPinDirection+0x190>
    1994:	80 95       	com	r24
    1996:	84 23       	and	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	13 c0       	rjmp	.+38     	; 0x19c2 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRD, pin_num);
    199c:	a1 e3       	ldi	r26, 0x31	; 49
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e1 e3       	ldi	r30, 0x31	; 49
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_setupPinDirection+0x1be>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_setupPinDirection+0x1ba>
    19be:	84 2b       	or	r24, r20
    19c0:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <GPIO_setupPortDirection>:
void GPIO_setupPortDirection(uint8 port_num, GPIO_PinDirectionType direction) {
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <GPIO_setupPortDirection+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <GPIO_setupPortDirection+0x8>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	84 30       	cpi	r24, 0x04	; 4
    19e6:	90 f5       	brcc	.+100    	; 0x1a4c <GPIO_setupPortDirection+0x7a>
		return;

	} else {
		switch (port_num) {
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3c 83       	std	Y+4, r19	; 0x04
    19f0:	2b 83       	std	Y+3, r18	; 0x03
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	91 05       	cpc	r25, r1
    19fa:	d1 f0       	breq	.+52     	; 0x1a30 <GPIO_setupPortDirection+0x5e>
    19fc:	2b 81       	ldd	r18, Y+3	; 0x03
    19fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <GPIO_setupPortDirection+0x3e>
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	61 f0       	breq	.+24     	; 0x1a26 <GPIO_setupPortDirection+0x54>
    1a0e:	1e c0       	rjmp	.+60     	; 0x1a4c <GPIO_setupPortDirection+0x7a>
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	3c 81       	ldd	r19, Y+4	; 0x04
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <GPIO_setupPortDirection+0x68>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	91 05       	cpc	r25, r1
    1a22:	81 f0       	breq	.+32     	; 0x1a44 <GPIO_setupPortDirection+0x72>
    1a24:	13 c0       	rjmp	.+38     	; 0x1a4c <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1a26:	ea e3       	ldi	r30, 0x3A	; 58
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	80 83       	st	Z, r24
    1a2e:	0e c0       	rjmp	.+28     	; 0x1a4c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a30:	e7 e3       	ldi	r30, 0x37	; 55
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	80 83       	st	Z, r24
    1a38:	09 c0       	rjmp	.+18     	; 0x1a4c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a3a:	e4 e3       	ldi	r30, 0x34	; 52
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a44:	e1 e3       	ldi	r30, 0x31	; 49
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <GPIO_writePin+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <GPIO_writePin+0x8>
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	6a 83       	std	Y+2, r22	; 0x02
    1a6c:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <GPIO_writePin+0x1c>
    1a74:	d5 c0       	rjmp	.+426    	; 0x1c20 <GPIO_writePin+0x1c6>
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	88 30       	cpi	r24, 0x08	; 8
    1a7a:	08 f0       	brcs	.+2      	; 0x1a7e <GPIO_writePin+0x24>
    1a7c:	d1 c0       	rjmp	.+418    	; 0x1c20 <GPIO_writePin+0x1c6>
		return;
	} else {
		switch (port_num) {
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	3d 83       	std	Y+5, r19	; 0x05
    1a86:	2c 83       	std	Y+4, r18	; 0x04
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	91 05       	cpc	r25, r1
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <GPIO_writePin+0x3a>
    1a92:	43 c0       	rjmp	.+134    	; 0x1b1a <GPIO_writePin+0xc0>
    1a94:	2c 81       	ldd	r18, Y+4	; 0x04
    1a96:	3d 81       	ldd	r19, Y+5	; 0x05
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <GPIO_writePin+0x4e>
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	71 f0       	breq	.+28     	; 0x1ac2 <GPIO_writePin+0x68>
    1aa6:	bc c0       	rjmp	.+376    	; 0x1c20 <GPIO_writePin+0x1c6>
    1aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <GPIO_writePin+0x5a>
    1ab2:	5f c0       	rjmp	.+190    	; 0x1b72 <GPIO_writePin+0x118>
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab8:	83 30       	cpi	r24, 0x03	; 3
    1aba:	91 05       	cpc	r25, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <GPIO_writePin+0x66>
    1abe:	85 c0       	rjmp	.+266    	; 0x1bca <GPIO_writePin+0x170>
    1ac0:	af c0       	rjmp	.+350    	; 0x1c20 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_LOW) {
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	88 23       	and	r24, r24
    1ac6:	a9 f4       	brne	.+42     	; 0x1af2 <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA, pin_num);
    1ac8:	ab e3       	ldi	r26, 0x3B	; 59
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	eb e3       	ldi	r30, 0x3B	; 59
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <GPIO_writePin+0x8c>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <GPIO_writePin+0x88>
    1aea:	80 95       	com	r24
    1aec:	84 23       	and	r24, r20
    1aee:	8c 93       	st	X, r24
    1af0:	97 c0       	rjmp	.+302    	; 0x1c20 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTA, pin_num);
    1af2:	ab e3       	ldi	r26, 0x3B	; 59
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	eb e3       	ldi	r30, 0x3B	; 59
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <GPIO_writePin+0xb6>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <GPIO_writePin+0xb2>
    1b14:	84 2b       	or	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	83 c0       	rjmp	.+262    	; 0x1c20 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW) {
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	88 23       	and	r24, r24
    1b1e:	a9 f4       	brne	.+42     	; 0x1b4a <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB, pin_num);
    1b20:	a8 e3       	ldi	r26, 0x38	; 56
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e8 e3       	ldi	r30, 0x38	; 56
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <GPIO_writePin+0xe4>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <GPIO_writePin+0xe0>
    1b42:	80 95       	com	r24
    1b44:	84 23       	and	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	6b c0       	rjmp	.+214    	; 0x1c20 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTB, pin_num);
    1b4a:	a8 e3       	ldi	r26, 0x38	; 56
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e8 e3       	ldi	r30, 0x38	; 56
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <GPIO_writePin+0x10e>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <GPIO_writePin+0x10a>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	57 c0       	rjmp	.+174    	; 0x1c20 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW) {
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	88 23       	and	r24, r24
    1b76:	a9 f4       	brne	.+42     	; 0x1ba2 <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC, pin_num);
    1b78:	a5 e3       	ldi	r26, 0x35	; 53
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e5 e3       	ldi	r30, 0x35	; 53
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <GPIO_writePin+0x13c>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <GPIO_writePin+0x138>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTC, pin_num);
    1ba2:	a5 e3       	ldi	r26, 0x35	; 53
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e5 e3       	ldi	r30, 0x35	; 53
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <GPIO_writePin+0x166>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <GPIO_writePin+0x162>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	2b c0       	rjmp	.+86     	; 0x1c20 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW) {
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	88 23       	and	r24, r24
    1bce:	a9 f4       	brne	.+42     	; 0x1bfa <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD, pin_num);
    1bd0:	a2 e3       	ldi	r26, 0x32	; 50
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e2 e3       	ldi	r30, 0x32	; 50
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <GPIO_writePin+0x194>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <GPIO_writePin+0x190>
    1bf2:	80 95       	com	r24
    1bf4:	84 23       	and	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	13 c0       	rjmp	.+38     	; 0x1c20 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTD, pin_num);
    1bfa:	a2 e3       	ldi	r26, 0x32	; 50
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e2 e3       	ldi	r30, 0x32	; 50
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_writePin+0x1be>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_writePin+0x1ba>
    1c1c:	84 2b       	or	r24, r20
    1c1e:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value) {
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <GPIO_writePort+0x6>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <GPIO_writePort+0x8>
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	90 f5       	brcc	.+100    	; 0x1caa <GPIO_writePort+0x7a>
		return;
	} else {
		switch (port_num) {
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3c 83       	std	Y+4, r19	; 0x04
    1c4e:	2b 83       	std	Y+3, r18	; 0x03
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	91 05       	cpc	r25, r1
    1c58:	d1 f0       	breq	.+52     	; 0x1c8e <GPIO_writePort+0x5e>
    1c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5e:	22 30       	cpi	r18, 0x02	; 2
    1c60:	31 05       	cpc	r19, r1
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <GPIO_writePort+0x3e>
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	61 f0       	breq	.+24     	; 0x1c84 <GPIO_writePort+0x54>
    1c6c:	1e c0       	rjmp	.+60     	; 0x1caa <GPIO_writePort+0x7a>
    1c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c70:	3c 81       	ldd	r19, Y+4	; 0x04
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	81 f0       	breq	.+32     	; 0x1c98 <GPIO_writePort+0x68>
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	91 05       	cpc	r25, r1
    1c80:	81 f0       	breq	.+32     	; 0x1ca2 <GPIO_writePort+0x72>
    1c82:	13 c0       	rjmp	.+38     	; 0x1caa <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1c84:	eb e3       	ldi	r30, 0x3B	; 59
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	80 83       	st	Z, r24
    1c8c:	0e c0       	rjmp	.+28     	; 0x1caa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c8e:	e8 e3       	ldi	r30, 0x38	; 56
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	80 83       	st	Z, r24
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c98:	e5 e3       	ldi	r30, 0x35	; 53
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	80 83       	st	Z, r24
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ca2:	e2 e3       	ldi	r30, 0x32	; 50
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <GPIO_readPin+0x6>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <GPIO_readPin+0x8>
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <GPIO_readPin+0xa>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
    1cc8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result = 0;
    1cca:	19 82       	std	Y+1, r1	; 0x01
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	84 30       	cpi	r24, 0x04	; 4
    1cd0:	18 f4       	brcc	.+6      	; 0x1cd8 <GPIO_readPin+0x20>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	88 30       	cpi	r24, 0x08	; 8
    1cd6:	18 f0       	brcs	.+6      	; 0x1cde <GPIO_readPin+0x26>
		return result;
    1cd8:	29 81       	ldd	r18, Y+1	; 0x01
    1cda:	2e 83       	std	Y+6, r18	; 0x06
    1cdc:	9b c0       	rjmp	.+310    	; 0x1e14 <GPIO_readPin+0x15c>
	}
	switch (port_num) {
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	5d 83       	std	Y+5, r21	; 0x05
    1ce6:	4c 83       	std	Y+4, r20	; 0x04
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	81 30       	cpi	r24, 0x01	; 1
    1cee:	91 05       	cpc	r25, r1
    1cf0:	b1 f1       	breq	.+108    	; 0x1d5e <GPIO_readPin+0xa6>
    1cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	34 f4       	brge	.+12     	; 0x1d08 <GPIO_readPin+0x50>
    1cfc:	4c 81       	ldd	r20, Y+4	; 0x04
    1cfe:	5d 81       	ldd	r21, Y+5	; 0x05
    1d00:	41 15       	cp	r20, r1
    1d02:	51 05       	cpc	r21, r1
    1d04:	71 f0       	breq	.+28     	; 0x1d22 <GPIO_readPin+0x6a>
    1d06:	84 c0       	rjmp	.+264    	; 0x1e10 <GPIO_readPin+0x158>
    1d08:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0c:	82 30       	cpi	r24, 0x02	; 2
    1d0e:	91 05       	cpc	r25, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <GPIO_readPin+0x5c>
    1d12:	43 c0       	rjmp	.+134    	; 0x1d9a <GPIO_readPin+0xe2>
    1d14:	2c 81       	ldd	r18, Y+4	; 0x04
    1d16:	3d 81       	ldd	r19, Y+5	; 0x05
    1d18:	23 30       	cpi	r18, 0x03	; 3
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <GPIO_readPin+0x68>
    1d1e:	5b c0       	rjmp	.+182    	; 0x1dd6 <GPIO_readPin+0x11e>
    1d20:	77 c0       	rjmp	.+238    	; 0x1e10 <GPIO_readPin+0x158>
	case PORTA_ID:
		result = GET_BIT(PINA, pin_num);
    1d22:	e9 e3       	ldi	r30, 0x39	; 57
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <GPIO_readPin+0x84>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	2a 95       	dec	r18
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <GPIO_readPin+0x80>
    1d40:	9a 01       	movw	r18, r20
    1d42:	28 23       	and	r18, r24
    1d44:	39 23       	and	r19, r25
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a9 01       	movw	r20, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <GPIO_readPin+0x9c>
    1d50:	55 95       	asr	r21
    1d52:	47 95       	ror	r20
    1d54:	8a 95       	dec	r24
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <GPIO_readPin+0x98>
    1d58:	ca 01       	movw	r24, r20
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	59 c0       	rjmp	.+178    	; 0x1e10 <GPIO_readPin+0x158>
		break;
	case PORTB_ID:
		result = GET_BIT(PINB, pin_num);
    1d5e:	e6 e3       	ldi	r30, 0x36	; 54
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_readPin+0xc0>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	2a 95       	dec	r18
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_readPin+0xbc>
    1d7c:	9a 01       	movw	r18, r20
    1d7e:	28 23       	and	r18, r24
    1d80:	39 23       	and	r19, r25
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <GPIO_readPin+0xd8>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <GPIO_readPin+0xd4>
    1d94:	ca 01       	movw	r24, r20
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	3b c0       	rjmp	.+118    	; 0x1e10 <GPIO_readPin+0x158>
		break;
	case PORTC_ID:
		result = GET_BIT(PINC, pin_num);
    1d9a:	e3 e3       	ldi	r30, 0x33	; 51
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <GPIO_readPin+0xfc>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	2a 95       	dec	r18
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <GPIO_readPin+0xf8>
    1db8:	9a 01       	movw	r18, r20
    1dba:	28 23       	and	r18, r24
    1dbc:	39 23       	and	r19, r25
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <GPIO_readPin+0x114>
    1dc8:	55 95       	asr	r21
    1dca:	47 95       	ror	r20
    1dcc:	8a 95       	dec	r24
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <GPIO_readPin+0x110>
    1dd0:	ca 01       	movw	r24, r20
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	1d c0       	rjmp	.+58     	; 0x1e10 <GPIO_readPin+0x158>
		break;
	case PORTD_ID:
		result = GET_BIT(PIND, pin_num);
    1dd6:	e0 e3       	ldi	r30, 0x30	; 48
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <GPIO_readPin+0x138>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	2a 95       	dec	r18
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <GPIO_readPin+0x134>
    1df4:	9a 01       	movw	r18, r20
    1df6:	28 23       	and	r18, r24
    1df8:	39 23       	and	r19, r25
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a9 01       	movw	r20, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <GPIO_readPin+0x150>
    1e04:	55 95       	asr	r21
    1e06:	47 95       	ror	r20
    1e08:	8a 95       	dec	r24
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <GPIO_readPin+0x14c>
    1e0c:	ca 01       	movw	r24, r20
    1e0e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return result;
    1e10:	59 81       	ldd	r21, Y+1	; 0x01
    1e12:	5e 83       	std	Y+6, r21	; 0x06
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1e16:	26 96       	adiw	r28, 0x06	; 6
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num) {
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <GPIO_readPort+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <GPIO_readPort+0x8>
    1e30:	0f 92       	push	r0
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 result = 0;
    1e38:	19 82       	std	Y+1, r1	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	84 30       	cpi	r24, 0x04	; 4
    1e3e:	18 f0       	brcs	.+6      	; 0x1e46 <GPIO_readPort+0x1e>
		return result;
    1e40:	29 81       	ldd	r18, Y+1	; 0x01
    1e42:	2d 83       	std	Y+5, r18	; 0x05
    1e44:	34 c0       	rjmp	.+104    	; 0x1eae <GPIO_readPort+0x86>
	}
	switch (port_num) {
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3c 83       	std	Y+4, r19	; 0x04
    1e4e:	2b 83       	std	Y+3, r18	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	91 05       	cpc	r25, r1
    1e58:	d1 f0       	breq	.+52     	; 0x1e8e <GPIO_readPort+0x66>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <GPIO_readPort+0x46>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	61 f0       	breq	.+24     	; 0x1e84 <GPIO_readPort+0x5c>
    1e6c:	1e c0       	rjmp	.+60     	; 0x1eaa <GPIO_readPort+0x82>
    1e6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e70:	3c 81       	ldd	r19, Y+4	; 0x04
    1e72:	22 30       	cpi	r18, 0x02	; 2
    1e74:	31 05       	cpc	r19, r1
    1e76:	81 f0       	breq	.+32     	; 0x1e98 <GPIO_readPort+0x70>
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	83 30       	cpi	r24, 0x03	; 3
    1e7e:	91 05       	cpc	r25, r1
    1e80:	81 f0       	breq	.+32     	; 0x1ea2 <GPIO_readPort+0x7a>
    1e82:	13 c0       	rjmp	.+38     	; 0x1eaa <GPIO_readPort+0x82>
	case PORTA_ID:
		result = PINA;
    1e84:	e9 e3       	ldi	r30, 0x39	; 57
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	0e c0       	rjmp	.+28     	; 0x1eaa <GPIO_readPort+0x82>
		break;
	case PORTB_ID:
		result = PINB;
    1e8e:	e6 e3       	ldi	r30, 0x36	; 54
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	09 c0       	rjmp	.+18     	; 0x1eaa <GPIO_readPort+0x82>
		break;
	case PORTC_ID:
		result = PINC;
    1e98:	e3 e3       	ldi	r30, 0x33	; 51
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <GPIO_readPort+0x82>
		break;
	case PORTD_ID:
		result = PIND;
    1ea2:	e0 e3       	ldi	r30, 0x30	; 48
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return result;
    1eaa:	99 81       	ldd	r25, Y+1	; 0x01
    1eac:	9d 83       	std	Y+5, r25	; 0x05
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <main>:
#include<util/delay.h>
#include"buzzer.h"
#include"timer1.h"
#include"dc_motor.h"
#include"twi.h"
int main() {
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	a2 97       	sbiw	r28, 0x22	; 34
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
	{
		Timer1_ConfigType config = { 0, ONE_SECOND_COUNT, TIMER1_FCPU_1024, TIMER1_COMPARE };
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	9d 8b       	std	Y+21, r25	; 0x15
    1eda:	8c 8b       	std	Y+20, r24	; 0x14
    1edc:	e7 e7       	ldi	r30, 0x77	; 119
    1ede:	f1 e0       	ldi	r31, 0x01	; 1
    1ee0:	ff 8b       	std	Y+23, r31	; 0x17
    1ee2:	ee 8b       	std	Y+22, r30	; 0x16
    1ee4:	f6 e0       	ldi	r31, 0x06	; 6
    1ee6:	f8 8f       	std	Y+24, r31	; 0x18
    1ee8:	ee 89       	ldd	r30, Y+22	; 0x16
    1eea:	ff 89       	ldd	r31, Y+23	; 0x17
    1eec:	00 80       	ld	r0, Z
    1eee:	8e 89       	ldd	r24, Y+22	; 0x16
    1ef0:	9f 89       	ldd	r25, Y+23	; 0x17
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	9f 8b       	std	Y+23, r25	; 0x17
    1ef6:	8e 8b       	std	Y+22, r24	; 0x16
    1ef8:	ec 89       	ldd	r30, Y+20	; 0x14
    1efa:	fd 89       	ldd	r31, Y+21	; 0x15
    1efc:	00 82       	st	Z, r0
    1efe:	8c 89       	ldd	r24, Y+20	; 0x14
    1f00:	9d 89       	ldd	r25, Y+21	; 0x15
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	9d 8b       	std	Y+21, r25	; 0x15
    1f06:	8c 8b       	std	Y+20, r24	; 0x14
    1f08:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0a:	91 50       	subi	r25, 0x01	; 1
    1f0c:	98 8f       	std	Y+24, r25	; 0x18
    1f0e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f10:	ee 23       	and	r30, r30
    1f12:	51 f7       	brne	.-44     	; 0x1ee8 <main+0x28>
		Timer1_init(&config);
    1f14:	ce 01       	movw	r24, r28
    1f16:	01 96       	adiw	r24, 0x01	; 1
    1f18:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Timer1_init>
		TWI_ConfigType twiconfig = { 1, 2, TWI_FCPU_64 };
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	07 96       	adiw	r24, 0x07	; 7
    1f20:	9a 8f       	std	Y+26, r25	; 0x1a
    1f22:	89 8f       	std	Y+25, r24	; 0x19
    1f24:	e4 e7       	ldi	r30, 0x74	; 116
    1f26:	f1 e0       	ldi	r31, 0x01	; 1
    1f28:	fc 8f       	std	Y+28, r31	; 0x1c
    1f2a:	eb 8f       	std	Y+27, r30	; 0x1b
    1f2c:	f3 e0       	ldi	r31, 0x03	; 3
    1f2e:	fd 8f       	std	Y+29, r31	; 0x1d
    1f30:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1f32:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1f34:	00 80       	ld	r0, Z
    1f36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	9c 8f       	std	Y+28, r25	; 0x1c
    1f3e:	8b 8f       	std	Y+27, r24	; 0x1b
    1f40:	e9 8d       	ldd	r30, Y+25	; 0x19
    1f42:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1f44:	00 82       	st	Z, r0
    1f46:	89 8d       	ldd	r24, Y+25	; 0x19
    1f48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4e:	89 8f       	std	Y+25, r24	; 0x19
    1f50:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f52:	91 50       	subi	r25, 0x01	; 1
    1f54:	9d 8f       	std	Y+29, r25	; 0x1d
    1f56:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1f58:	ee 23       	and	r30, r30
    1f5a:	51 f7       	brne	.-44     	; 0x1f30 <main+0x70>
		UART_ConfigType uartconfig = { 9600, ASYNCH, EIGHTBIT, RECEIVEPOLLING,
				TRANSMITPOLLING, ONEBIT, NOPARITY };
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	0a 96       	adiw	r24, 0x0a	; 10
    1f60:	9f 8f       	std	Y+31, r25	; 0x1f
    1f62:	8e 8f       	std	Y+30, r24	; 0x1e
    1f64:	ea e6       	ldi	r30, 0x6A	; 106
    1f66:	f1 e0       	ldi	r31, 0x01	; 1
    1f68:	f9 a3       	std	Y+33, r31	; 0x21
    1f6a:	e8 a3       	std	Y+32, r30	; 0x20
    1f6c:	fa e0       	ldi	r31, 0x0A	; 10
    1f6e:	fa a3       	std	Y+34, r31	; 0x22
    1f70:	e8 a1       	ldd	r30, Y+32	; 0x20
    1f72:	f9 a1       	ldd	r31, Y+33	; 0x21
    1f74:	00 80       	ld	r0, Z
    1f76:	88 a1       	ldd	r24, Y+32	; 0x20
    1f78:	99 a1       	ldd	r25, Y+33	; 0x21
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	99 a3       	std	Y+33, r25	; 0x21
    1f7e:	88 a3       	std	Y+32, r24	; 0x20
    1f80:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1f82:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1f84:	00 82       	st	Z, r0
    1f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	91 50       	subi	r25, 0x01	; 1
    1f94:	9a a3       	std	Y+34, r25	; 0x22
    1f96:	ea a1       	ldd	r30, Y+34	; 0x22
    1f98:	ee 23       	and	r30, r30
    1f9a:	51 f7       	brne	.-44     	; 0x1f70 <main+0xb0>
		UART_init(&uartconfig);
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	0a 96       	adiw	r24, 0x0a	; 10
    1fa0:	0e 94 a4 12 	call	0x2548	; 0x2548 <UART_init>
		TWI_init(&twiconfig);
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	07 96       	adiw	r24, 0x07	; 7
    1fa8:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <TWI_init>
	}
	APP_setPassword();
    1fac:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <APP_setPassword>
	BUZZER_init();
    1fb0:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <BUZZER_init>
	DCMOTOR_init();
    1fb4:	0e 94 24 0b 	call	0x1648	; 0x1648 <DCMOTOR_init>
	while (1) {
		APP_systemControl();
    1fb8:	0e 94 8d 08 	call	0x111a	; 0x111a <APP_systemControl>
    1fbc:	fd cf       	rjmp	.-6      	; 0x1fb8 <main+0xf8>

00001fbe <PWM_Timer0_Start>:
 *******************************************************************************/
#include "common_macros.h"
#include "pwm.h"
#include<avr/io.h>
PWM_ClockConfig ClockSelect = PWM_FCPU_256;
void PWM_Timer0_Start(uint8 duty_cycle) {
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	/*Initializing the PWM Signal*/
	CLEAR_BIT(TCCR0, FOC0);
    1fce:	a3 e5       	ldi	r26, 0x53	; 83
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e3 e5       	ldi	r30, 0x53	; 83
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8f 77       	andi	r24, 0x7F	; 127
    1fda:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM00);
    1fdc:	a3 e5       	ldi	r26, 0x53	; 83
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e3 e5       	ldi	r30, 0x53	; 83
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 64       	ori	r24, 0x40	; 64
    1fe8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1fea:	a3 e5       	ldi	r26, 0x53	; 83
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e3 e5       	ldi	r30, 0x53	; 83
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	88 60       	ori	r24, 0x08	; 8
    1ff6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    1ff8:	a3 e5       	ldi	r26, 0x53	; 83
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e3 e5       	ldi	r30, 0x53	; 83
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	80 62       	ori	r24, 0x20	; 32
    2004:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, COM00);
    2006:	a3 e5       	ldi	r26, 0x53	; 83
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e3 e5       	ldi	r30, 0x53	; 83
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	8f 7e       	andi	r24, 0xEF	; 239
    2012:	8c 93       	st	X, r24
	/*Selecting Clock Source*/
	TCCR0 = ((TCCR0 & 0xF8) | ClockSelect);
    2014:	a3 e5       	ldi	r26, 0x53	; 83
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e3 e5       	ldi	r30, 0x53	; 83
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	98 2f       	mov	r25, r24
    2020:	98 7f       	andi	r25, 0xF8	; 248
    2022:	80 91 68 01 	lds	r24, 0x0168
    2026:	89 2b       	or	r24, r25
    2028:	8c 93       	st	X, r24
	OCR0 =(uint8)((duty_cycle*TIMER_TOP_COUNT/100.0));;
    202a:	0c e5       	ldi	r16, 0x5C	; 92
    202c:	10 e0       	ldi	r17, 0x00	; 0
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	48 2f       	mov	r20, r24
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	ca 01       	movw	r24, r20
    2036:	9c 01       	movw	r18, r24
    2038:	22 0f       	add	r18, r18
    203a:	33 1f       	adc	r19, r19
    203c:	c9 01       	movw	r24, r18
    203e:	96 95       	lsr	r25
    2040:	98 2f       	mov	r25, r24
    2042:	88 27       	eor	r24, r24
    2044:	97 95       	ror	r25
    2046:	87 95       	ror	r24
    2048:	82 1b       	sub	r24, r18
    204a:	93 0b       	sbc	r25, r19
    204c:	84 0f       	add	r24, r20
    204e:	95 1f       	adc	r25, r21
    2050:	aa 27       	eor	r26, r26
    2052:	97 fd       	sbrc	r25, 7
    2054:	a0 95       	com	r26
    2056:	ba 2f       	mov	r27, r26
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	48 ec       	ldi	r20, 0xC8	; 200
    206e:	52 e4       	ldi	r21, 0x42	; 66
    2070:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	f8 01       	movw	r30, r16
    2086:	80 83       	st	Z, r24
	return;

}
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	08 95       	ret

00002094 <__vector_9>:
#include<avr/interrupt.h>
static volatile void (*g_callbackptr)(void) = NULL_PTR;
static volatile uint8 num_of_seconds = 0;
static volatile uint8 tick = 0;
static volatile uint8 executionflag = 1;
ISR(TIMER1_OVF_vect) {
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	6f 93       	push	r22
    20a8:	7f 93       	push	r23
    20aa:	8f 93       	push	r24
    20ac:	9f 93       	push	r25
    20ae:	af 93       	push	r26
    20b0:	bf 93       	push	r27
    20b2:	ef 93       	push	r30
    20b4:	ff 93       	push	r31
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
	tick++;
    20be:	80 91 83 01 	lds	r24, 0x0183
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	80 93 83 01 	sts	0x0183, r24
	if (tick == num_of_seconds) {
    20c8:	90 91 83 01 	lds	r25, 0x0183
    20cc:	80 91 82 01 	lds	r24, 0x0182
    20d0:	98 17       	cp	r25, r24
    20d2:	99 f4       	brne	.+38     	; 0x20fa <__vector_9+0x66>
		if (g_callbackptr != NULL_PTR) {
    20d4:	80 91 80 01 	lds	r24, 0x0180
    20d8:	90 91 81 01 	lds	r25, 0x0181
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f0       	breq	.+26     	; 0x20fa <__vector_9+0x66>
			tick = 0;
    20e0:	10 92 83 01 	sts	0x0183, r1
			if (executionflag == 1) {
    20e4:	80 91 69 01 	lds	r24, 0x0169
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	39 f4       	brne	.+14     	; 0x20fa <__vector_9+0x66>
				executionflag = 0;
    20ec:	10 92 69 01 	sts	0x0169, r1
				g_callbackptr();
    20f0:	e0 91 80 01 	lds	r30, 0x0180
    20f4:	f0 91 81 01 	lds	r31, 0x0181
    20f8:	09 95       	icall
			}
		}
	}
}
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f 90       	pop	r0
    211c:	1f 90       	pop	r1
    211e:	18 95       	reti

00002120 <__vector_7>:
ISR(TIMER1_COMPA_vect) {
    2120:	1f 92       	push	r1
    2122:	0f 92       	push	r0
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	0f 92       	push	r0
    2128:	11 24       	eor	r1, r1
    212a:	2f 93       	push	r18
    212c:	3f 93       	push	r19
    212e:	4f 93       	push	r20
    2130:	5f 93       	push	r21
    2132:	6f 93       	push	r22
    2134:	7f 93       	push	r23
    2136:	8f 93       	push	r24
    2138:	9f 93       	push	r25
    213a:	af 93       	push	r26
    213c:	bf 93       	push	r27
    213e:	ef 93       	push	r30
    2140:	ff 93       	push	r31
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
	tick++;
    214a:	80 91 83 01 	lds	r24, 0x0183
    214e:	8f 5f       	subi	r24, 0xFF	; 255
    2150:	80 93 83 01 	sts	0x0183, r24
	if (tick == num_of_seconds) {
    2154:	90 91 83 01 	lds	r25, 0x0183
    2158:	80 91 82 01 	lds	r24, 0x0182
    215c:	98 17       	cp	r25, r24
    215e:	99 f4       	brne	.+38     	; 0x2186 <__vector_7+0x66>
		if (g_callbackptr != NULL_PTR) {
    2160:	80 91 80 01 	lds	r24, 0x0180
    2164:	90 91 81 01 	lds	r25, 0x0181
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	69 f0       	breq	.+26     	; 0x2186 <__vector_7+0x66>
			tick = 0;
    216c:	10 92 83 01 	sts	0x0183, r1
			if (executionflag == 1) {
    2170:	80 91 69 01 	lds	r24, 0x0169
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	39 f4       	brne	.+14     	; 0x2186 <__vector_7+0x66>
				executionflag = 0;
    2178:	10 92 69 01 	sts	0x0169, r1
				g_callbackptr();
    217c:	e0 91 80 01 	lds	r30, 0x0180
    2180:	f0 91 81 01 	lds	r31, 0x0181
    2184:	09 95       	icall
			}
		}
	}
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	ff 91       	pop	r31
    218c:	ef 91       	pop	r30
    218e:	bf 91       	pop	r27
    2190:	af 91       	pop	r26
    2192:	9f 91       	pop	r25
    2194:	8f 91       	pop	r24
    2196:	7f 91       	pop	r23
    2198:	6f 91       	pop	r22
    219a:	5f 91       	pop	r21
    219c:	4f 91       	pop	r20
    219e:	3f 91       	pop	r19
    21a0:	2f 91       	pop	r18
    21a2:	0f 90       	pop	r0
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	0f 90       	pop	r0
    21a8:	1f 90       	pop	r1
    21aa:	18 95       	reti

000021ac <Timer1_countSeconds>:
void Timer1_countSeconds(uint8 seconds) {
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	0f 92       	push	r0
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	89 83       	std	Y+1, r24	; 0x01
	executionflag = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	80 93 69 01 	sts	0x0169, r24
	tick = 0;
    21be:	10 92 83 01 	sts	0x0183, r1
	TCNT1 = 0;
    21c2:	ec e4       	ldi	r30, 0x4C	; 76
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	11 82       	std	Z+1, r1	; 0x01
    21c8:	10 82       	st	Z, r1
	num_of_seconds = seconds;
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	80 93 82 01 	sts	0x0182, r24

}
    21d0:	0f 90       	pop	r0
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType *config) {
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	00 d0       	rcall	.+0      	; 0x21de <Timer1_init+0x6>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
	/**TCCR1A Initialization**/
	CLEAR_BIT(TCCR1A, COM1A0);
    21e6:	af e4       	ldi	r26, 0x4F	; 79
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	ef e4       	ldi	r30, 0x4F	; 79
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	8f 7b       	andi	r24, 0xBF	; 191
    21f2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1A1);
    21f4:	af e4       	ldi	r26, 0x4F	; 79
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	ef e4       	ldi	r30, 0x4F	; 79
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	8f 77       	andi	r24, 0x7F	; 127
    2200:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B0);
    2202:	af e4       	ldi	r26, 0x4F	; 79
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	ef e4       	ldi	r30, 0x4F	; 79
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8f 7e       	andi	r24, 0xEF	; 239
    220e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B1);
    2210:	af e4       	ldi	r26, 0x4F	; 79
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ef e4       	ldi	r30, 0x4F	; 79
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	8f 7d       	andi	r24, 0xDF	; 223
    221c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1A);
    221e:	af e4       	ldi	r26, 0x4F	; 79
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	ef e4       	ldi	r30, 0x4F	; 79
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	88 60       	ori	r24, 0x08	; 8
    222a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    222c:	af e4       	ldi	r26, 0x4F	; 79
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	ef e4       	ldi	r30, 0x4F	; 79
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	84 60       	ori	r24, 0x04	; 4
    2238:	8c 93       	st	X, r24
	/**TCCR1B Initialization**/
	if (config->Timer1_Mode == TIMER1_NORMAL) {
    223a:	e9 81       	ldd	r30, Y+1	; 0x01
    223c:	fa 81       	ldd	r31, Y+2	; 0x02
    223e:	85 81       	ldd	r24, Z+5	; 0x05
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	e9 f4       	brne	.+58     	; 0x227e <Timer1_init+0xa6>
		CLEAR_BIT(TCCR1A, WGM10);
    2244:	af e4       	ldi	r26, 0x4F	; 79
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	ef e4       	ldi	r30, 0x4F	; 79
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	8e 7f       	andi	r24, 0xFE	; 254
    2250:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    2252:	af e4       	ldi	r26, 0x4F	; 79
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	ef e4       	ldi	r30, 0x4F	; 79
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8d 7f       	andi	r24, 0xFD	; 253
    225e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    2260:	ae e4       	ldi	r26, 0x4E	; 78
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	ee e4       	ldi	r30, 0x4E	; 78
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	87 7f       	andi	r24, 0xF7	; 247
    226c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    226e:	ae e4       	ldi	r26, 0x4E	; 78
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	ee e4       	ldi	r30, 0x4E	; 78
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8f 7e       	andi	r24, 0xEF	; 239
    227a:	8c 93       	st	X, r24
    227c:	21 c0       	rjmp	.+66     	; 0x22c0 <Timer1_init+0xe8>
	} else if (config->Timer1_Mode == TIMER1_COMPARE) {
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	85 81       	ldd	r24, Z+5	; 0x05
    2284:	88 23       	and	r24, r24
    2286:	e1 f4       	brne	.+56     	; 0x22c0 <Timer1_init+0xe8>
		CLEAR_BIT(TCCR1A, WGM10);
    2288:	af e4       	ldi	r26, 0x4F	; 79
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ef e4       	ldi	r30, 0x4F	; 79
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8e 7f       	andi	r24, 0xFE	; 254
    2294:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    2296:	af e4       	ldi	r26, 0x4F	; 79
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ef e4       	ldi	r30, 0x4F	; 79
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8d 7f       	andi	r24, 0xFD	; 253
    22a2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    22a4:	ae e4       	ldi	r26, 0x4E	; 78
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ee e4       	ldi	r30, 0x4E	; 78
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	88 60       	ori	r24, 0x08	; 8
    22b0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    22b2:	ae e4       	ldi	r26, 0x4E	; 78
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ee e4       	ldi	r30, 0x4E	; 78
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8f 7e       	andi	r24, 0xEF	; 239
    22be:	8c 93       	st	X, r24
	}
	/**Clock Selection**/
	TCCR1B = (TCCR1B & 0xf8) | (config->Timer1_Prescaler & 0x07);
    22c0:	ae e4       	ldi	r26, 0x4E	; 78
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ee e4       	ldi	r30, 0x4E	; 78
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	98 2f       	mov	r25, r24
    22cc:	98 7f       	andi	r25, 0xF8	; 248
    22ce:	e9 81       	ldd	r30, Y+1	; 0x01
    22d0:	fa 81       	ldd	r31, Y+2	; 0x02
    22d2:	84 81       	ldd	r24, Z+4	; 0x04
    22d4:	87 70       	andi	r24, 0x07	; 7
    22d6:	89 2b       	or	r24, r25
    22d8:	8c 93       	st	X, r24
	/**Putting the initial Count and the Compare Value**/
	TCNT1 = config->initial_value;
    22da:	ac e4       	ldi	r26, 0x4C	; 76
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e9 81       	ldd	r30, Y+1	; 0x01
    22e0:	fa 81       	ldd	r31, Y+2	; 0x02
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	11 96       	adiw	r26, 0x01	; 1
    22e8:	9c 93       	st	X, r25
    22ea:	8e 93       	st	-X, r24
	OCR1A = config->compare_value;
    22ec:	aa e4       	ldi	r26, 0x4A	; 74
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e9 81       	ldd	r30, Y+1	; 0x01
    22f2:	fa 81       	ldd	r31, Y+2	; 0x02
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	11 96       	adiw	r26, 0x01	; 1
    22fa:	9c 93       	st	X, r25
    22fc:	8e 93       	st	-X, r24
	/**Selecting The Interrupt Mode**/
	SET_BIT(SREG, 7);
    22fe:	af e5       	ldi	r26, 0x5F	; 95
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	ef e5       	ldi	r30, 0x5F	; 95
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	80 68       	ori	r24, 0x80	; 128
    230a:	8c 93       	st	X, r24
	if (config->Timer1_Mode == TIMER1_NORMAL) {
    230c:	e9 81       	ldd	r30, Y+1	; 0x01
    230e:	fa 81       	ldd	r31, Y+2	; 0x02
    2310:	85 81       	ldd	r24, Z+5	; 0x05
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	79 f4       	brne	.+30     	; 0x2334 <Timer1_init+0x15c>
		CLEAR_BIT(TIMSK, OCIE1A);
    2316:	a9 e5       	ldi	r26, 0x59	; 89
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e9 e5       	ldi	r30, 0x59	; 89
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8f 7e       	andi	r24, 0xEF	; 239
    2322:	8c 93       	st	X, r24
		SET_BIT(TIMSK, TOIE1);
    2324:	a9 e5       	ldi	r26, 0x59	; 89
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e9 e5       	ldi	r30, 0x59	; 89
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	84 60       	ori	r24, 0x04	; 4
    2330:	8c 93       	st	X, r24
    2332:	13 c0       	rjmp	.+38     	; 0x235a <Timer1_init+0x182>
	} else if (config->Timer1_Mode == TIMER1_COMPARE) {
    2334:	e9 81       	ldd	r30, Y+1	; 0x01
    2336:	fa 81       	ldd	r31, Y+2	; 0x02
    2338:	85 81       	ldd	r24, Z+5	; 0x05
    233a:	88 23       	and	r24, r24
    233c:	71 f4       	brne	.+28     	; 0x235a <Timer1_init+0x182>
		CLEAR_BIT(TIMSK, TOIE1);
    233e:	a9 e5       	ldi	r26, 0x59	; 89
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e9 e5       	ldi	r30, 0x59	; 89
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	8b 7f       	andi	r24, 0xFB	; 251
    234a:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1A);
    234c:	a9 e5       	ldi	r26, 0x59	; 89
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e9 e5       	ldi	r30, 0x59	; 89
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	80 61       	ori	r24, 0x10	; 16
    2358:	8c 93       	st	X, r24
	}

}
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <Timer1_deinit>:
void Timer1_deinit(void) {
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
	/**Clearing all the Timer registers**/
	TCCR1A = 0;
    236c:	ef e4       	ldi	r30, 0x4F	; 79
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	10 82       	st	Z, r1
	TCCR1B = 0;
    2372:	ee e4       	ldi	r30, 0x4E	; 78
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	10 82       	st	Z, r1
	TIMSK = 0;
    2378:	e9 e5       	ldi	r30, 0x59	; 89
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	10 82       	st	Z, r1
	TCNT1 = 0;
    237e:	ec e4       	ldi	r30, 0x4C	; 76
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	11 82       	std	Z+1, r1	; 0x01
    2384:	10 82       	st	Z, r1
	OCR1A = 0;
    2386:	ea e4       	ldi	r30, 0x4A	; 74
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	11 82       	std	Z+1, r1	; 0x01
    238c:	10 82       	st	Z, r1
}
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <Timer1_setCallBack>:
void Timer1_setCallBack(void (*callbackptr)(void)) {
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <Timer1_setCallBack+0x6>
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
	/**Setting the Callback PTR to the function that is called by the ISR**/
	g_callbackptr = callbackptr;
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	90 93 81 01 	sts	0x0181, r25
    23aa:	80 93 80 01 	sts	0x0180, r24
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <TWI_init>:
#include "twi.h"

#include<avr/io.h>
#include"common_macros.h"

void TWI_init(const TWI_ConfigType *config) {
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <TWI_init+0x6>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	89 83       	std	Y+1, r24	; 0x01
	/**Selecting the TWI Bitrate**/
	TWBR = config->TWI_Bitrate;
    23c6:	a0 e2       	ldi	r26, 0x20	; 32
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e9 81       	ldd	r30, Y+1	; 0x01
    23cc:	fa 81       	ldd	r31, Y+2	; 0x02
    23ce:	81 81       	ldd	r24, Z+1	; 0x01
    23d0:	8c 93       	st	X, r24
	/**Selecting the TWI Prescaler**/
	TWSR = (TWSR & 0xFC) | (config->TWI_Prescaler & 0x03);
    23d2:	a1 e2       	ldi	r26, 0x21	; 33
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e1 e2       	ldi	r30, 0x21	; 33
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	98 2f       	mov	r25, r24
    23de:	9c 7f       	andi	r25, 0xFC	; 252
    23e0:	e9 81       	ldd	r30, Y+1	; 0x01
    23e2:	fa 81       	ldd	r31, Y+2	; 0x02
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	83 70       	andi	r24, 0x03	; 3
    23e8:	89 2b       	or	r24, r25
    23ea:	8c 93       	st	X, r24
	/**Selecting TWI unit Slave Address**/
	TWAR = (config->TWI_Address << 1);
    23ec:	a2 e2       	ldi	r26, 0x22	; 34
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e9 81       	ldd	r30, Y+1	; 0x01
    23f2:	fa 81       	ldd	r31, Y+2	; 0x02
    23f4:	80 81       	ld	r24, Z
    23f6:	88 0f       	add	r24, r24
    23f8:	8c 93       	st	X, r24
	/**Enabling TWI**/
	SET_BIT(TWCR, TWEN);
    23fa:	a6 e5       	ldi	r26, 0x56	; 86
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e6 e5       	ldi	r30, 0x56	; 86
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	84 60       	ori	r24, 0x04	; 4
    2406:	8c 93       	st	X, r24
}
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <TWI_start>:
void TWI_start(void) {
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    241a:	e6 e5       	ldi	r30, 0x56	; 86
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	84 ea       	ldi	r24, 0xA4	; 164
    2420:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT)) {
    2422:	e6 e5       	ldi	r30, 0x56	; 86
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	88 23       	and	r24, r24
    242a:	dc f7       	brge	.-10     	; 0x2422 <TWI_start+0x10>
	}

}
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <TWI_stop>:
void TWI_stop(void) {
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    243a:	e6 e5       	ldi	r30, 0x56	; 86
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	84 e9       	ldi	r24, 0x94	; 148
    2440:	80 83       	st	Z, r24
}
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <TWI_writeByte>:
void TWI_writeByte(uint8 data) {
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	0f 92       	push	r0
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    2454:	e3 e2       	ldi	r30, 0x23	; 35
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    245c:	e6 e5       	ldi	r30, 0x56	; 86
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	84 e8       	ldi	r24, 0x84	; 132
    2462:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT)) {
    2464:	e6 e5       	ldi	r30, 0x56	; 86
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	88 23       	and	r24, r24
    246c:	dc f7       	brge	.-10     	; 0x2464 <TWI_writeByte+0x1c>
	}
}
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(void) {
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    247e:	e6 e5       	ldi	r30, 0x56	; 86
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	84 ec       	ldi	r24, 0xC4	; 196
    2484:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT)) {
    2486:	e6 e5       	ldi	r30, 0x56	; 86
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	88 23       	and	r24, r24
    248e:	dc f7       	brge	.-10     	; 0x2486 <TWI_readByteWithACK+0x10>
	}
	return TWDR;
    2490:	e3 e2       	ldi	r30, 0x23	; 35
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
}
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(void) {
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    24a4:	e6 e5       	ldi	r30, 0x56	; 86
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	84 e8       	ldi	r24, 0x84	; 132
    24aa:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT)) {
    24ac:	e6 e5       	ldi	r30, 0x56	; 86
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	88 23       	and	r24, r24
    24b4:	dc f7       	brge	.-10     	; 0x24ac <TWI_readByteWithNACK+0x10>
	}
	return TWDR;
    24b6:	e3 e2       	ldi	r30, 0x23	; 35
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
}
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <TWI_getStatus>:

uint8 TWI_getStatus(void) {
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
	return (TWSR&0xF8) ;
    24ca:	e1 e2       	ldi	r30, 0x21	; 33
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	88 7f       	andi	r24, 0xF8	; 248
}
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <__vector_13>:
volatile uint8 g_uartdata = 0;
void (*g_callbackptr)(void) = NULL_PTR;
/*******************************************************************************
 * 							Interrupt Service Routine						   *
 *******************************************************************************/
ISR(USART_RXC_vect) {
    24d8:	1f 92       	push	r1
    24da:	0f 92       	push	r0
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	0f 92       	push	r0
    24e0:	11 24       	eor	r1, r1
    24e2:	2f 93       	push	r18
    24e4:	3f 93       	push	r19
    24e6:	4f 93       	push	r20
    24e8:	5f 93       	push	r21
    24ea:	6f 93       	push	r22
    24ec:	7f 93       	push	r23
    24ee:	8f 93       	push	r24
    24f0:	9f 93       	push	r25
    24f2:	af 93       	push	r26
    24f4:	bf 93       	push	r27
    24f6:	ef 93       	push	r30
    24f8:	ff 93       	push	r31
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
	g_uartdata = UDR;
    2502:	ec e2       	ldi	r30, 0x2C	; 44
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	80 93 84 01 	sts	0x0184, r24
	if (g_callbackptr != NULL_PTR) {
    250c:	80 91 85 01 	lds	r24, 0x0185
    2510:	90 91 86 01 	lds	r25, 0x0186
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	29 f0       	breq	.+10     	; 0x2522 <__vector_13+0x4a>
		g_callbackptr();
    2518:	e0 91 85 01 	lds	r30, 0x0185
    251c:	f0 91 86 01 	lds	r31, 0x0186
    2520:	09 95       	icall
	}
}
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	bf 91       	pop	r27
    252c:	af 91       	pop	r26
    252e:	9f 91       	pop	r25
    2530:	8f 91       	pop	r24
    2532:	7f 91       	pop	r23
    2534:	6f 91       	pop	r22
    2536:	5f 91       	pop	r21
    2538:	4f 91       	pop	r20
    253a:	3f 91       	pop	r19
    253c:	2f 91       	pop	r18
    253e:	0f 90       	pop	r0
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	0f 90       	pop	r0
    2544:	1f 90       	pop	r1
    2546:	18 95       	reti

00002548 <UART_init>:
void UART_init(UART_ConfigType *config) {
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	29 97       	sbiw	r28, 0x09	; 9
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
	/**Store the Configuration to be used by other functions**/
	g_uartconfig = *config;
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	27 e8       	ldi	r18, 0x87	; 135
    2566:	31 e0       	ldi	r19, 0x01	; 1
    2568:	3e 83       	std	Y+6, r19	; 0x06
    256a:	2d 83       	std	Y+5, r18	; 0x05
    256c:	98 87       	std	Y+8, r25	; 0x08
    256e:	8f 83       	std	Y+7, r24	; 0x07
    2570:	3a e0       	ldi	r19, 0x0A	; 10
    2572:	39 87       	std	Y+9, r19	; 0x09
    2574:	ef 81       	ldd	r30, Y+7	; 0x07
    2576:	f8 85       	ldd	r31, Y+8	; 0x08
    2578:	00 80       	ld	r0, Z
    257a:	2f 81       	ldd	r18, Y+7	; 0x07
    257c:	38 85       	ldd	r19, Y+8	; 0x08
    257e:	2f 5f       	subi	r18, 0xFF	; 255
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	38 87       	std	Y+8, r19	; 0x08
    2584:	2f 83       	std	Y+7, r18	; 0x07
    2586:	ed 81       	ldd	r30, Y+5	; 0x05
    2588:	fe 81       	ldd	r31, Y+6	; 0x06
    258a:	00 82       	st	Z, r0
    258c:	2d 81       	ldd	r18, Y+5	; 0x05
    258e:	3e 81       	ldd	r19, Y+6	; 0x06
    2590:	2f 5f       	subi	r18, 0xFF	; 255
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	3e 83       	std	Y+6, r19	; 0x06
    2596:	2d 83       	std	Y+5, r18	; 0x05
    2598:	39 85       	ldd	r19, Y+9	; 0x09
    259a:	31 50       	subi	r19, 0x01	; 1
    259c:	39 87       	std	Y+9, r19	; 0x09
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	88 23       	and	r24, r24
    25a2:	41 f7       	brne	.-48     	; 0x2574 <UART_init+0x2c>
	/**Enabling Double speed mode**/
	SET_BIT(UCSRA, U2X);
    25a4:	ab e2       	ldi	r26, 0x2B	; 43
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	eb e2       	ldi	r30, 0x2B	; 43
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	82 60       	ori	r24, 0x02	; 2
    25b0:	8c 93       	st	X, r24
	/**Enabling Receiving and Transmitting**/
	if (config->UART_ReceiveTechnique != NORECEIVE) {
    25b2:	eb 81       	ldd	r30, Y+3	; 0x03
    25b4:	fc 81       	ldd	r31, Y+4	; 0x04
    25b6:	86 81       	ldd	r24, Z+6	; 0x06
    25b8:	88 23       	and	r24, r24
    25ba:	41 f0       	breq	.+16     	; 0x25cc <UART_init+0x84>
		SET_BIT(UCSRB, RXEN);
    25bc:	aa e2       	ldi	r26, 0x2A	; 42
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	ea e2       	ldi	r30, 0x2A	; 42
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 61       	ori	r24, 0x10	; 16
    25c8:	8c 93       	st	X, r24
    25ca:	07 c0       	rjmp	.+14     	; 0x25da <UART_init+0x92>
	} else {
		CLEAR_BIT(UCSRB, RXEN);
    25cc:	aa e2       	ldi	r26, 0x2A	; 42
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	ea e2       	ldi	r30, 0x2A	; 42
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	8f 7e       	andi	r24, 0xEF	; 239
    25d8:	8c 93       	st	X, r24
	}
	if (config->UART_TransmitTechnique != NOTRANSMIT) {
    25da:	eb 81       	ldd	r30, Y+3	; 0x03
    25dc:	fc 81       	ldd	r31, Y+4	; 0x04
    25de:	87 81       	ldd	r24, Z+7	; 0x07
    25e0:	88 23       	and	r24, r24
    25e2:	41 f0       	breq	.+16     	; 0x25f4 <UART_init+0xac>
		SET_BIT(UCSRB, TXEN);
    25e4:	aa e2       	ldi	r26, 0x2A	; 42
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	ea e2       	ldi	r30, 0x2A	; 42
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	88 60       	ori	r24, 0x08	; 8
    25f0:	8c 93       	st	X, r24
    25f2:	07 c0       	rjmp	.+14     	; 0x2602 <UART_init+0xba>
	} else {
		CLEAR_BIT(UCSRB, TXEN);
    25f4:	aa e2       	ldi	r26, 0x2A	; 42
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	ea e2       	ldi	r30, 0x2A	; 42
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	87 7f       	andi	r24, 0xF7	; 247
    2600:	8c 93       	st	X, r24
	}
	/**UCSRC init**/
	SET_BIT(UCSRC, URSEL);
    2602:	a0 e4       	ldi	r26, 0x40	; 64
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e0 e4       	ldi	r30, 0x40	; 64
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	80 68       	ori	r24, 0x80	; 128
    260e:	8c 93       	st	X, r24
	/**Selecting Asynchronous or Synchronous mode**/
	if (config->UART_Mode == ASYNCH) {
    2610:	eb 81       	ldd	r30, Y+3	; 0x03
    2612:	fc 81       	ldd	r31, Y+4	; 0x04
    2614:	84 81       	ldd	r24, Z+4	; 0x04
    2616:	88 23       	and	r24, r24
    2618:	41 f4       	brne	.+16     	; 0x262a <UART_init+0xe2>
		CLEAR_BIT(UCSRC, UMSEL);
    261a:	a0 e4       	ldi	r26, 0x40	; 64
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e0 e4       	ldi	r30, 0x40	; 64
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8f 7b       	andi	r24, 0xBF	; 191
    2626:	8c 93       	st	X, r24
    2628:	07 c0       	rjmp	.+14     	; 0x2638 <UART_init+0xf0>
	} else {
		SET_BIT(UCSRC, UMSEL);
    262a:	a0 e4       	ldi	r26, 0x40	; 64
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e0 e4       	ldi	r30, 0x40	; 64
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 64       	ori	r24, 0x40	; 64
    2636:	8c 93       	st	X, r24
	}
	/**Choosing Parity Error check mode**/
	UCSRC = (UCSRC & 0xCF) | ((config->UART_ParityMode & 0x03) << UPM0);
    2638:	a0 e4       	ldi	r26, 0x40	; 64
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e0 e4       	ldi	r30, 0x40	; 64
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	28 2f       	mov	r18, r24
    2644:	2f 7c       	andi	r18, 0xCF	; 207
    2646:	eb 81       	ldd	r30, Y+3	; 0x03
    2648:	fc 81       	ldd	r31, Y+4	; 0x04
    264a:	81 85       	ldd	r24, Z+9	; 0x09
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	83 70       	andi	r24, 0x03	; 3
    2652:	90 70       	andi	r25, 0x00	; 0
    2654:	82 95       	swap	r24
    2656:	92 95       	swap	r25
    2658:	90 7f       	andi	r25, 0xF0	; 240
    265a:	98 27       	eor	r25, r24
    265c:	80 7f       	andi	r24, 0xF0	; 240
    265e:	98 27       	eor	r25, r24
    2660:	82 2b       	or	r24, r18
    2662:	8c 93       	st	X, r24
	/**Selecting stop bit*/
	if (config->UART_StopBitMode == ONEBIT) {
    2664:	eb 81       	ldd	r30, Y+3	; 0x03
    2666:	fc 81       	ldd	r31, Y+4	; 0x04
    2668:	80 85       	ldd	r24, Z+8	; 0x08
    266a:	88 23       	and	r24, r24
    266c:	41 f4       	brne	.+16     	; 0x267e <UART_init+0x136>
		CLEAR_BIT(UCSRC, USBS);
    266e:	a0 e4       	ldi	r26, 0x40	; 64
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e0 e4       	ldi	r30, 0x40	; 64
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	87 7f       	andi	r24, 0xF7	; 247
    267a:	8c 93       	st	X, r24
    267c:	0c c0       	rjmp	.+24     	; 0x2696 <UART_init+0x14e>
	} else if (config->UART_StopBitMode == TWOBIT) {
    267e:	eb 81       	ldd	r30, Y+3	; 0x03
    2680:	fc 81       	ldd	r31, Y+4	; 0x04
    2682:	80 85       	ldd	r24, Z+8	; 0x08
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	39 f4       	brne	.+14     	; 0x2696 <UART_init+0x14e>
		SET_BIT(UCSRC, USBS);
    2688:	a0 e4       	ldi	r26, 0x40	; 64
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e0 e4       	ldi	r30, 0x40	; 64
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	88 60       	ori	r24, 0x08	; 8
    2694:	8c 93       	st	X, r24
	}
	/**Selecting Character Size**/
	UCSRC = (UCSRC & 0xF9) | ((config->UART_CharacterSize & 0x03) << UCSZ0);
    2696:	a0 e4       	ldi	r26, 0x40	; 64
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e0 e4       	ldi	r30, 0x40	; 64
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	28 2f       	mov	r18, r24
    26a2:	29 7f       	andi	r18, 0xF9	; 249
    26a4:	eb 81       	ldd	r30, Y+3	; 0x03
    26a6:	fc 81       	ldd	r31, Y+4	; 0x04
    26a8:	85 81       	ldd	r24, Z+5	; 0x05
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	83 70       	andi	r24, 0x03	; 3
    26b0:	90 70       	andi	r25, 0x00	; 0
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	82 2b       	or	r24, r18
    26b8:	8c 93       	st	X, r24
	/**Selecting the BAUD Rate**/
	uint16 UBRR_value = ((uint32) F_CPU / (8 * config->UART_BaudRate) - 1);
    26ba:	eb 81       	ldd	r30, Y+3	; 0x03
    26bc:	fc 81       	ldd	r31, Y+4	; 0x04
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	a2 81       	ldd	r26, Z+2	; 0x02
    26c4:	b3 81       	ldd	r27, Z+3	; 0x03
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	aa 1f       	adc	r26, r26
    26cc:	bb 1f       	adc	r27, r27
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	aa 1f       	adc	r26, r26
    26d4:	bb 1f       	adc	r27, r27
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	aa 1f       	adc	r26, r26
    26dc:	bb 1f       	adc	r27, r27
    26de:	9c 01       	movw	r18, r24
    26e0:	ad 01       	movw	r20, r26
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	92 e1       	ldi	r25, 0x12	; 18
    26e6:	aa e7       	ldi	r26, 0x7A	; 122
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 4c 14 	call	0x2898	; 0x2898 <__udivmodsi4>
    26f2:	da 01       	movw	r26, r20
    26f4:	c9 01       	movw	r24, r18
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = UBRR_value;
    26fc:	e9 e2       	ldi	r30, 0x29	; 41
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	80 83       	st	Z, r24
	UBRRH = UBRR_value >> 8;
    2704:	e0 e4       	ldi	r30, 0x40	; 64
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	89 2f       	mov	r24, r25
    270e:	99 27       	eor	r25, r25
    2710:	80 83       	st	Z, r24
	/**Selecting to either enable or disable Interrupts**/
	if (config->UART_ReceiveTechnique == RECEIVEINTERRUPT) {
    2712:	eb 81       	ldd	r30, Y+3	; 0x03
    2714:	fc 81       	ldd	r31, Y+4	; 0x04
    2716:	86 81       	ldd	r24, Z+6	; 0x06
    2718:	82 30       	cpi	r24, 0x02	; 2
    271a:	71 f4       	brne	.+28     	; 0x2738 <UART_init+0x1f0>
		SET_BIT(SREG, 7);
    271c:	af e5       	ldi	r26, 0x5F	; 95
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	ef e5       	ldi	r30, 0x5F	; 95
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	80 68       	ori	r24, 0x80	; 128
    2728:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXCIE);
    272a:	aa e2       	ldi	r26, 0x2A	; 42
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	ea e2       	ldi	r30, 0x2A	; 42
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	80 68       	ori	r24, 0x80	; 128
    2736:	8c 93       	st	X, r24
	}

}
    2738:	29 96       	adiw	r28, 0x09	; 9
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <UART_setCallBack>:
void UART_setCallBack(void (*callbackptr)(void)) {
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	00 d0       	rcall	.+0      	; 0x2750 <UART_setCallBack+0x6>
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	89 83       	std	Y+1, r24	; 0x01
	/**Saving the Callback Function**/
	g_callbackptr = callbackptr;
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	90 93 86 01 	sts	0x0186, r25
    2760:	80 93 85 01 	sts	0x0185, r24
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <UART_sendByte>:
void UART_sendByte(uint8 data) {
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	0f 92       	push	r0
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	89 83       	std	Y+1, r24	; 0x01
	/**wait for the register to be empty and then send a byte to be sent**/
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    277a:	eb e2       	ldi	r30, 0x2B	; 43
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	80 72       	andi	r24, 0x20	; 32
    2786:	90 70       	andi	r25, 0x00	; 0
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	b9 f3       	breq	.-18     	; 0x277a <UART_sendByte+0xc>
		;
	UDR = data;
    278c:	ec e2       	ldi	r30, 0x2C	; 44
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	80 83       	st	Z, r24
	return;
}
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <UART_receiveByte>:
uint8 UART_receiveByte(void) {
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	0f 92       	push	r0
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
	/**if Receive Interrupts are disabled wait for the receive to be completed**/
	if (g_uartconfig.UART_ReceiveTechnique == RECEIVEPOLLING) {
    27a6:	80 91 8d 01 	lds	r24, 0x018D
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	51 f4       	brne	.+20     	; 0x27c2 <UART_receiveByte+0x26>
		while (BIT_IS_CLEAR(UCSRA, RXC))
    27ae:	eb e2       	ldi	r30, 0x2B	; 43
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	88 23       	and	r24, r24
    27b6:	dc f7       	brge	.-10     	; 0x27ae <UART_receiveByte+0x12>
			;
		return UDR;
    27b8:	ec e2       	ldi	r30, 0x2C	; 44
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <UART_receiveByte+0x28>
	}
	return 0;
    27c2:	19 82       	std	Y+1, r1	; 0x01
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <UART_sendString>:
void UART_sendString(char str[]) {
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <UART_sendString+0x6>
    27d4:	0f 92       	push	r0
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	9b 83       	std	Y+3, r25	; 0x03
    27dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    27de:	19 82       	std	Y+1, r1	; 0x01
    27e0:	0e c0       	rjmp	.+28     	; 0x27fe <UART_sendString+0x30>
	/**Send the string Character by Character until its completed**/
	while (str[count] != '\0') {
		UART_sendByte(str[count]);
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	9b 81       	ldd	r25, Y+3	; 0x03
    27ec:	fc 01       	movw	r30, r24
    27ee:	e2 0f       	add	r30, r18
    27f0:	f3 1f       	adc	r31, r19
    27f2:	80 81       	ld	r24, Z
    27f4:	0e 94 b7 13 	call	0x276e	; 0x276e <UART_sendByte>
		count++;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	89 83       	std	Y+1, r24	; 0x01
	return 0;
}
void UART_sendString(char str[]) {
	uint8 count = 0;
	/**Send the string Character by Character until its completed**/
	while (str[count] != '\0') {
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	88 23       	and	r24, r24
    2812:	39 f7       	brne	.-50     	; 0x27e2 <UART_sendString+0x14>
		UART_sendByte(str[count]);
		count++;
	}
	return;
}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <UART_receiveString>:
void UART_receiveString(char str[]) {
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <UART_receiveString+0xa>
    282a:	0f 92       	push	r0
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	9b 83       	std	Y+3, r25	; 0x03
    2832:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    2834:	19 82       	std	Y+1, r1	; 0x01
	/**receive the String character by character until you meet a hash**/
	do {
		str[count] = UART_receiveByte();
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	9b 81       	ldd	r25, Y+3	; 0x03
    2840:	8c 01       	movw	r16, r24
    2842:	02 0f       	add	r16, r18
    2844:	13 1f       	adc	r17, r19
    2846:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_receiveByte>
    284a:	f8 01       	movw	r30, r16
    284c:	80 83       	st	Z, r24
		count++;
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	8f 5f       	subi	r24, 0xFF	; 255
    2852:	89 83       	std	Y+1, r24	; 0x01
	} while (str[count - 1] != '#');
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9c 01       	movw	r18, r24
    285c:	21 50       	subi	r18, 0x01	; 1
    285e:	30 40       	sbci	r19, 0x00	; 0
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	fc 01       	movw	r30, r24
    2866:	e2 0f       	add	r30, r18
    2868:	f3 1f       	adc	r31, r19
    286a:	80 81       	ld	r24, Z
    286c:	83 32       	cpi	r24, 0x23	; 35
    286e:	19 f7       	brne	.-58     	; 0x2836 <UART_receiveString+0x16>
	str[count - 1] = '\0';
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	88 2f       	mov	r24, r24
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	9c 01       	movw	r18, r24
    2878:	21 50       	subi	r18, 0x01	; 1
    287a:	30 40       	sbci	r19, 0x00	; 0
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	9b 81       	ldd	r25, Y+3	; 0x03
    2880:	fc 01       	movw	r30, r24
    2882:	e2 0f       	add	r30, r18
    2884:	f3 1f       	adc	r31, r19
    2886:	10 82       	st	Z, r1
	return;
}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	1f 91       	pop	r17
    2894:	0f 91       	pop	r16
    2896:	08 95       	ret

00002898 <__udivmodsi4>:
    2898:	a1 e2       	ldi	r26, 0x21	; 33
    289a:	1a 2e       	mov	r1, r26
    289c:	aa 1b       	sub	r26, r26
    289e:	bb 1b       	sub	r27, r27
    28a0:	fd 01       	movw	r30, r26
    28a2:	0d c0       	rjmp	.+26     	; 0x28be <__udivmodsi4_ep>

000028a4 <__udivmodsi4_loop>:
    28a4:	aa 1f       	adc	r26, r26
    28a6:	bb 1f       	adc	r27, r27
    28a8:	ee 1f       	adc	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	a2 17       	cp	r26, r18
    28ae:	b3 07       	cpc	r27, r19
    28b0:	e4 07       	cpc	r30, r20
    28b2:	f5 07       	cpc	r31, r21
    28b4:	20 f0       	brcs	.+8      	; 0x28be <__udivmodsi4_ep>
    28b6:	a2 1b       	sub	r26, r18
    28b8:	b3 0b       	sbc	r27, r19
    28ba:	e4 0b       	sbc	r30, r20
    28bc:	f5 0b       	sbc	r31, r21

000028be <__udivmodsi4_ep>:
    28be:	66 1f       	adc	r22, r22
    28c0:	77 1f       	adc	r23, r23
    28c2:	88 1f       	adc	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	1a 94       	dec	r1
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <__udivmodsi4_loop>
    28ca:	60 95       	com	r22
    28cc:	70 95       	com	r23
    28ce:	80 95       	com	r24
    28d0:	90 95       	com	r25
    28d2:	9b 01       	movw	r18, r22
    28d4:	ac 01       	movw	r20, r24
    28d6:	bd 01       	movw	r22, r26
    28d8:	cf 01       	movw	r24, r30
    28da:	08 95       	ret

000028dc <__prologue_saves__>:
    28dc:	2f 92       	push	r2
    28de:	3f 92       	push	r3
    28e0:	4f 92       	push	r4
    28e2:	5f 92       	push	r5
    28e4:	6f 92       	push	r6
    28e6:	7f 92       	push	r7
    28e8:	8f 92       	push	r8
    28ea:	9f 92       	push	r9
    28ec:	af 92       	push	r10
    28ee:	bf 92       	push	r11
    28f0:	cf 92       	push	r12
    28f2:	df 92       	push	r13
    28f4:	ef 92       	push	r14
    28f6:	ff 92       	push	r15
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	ca 1b       	sub	r28, r26
    2906:	db 0b       	sbc	r29, r27
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	09 94       	ijmp

00002914 <__epilogue_restores__>:
    2914:	2a 88       	ldd	r2, Y+18	; 0x12
    2916:	39 88       	ldd	r3, Y+17	; 0x11
    2918:	48 88       	ldd	r4, Y+16	; 0x10
    291a:	5f 84       	ldd	r5, Y+15	; 0x0f
    291c:	6e 84       	ldd	r6, Y+14	; 0x0e
    291e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2920:	8c 84       	ldd	r8, Y+12	; 0x0c
    2922:	9b 84       	ldd	r9, Y+11	; 0x0b
    2924:	aa 84       	ldd	r10, Y+10	; 0x0a
    2926:	b9 84       	ldd	r11, Y+9	; 0x09
    2928:	c8 84       	ldd	r12, Y+8	; 0x08
    292a:	df 80       	ldd	r13, Y+7	; 0x07
    292c:	ee 80       	ldd	r14, Y+6	; 0x06
    292e:	fd 80       	ldd	r15, Y+5	; 0x05
    2930:	0c 81       	ldd	r16, Y+4	; 0x04
    2932:	1b 81       	ldd	r17, Y+3	; 0x03
    2934:	aa 81       	ldd	r26, Y+2	; 0x02
    2936:	b9 81       	ldd	r27, Y+1	; 0x01
    2938:	ce 0f       	add	r28, r30
    293a:	d1 1d       	adc	r29, r1
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	ed 01       	movw	r28, r26
    2948:	08 95       	ret

0000294a <_exit>:
    294a:	f8 94       	cli

0000294c <__stop_program>:
    294c:	ff cf       	rjmp	.-2      	; 0x294c <__stop_program>
