
Final_Project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000392e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  0000392e  000039c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080014c  0080014c  00003aae  2**0
                  ALLOC
  3 .stab         00003558  00000000  00000000  00003ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000131c  00000000  00000000  00007008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a21d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000beb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 85 18 	jmp	0x310a	; 0x310a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <main>
      8a:	0c 94 95 1c 	jmp	0x392a	; 0x392a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e3       	ldi	r26, 0x31	; 49
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e3       	ldi	r24, 0x31	; 49
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP_setPassword>:
#include"app.h"
#include<util/delay.h>
#include"timer1.h"
uint8 doordisplaycompleteflag = 1;
/**This function is used to set the password if it's not set **/
void APP_setPassword(void) {
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c6 55       	subi	r28, 0x56	; 86
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	while (1) {
		/**Status Byte is sent in the beginning to synchronize the two µCs**/
		uint8 status;
		/**Print the Main menu**/
		uint8 count = 0;
     b60:	fe 01       	movw	r30, r28
     b62:	eb 5a       	subi	r30, 0xAB	; 171
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
		MENUS_enterNewPassMenu();
     b68:	0e 94 68 18 	call	0x30d0	; 0x30d0 <MENUS_enterNewPassMenu>
		/**Get the First Password**/
		for (count = 0; count < 5; count++) {
     b6c:	fe 01       	movw	r30, r28
     b6e:	eb 5a       	subi	r30, 0xAB	; 171
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	10 82       	st	Z, r1
     b74:	c3 c0       	rjmp	.+390    	; 0xcfc <APP_setPassword+0x1b6>
     b76:	fe 01       	movw	r30, r28
     b78:	ef 5a       	subi	r30, 0xAF	; 175
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a6 e9       	ldi	r26, 0x96	; 150
     b82:	b3 e4       	ldi	r27, 0x43	; 67
     b84:	80 83       	st	Z, r24
     b86:	91 83       	std	Z+1, r25	; 0x01
     b88:	a2 83       	std	Z+2, r26	; 0x02
     b8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8c:	8e 01       	movw	r16, r28
     b8e:	03 5b       	subi	r16, 0xB3	; 179
     b90:	1f 4f       	sbci	r17, 0xFF	; 255
     b92:	fe 01       	movw	r30, r28
     b94:	ef 5a       	subi	r30, 0xAF	; 175
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	4a ef       	ldi	r20, 0xFA	; 250
     ba6:	54 e4       	ldi	r21, 0x44	; 68
     ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	f8 01       	movw	r30, r16
     bb2:	80 83       	st	Z, r24
     bb4:	91 83       	std	Z+1, r25	; 0x01
     bb6:	a2 83       	std	Z+2, r26	; 0x02
     bb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bba:	fe 01       	movw	r30, r28
     bbc:	e3 5b       	subi	r30, 0xB3	; 179
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	60 81       	ld	r22, Z
     bc2:	71 81       	ldd	r23, Z+1	; 0x01
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	93 81       	ldd	r25, Z+3	; 0x03
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	44 f4       	brge	.+16     	; 0xbe8 <APP_setPassword+0xa2>
		__ticks = 1;
     bd8:	fe 01       	movw	r30, r28
     bda:	e5 5b       	subi	r30, 0xB5	; 181
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
     be6:	64 c0       	rjmp	.+200    	; 0xcb0 <APP_setPassword+0x16a>
	else if (__tmp > 65535)
     be8:	fe 01       	movw	r30, r28
     bea:	e3 5b       	subi	r30, 0xB3	; 179
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	60 81       	ld	r22, Z
     bf0:	71 81       	ldd	r23, Z+1	; 0x01
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	93 81       	ldd	r25, Z+3	; 0x03
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	4f e7       	ldi	r20, 0x7F	; 127
     bfc:	57 e4       	ldi	r21, 0x47	; 71
     bfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c02:	18 16       	cp	r1, r24
     c04:	0c f0       	brlt	.+2      	; 0xc08 <APP_setPassword+0xc2>
     c06:	43 c0       	rjmp	.+134    	; 0xc8e <APP_setPassword+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c08:	fe 01       	movw	r30, r28
     c0a:	ef 5a       	subi	r30, 0xAF	; 175
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	82 81       	ldd	r24, Z+2	; 0x02
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e2       	ldi	r20, 0x20	; 32
     c1c:	51 e4       	ldi	r21, 0x41	; 65
     c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	8e 01       	movw	r16, r28
     c28:	05 5b       	subi	r16, 0xB5	; 181
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	f8 01       	movw	r30, r16
     c3a:	91 83       	std	Z+1, r25	; 0x01
     c3c:	80 83       	st	Z, r24
     c3e:	1f c0       	rjmp	.+62     	; 0xc7e <APP_setPassword+0x138>
     c40:	fe 01       	movw	r30, r28
     c42:	e7 5b       	subi	r30, 0xB7	; 183
     c44:	ff 4f       	sbci	r31, 0xFF	; 255
     c46:	88 ec       	ldi	r24, 0xC8	; 200
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c4e:	fe 01       	movw	r30, r28
     c50:	e7 5b       	subi	r30, 0xB7	; 183
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <APP_setPassword+0x112>
     c5c:	fe 01       	movw	r30, r28
     c5e:	e7 5b       	subi	r30, 0xB7	; 183
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	de 01       	movw	r26, r28
     c68:	a5 5b       	subi	r26, 0xB5	; 181
     c6a:	bf 4f       	sbci	r27, 0xFF	; 255
     c6c:	fe 01       	movw	r30, r28
     c6e:	e5 5b       	subi	r30, 0xB5	; 181
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	9c 93       	st	X, r25
     c7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7e:	fe 01       	movw	r30, r28
     c80:	e5 5b       	subi	r30, 0xB5	; 181
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	d1 f6       	brne	.-76     	; 0xc40 <APP_setPassword+0xfa>
     c8c:	27 c0       	rjmp	.+78     	; 0xcdc <APP_setPassword+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	8e 01       	movw	r16, r28
     c90:	05 5b       	subi	r16, 0xB5	; 181
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	fe 01       	movw	r30, r28
     c96:	e3 5b       	subi	r30, 0xB3	; 179
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	60 81       	ld	r22, Z
     c9c:	71 81       	ldd	r23, Z+1	; 0x01
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	f8 01       	movw	r30, r16
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
     cb0:	de 01       	movw	r26, r28
     cb2:	a9 5b       	subi	r26, 0xB9	; 185
     cb4:	bf 4f       	sbci	r27, 0xFF	; 255
     cb6:	fe 01       	movw	r30, r28
     cb8:	e5 5b       	subi	r30, 0xB5	; 181
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	8d 93       	st	X+, r24
     cc2:	9c 93       	st	X, r25
     cc4:	fe 01       	movw	r30, r28
     cc6:	e9 5b       	subi	r30, 0xB9	; 185
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <APP_setPassword+0x188>
     cd2:	fe 01       	movw	r30, r28
     cd4:	e9 5b       	subi	r30, 0xB9	; 185
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	80 83       	st	Z, r24
			/**Get the pressed key on the keypad and send it to the other µC**/
			_delay_ms(KEYPAD_DELAY);
			UART_sendByte(KEYPAD_getPressedKey());
     cdc:	0e 94 83 11 	call	0x2306	; 0x2306 <KEYPAD_getPressedKey>
     ce0:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
			/**Display the * on the LCD**/
			LCD_displayCharacter('*');
     ce4:	8a e2       	ldi	r24, 0x2A	; 42
     ce6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_displayCharacter>
		uint8 status;
		/**Print the Main menu**/
		uint8 count = 0;
		MENUS_enterNewPassMenu();
		/**Get the First Password**/
		for (count = 0; count < 5; count++) {
     cea:	de 01       	movw	r26, r28
     cec:	ab 5a       	subi	r26, 0xAB	; 171
     cee:	bf 4f       	sbci	r27, 0xFF	; 255
     cf0:	fe 01       	movw	r30, r28
     cf2:	eb 5a       	subi	r30, 0xAB	; 171
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	80 81       	ld	r24, Z
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	8c 93       	st	X, r24
     cfc:	fe 01       	movw	r30, r28
     cfe:	eb 5a       	subi	r30, 0xAB	; 171
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	80 81       	ld	r24, Z
     d04:	85 30       	cpi	r24, 0x05	; 5
     d06:	08 f4       	brcc	.+2      	; 0xd0a <APP_setPassword+0x1c4>
     d08:	36 cf       	rjmp	.-404    	; 0xb76 <APP_setPassword+0x30>
			UART_sendByte(KEYPAD_getPressedKey());
			/**Display the * on the LCD**/
			LCD_displayCharacter('*');
		}
		/**wait for the user to press enter**/
		while (KEYPAD_getPressedKey() != ENTER_KEY)
     d0a:	0e 94 83 11 	call	0x2306	; 0x2306 <KEYPAD_getPressedKey>
     d0e:	80 32       	cpi	r24, 0x20	; 32
     d10:	e1 f7       	brne	.-8      	; 0xd0a <APP_setPassword+0x1c4>
			;
		/**Sending the Enter Key**/
		UART_sendByte(' ');
     d12:	80 e2       	ldi	r24, 0x20	; 32
     d14:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
		/**Display the Re-Enter the Password LCD**/
		MENUS_reenterPassMenu();
     d18:	0e 94 4f 18 	call	0x309e	; 0x309e <MENUS_reenterPassMenu>
		/**Get the Second Password**/
		for (count = 0; count < 5; count++) {
     d1c:	fe 01       	movw	r30, r28
     d1e:	eb 5a       	subi	r30, 0xAB	; 171
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	10 82       	st	Z, r1
     d24:	95 c0       	rjmp	.+298    	; 0xe50 <APP_setPassword+0x30a>
     d26:	fe 01       	movw	r30, r28
     d28:	ed 5b       	subi	r30, 0xBD	; 189
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	a6 e9       	ldi	r26, 0x96	; 150
     d32:	b3 e4       	ldi	r27, 0x43	; 67
     d34:	80 83       	st	Z, r24
     d36:	91 83       	std	Z+1, r25	; 0x01
     d38:	a2 83       	std	Z+2, r26	; 0x02
     d3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d3c:	8e 01       	movw	r16, r28
     d3e:	01 5c       	subi	r16, 0xC1	; 193
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	fe 01       	movw	r30, r28
     d44:	ed 5b       	subi	r30, 0xBD	; 189
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	4a ef       	ldi	r20, 0xFA	; 250
     d56:	54 e4       	ldi	r21, 0x44	; 68
     d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	f8 01       	movw	r30, r16
     d62:	80 83       	st	Z, r24
     d64:	91 83       	std	Z+1, r25	; 0x01
     d66:	a2 83       	std	Z+2, r26	; 0x02
     d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d6a:	fe 01       	movw	r30, r28
     d6c:	ff 96       	adiw	r30, 0x3f	; 63
     d6e:	60 81       	ld	r22, Z
     d70:	71 81       	ldd	r23, Z+1	; 0x01
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	93 81       	ldd	r25, Z+3	; 0x03
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e8       	ldi	r20, 0x80	; 128
     d7c:	5f e3       	ldi	r21, 0x3F	; 63
     d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d82:	88 23       	and	r24, r24
     d84:	2c f4       	brge	.+10     	; 0xd90 <APP_setPassword+0x24a>
		__ticks = 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9e af       	std	Y+62, r25	; 0x3e
     d8c:	8d af       	std	Y+61, r24	; 0x3d
     d8e:	46 c0       	rjmp	.+140    	; 0xe1c <APP_setPassword+0x2d6>
	else if (__tmp > 65535)
     d90:	fe 01       	movw	r30, r28
     d92:	ff 96       	adiw	r30, 0x3f	; 63
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	4f e7       	ldi	r20, 0x7F	; 127
     da2:	57 e4       	ldi	r21, 0x47	; 71
     da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da8:	18 16       	cp	r1, r24
     daa:	64 f5       	brge	.+88     	; 0xe04 <APP_setPassword+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	fe 01       	movw	r30, r28
     dae:	ed 5b       	subi	r30, 0xBD	; 189
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9e af       	std	Y+62, r25	; 0x3e
     dd8:	8d af       	std	Y+61, r24	; 0x3d
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <APP_setPassword+0x2b4>
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9c af       	std	Y+60, r25	; 0x3c
     de2:	8b af       	std	Y+59, r24	; 0x3b
     de4:	8b ad       	ldd	r24, Y+59	; 0x3b
     de6:	9c ad       	ldd	r25, Y+60	; 0x3c
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <APP_setPassword+0x2a2>
     dec:	9c af       	std	Y+60, r25	; 0x3c
     dee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8d ad       	ldd	r24, Y+61	; 0x3d
     df2:	9e ad       	ldd	r25, Y+62	; 0x3e
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9e af       	std	Y+62, r25	; 0x3e
     df8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8d ad       	ldd	r24, Y+61	; 0x3d
     dfc:	9e ad       	ldd	r25, Y+62	; 0x3e
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <APP_setPassword+0x296>
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <APP_setPassword+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	fe 01       	movw	r30, r28
     e06:	ff 96       	adiw	r30, 0x3f	; 63
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	9e af       	std	Y+62, r25	; 0x3e
     e1a:	8d af       	std	Y+61, r24	; 0x3d
     e1c:	8d ad       	ldd	r24, Y+61	; 0x3d
     e1e:	9e ad       	ldd	r25, Y+62	; 0x3e
     e20:	9a af       	std	Y+58, r25	; 0x3a
     e22:	89 af       	std	Y+57, r24	; 0x39
     e24:	89 ad       	ldd	r24, Y+57	; 0x39
     e26:	9a ad       	ldd	r25, Y+58	; 0x3a
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <APP_setPassword+0x2e2>
     e2c:	9a af       	std	Y+58, r25	; 0x3a
     e2e:	89 af       	std	Y+57, r24	; 0x39
			/**Get the pressed key on the keypad and send it to the other µC**/
			_delay_ms(KEYPAD_DELAY);
			UART_sendByte(KEYPAD_getPressedKey());
     e30:	0e 94 83 11 	call	0x2306	; 0x2306 <KEYPAD_getPressedKey>
     e34:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
			/**Display the * on the LCD**/
			LCD_displayCharacter('*');
     e38:	8a e2       	ldi	r24, 0x2A	; 42
     e3a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_displayCharacter>
		/**Sending the Enter Key**/
		UART_sendByte(' ');
		/**Display the Re-Enter the Password LCD**/
		MENUS_reenterPassMenu();
		/**Get the Second Password**/
		for (count = 0; count < 5; count++) {
     e3e:	de 01       	movw	r26, r28
     e40:	ab 5a       	subi	r26, 0xAB	; 171
     e42:	bf 4f       	sbci	r27, 0xFF	; 255
     e44:	fe 01       	movw	r30, r28
     e46:	eb 5a       	subi	r30, 0xAB	; 171
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	8c 93       	st	X, r24
     e50:	fe 01       	movw	r30, r28
     e52:	eb 5a       	subi	r30, 0xAB	; 171
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 81       	ld	r24, Z
     e58:	85 30       	cpi	r24, 0x05	; 5
     e5a:	08 f4       	brcc	.+2      	; 0xe5e <APP_setPassword+0x318>
     e5c:	64 cf       	rjmp	.-312    	; 0xd26 <APP_setPassword+0x1e0>
			UART_sendByte(KEYPAD_getPressedKey());
			/**Display the * on the LCD**/
			LCD_displayCharacter('*');
		}
		/**wait for the user to press enter**/
		while (KEYPAD_getPressedKey() != ENTER_KEY)
     e5e:	0e 94 83 11 	call	0x2306	; 0x2306 <KEYPAD_getPressedKey>
     e62:	80 32       	cpi	r24, 0x20	; 32
     e64:	e1 f7       	brne	.-8      	; 0xe5e <APP_setPassword+0x318>
			;
		/**Sending the Enter Key**/
		UART_sendByte(' ');
     e66:	80 e2       	ldi	r24, 0x20	; 32
     e68:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
		/**Wait for the result from the other µC to know if the passwords match
		 * or not**/
		status = UART_receiveByte();
     e6c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_receiveByte>
     e70:	fe 01       	movw	r30, r28
     e72:	ea 5a       	subi	r30, 0xAA	; 170
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	80 83       	st	Z, r24
		/**if the Passwords don't match then tell the user and Re-set the Whole
		 * process of setting the Password**/
		if (status == WRONG_CONFIRMATION) {
     e78:	fe 01       	movw	r30, r28
     e7a:	ea 5a       	subi	r30, 0xAA	; 170
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	80 81       	ld	r24, Z
     e80:	8f 3f       	cpi	r24, 0xFF	; 255
     e82:	09 f0       	breq	.+2      	; 0xe86 <APP_setPassword+0x340>
     e84:	85 c0       	rjmp	.+266    	; 0xf90 <APP_setPassword+0x44a>
			LCD_clearScreen();
     e86:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_moveCursor(0, 5);
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	65 e0       	ldi	r22, 0x05	; 5
     e8e:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
			LCD_displayString("Wrong");
     e92:	80 e6       	ldi	r24, 0x60	; 96
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
			LCD_moveCursor(1, 2);
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	62 e0       	ldi	r22, 0x02	; 2
     e9e:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
			LCD_displayString("Confirmation");
     ea2:	86 e6       	ldi	r24, 0x66	; 102
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	aa e7       	ldi	r26, 0x7A	; 122
     eb0:	b4 e4       	ldi	r27, 0x44	; 68
     eb2:	8d ab       	std	Y+53, r24	; 0x35
     eb4:	9e ab       	std	Y+54, r25	; 0x36
     eb6:	af ab       	std	Y+55, r26	; 0x37
     eb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eba:	6d a9       	ldd	r22, Y+53	; 0x35
     ebc:	7e a9       	ldd	r23, Y+54	; 0x36
     ebe:	8f a9       	ldd	r24, Y+55	; 0x37
     ec0:	98 ad       	ldd	r25, Y+56	; 0x38
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	4a ef       	ldi	r20, 0xFA	; 250
     ec8:	54 e4       	ldi	r21, 0x44	; 68
     eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	89 ab       	std	Y+49, r24	; 0x31
     ed4:	9a ab       	std	Y+50, r25	; 0x32
     ed6:	ab ab       	std	Y+51, r26	; 0x33
     ed8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eda:	69 a9       	ldd	r22, Y+49	; 0x31
     edc:	7a a9       	ldd	r23, Y+50	; 0x32
     ede:	8b a9       	ldd	r24, Y+51	; 0x33
     ee0:	9c a9       	ldd	r25, Y+52	; 0x34
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eee:	88 23       	and	r24, r24
     ef0:	2c f4       	brge	.+10     	; 0xefc <APP_setPassword+0x3b6>
		__ticks = 1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	98 ab       	std	Y+48, r25	; 0x30
     ef8:	8f a7       	std	Y+47, r24	; 0x2f
     efa:	3f c0       	rjmp	.+126    	; 0xf7a <APP_setPassword+0x434>
	else if (__tmp > 65535)
     efc:	69 a9       	ldd	r22, Y+49	; 0x31
     efe:	7a a9       	ldd	r23, Y+50	; 0x32
     f00:	8b a9       	ldd	r24, Y+51	; 0x33
     f02:	9c a9       	ldd	r25, Y+52	; 0x34
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	3f ef       	ldi	r19, 0xFF	; 255
     f08:	4f e7       	ldi	r20, 0x7F	; 127
     f0a:	57 e4       	ldi	r21, 0x47	; 71
     f0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f10:	18 16       	cp	r1, r24
     f12:	4c f5       	brge	.+82     	; 0xf66 <APP_setPassword+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f14:	6d a9       	ldd	r22, Y+53	; 0x35
     f16:	7e a9       	ldd	r23, Y+54	; 0x36
     f18:	8f a9       	ldd	r24, Y+55	; 0x37
     f1a:	98 ad       	ldd	r25, Y+56	; 0x38
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e2       	ldi	r20, 0x20	; 32
     f22:	51 e4       	ldi	r21, 0x41	; 65
     f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	98 ab       	std	Y+48, r25	; 0x30
     f3a:	8f a7       	std	Y+47, r24	; 0x2f
     f3c:	0f c0       	rjmp	.+30     	; 0xf5c <APP_setPassword+0x416>
     f3e:	88 ec       	ldi	r24, 0xC8	; 200
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9e a7       	std	Y+46, r25	; 0x2e
     f44:	8d a7       	std	Y+45, r24	; 0x2d
     f46:	8d a5       	ldd	r24, Y+45	; 0x2d
     f48:	9e a5       	ldd	r25, Y+46	; 0x2e
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <APP_setPassword+0x404>
     f4e:	9e a7       	std	Y+46, r25	; 0x2e
     f50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f52:	8f a5       	ldd	r24, Y+47	; 0x2f
     f54:	98 a9       	ldd	r25, Y+48	; 0x30
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	98 ab       	std	Y+48, r25	; 0x30
     f5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5e:	98 a9       	ldd	r25, Y+48	; 0x30
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	69 f7       	brne	.-38     	; 0xf3e <APP_setPassword+0x3f8>
     f64:	fd cd       	rjmp	.-1030   	; 0xb60 <APP_setPassword+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f66:	69 a9       	ldd	r22, Y+49	; 0x31
     f68:	7a a9       	ldd	r23, Y+50	; 0x32
     f6a:	8b a9       	ldd	r24, Y+51	; 0x33
     f6c:	9c a9       	ldd	r25, Y+52	; 0x34
     f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	98 ab       	std	Y+48, r25	; 0x30
     f78:	8f a7       	std	Y+47, r24	; 0x2f
     f7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f7c:	98 a9       	ldd	r25, Y+48	; 0x30
     f7e:	9c a7       	std	Y+44, r25	; 0x2c
     f80:	8b a7       	std	Y+43, r24	; 0x2b
     f82:	8b a5       	ldd	r24, Y+43	; 0x2b
     f84:	9c a5       	ldd	r25, Y+44	; 0x2c
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <APP_setPassword+0x440>
     f8a:	9c a7       	std	Y+44, r25	; 0x2c
     f8c:	8b a7       	std	Y+43, r24	; 0x2b
     f8e:	e8 cd       	rjmp	.-1072   	; 0xb60 <APP_setPassword+0x1a>
			_delay_ms(1000);
			continue;
		} else if (status == PASSWORD_MATCHED) {
     f90:	fe 01       	movw	r30, r28
     f92:	ea 5a       	subi	r30, 0xAA	; 170
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 81       	ld	r24, Z
     f98:	8e 3f       	cpi	r24, 0xFE	; 254
     f9a:	09 f0       	breq	.+2      	; 0xf9e <APP_setPassword+0x458>
     f9c:	79 c0       	rjmp	.+242    	; 0x1090 <APP_setPassword+0x54a>
			LCD_clearScreen();
     f9e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_displayString("PASSWORD IS SET");
     fa2:	83 e7       	ldi	r24, 0x73	; 115
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	aa e7       	ldi	r26, 0x7A	; 122
     fb0:	b4 e4       	ldi	r27, 0x44	; 68
     fb2:	8f a3       	std	Y+39, r24	; 0x27
     fb4:	98 a7       	std	Y+40, r25	; 0x28
     fb6:	a9 a7       	std	Y+41, r26	; 0x29
     fb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fba:	6f a1       	ldd	r22, Y+39	; 0x27
     fbc:	78 a5       	ldd	r23, Y+40	; 0x28
     fbe:	89 a5       	ldd	r24, Y+41	; 0x29
     fc0:	9a a5       	ldd	r25, Y+42	; 0x2a
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	4a ef       	ldi	r20, 0xFA	; 250
     fc8:	54 e4       	ldi	r21, 0x44	; 68
     fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	8b a3       	std	Y+35, r24	; 0x23
     fd4:	9c a3       	std	Y+36, r25	; 0x24
     fd6:	ad a3       	std	Y+37, r26	; 0x25
     fd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fda:	6b a1       	ldd	r22, Y+35	; 0x23
     fdc:	7c a1       	ldd	r23, Y+36	; 0x24
     fde:	8d a1       	ldd	r24, Y+37	; 0x25
     fe0:	9e a1       	ldd	r25, Y+38	; 0x26
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e8       	ldi	r20, 0x80	; 128
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fee:	88 23       	and	r24, r24
     ff0:	2c f4       	brge	.+10     	; 0xffc <APP_setPassword+0x4b6>
		__ticks = 1;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9a a3       	std	Y+34, r25	; 0x22
     ff8:	89 a3       	std	Y+33, r24	; 0x21
     ffa:	3f c0       	rjmp	.+126    	; 0x107a <APP_setPassword+0x534>
	else if (__tmp > 65535)
     ffc:	6b a1       	ldd	r22, Y+35	; 0x23
     ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    1000:	8d a1       	ldd	r24, Y+37	; 0x25
    1002:	9e a1       	ldd	r25, Y+38	; 0x26
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	3f ef       	ldi	r19, 0xFF	; 255
    1008:	4f e7       	ldi	r20, 0x7F	; 127
    100a:	57 e4       	ldi	r21, 0x47	; 71
    100c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1010:	18 16       	cp	r1, r24
    1012:	4c f5       	brge	.+82     	; 0x1066 <APP_setPassword+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1014:	6f a1       	ldd	r22, Y+39	; 0x27
    1016:	78 a5       	ldd	r23, Y+40	; 0x28
    1018:	89 a5       	ldd	r24, Y+41	; 0x29
    101a:	9a a5       	ldd	r25, Y+42	; 0x2a
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e2       	ldi	r20, 0x20	; 32
    1022:	51 e4       	ldi	r21, 0x41	; 65
    1024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9a a3       	std	Y+34, r25	; 0x22
    103a:	89 a3       	std	Y+33, r24	; 0x21
    103c:	0f c0       	rjmp	.+30     	; 0x105c <APP_setPassword+0x516>
    103e:	88 ec       	ldi	r24, 0xC8	; 200
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	98 a3       	std	Y+32, r25	; 0x20
    1044:	8f 8f       	std	Y+31, r24	; 0x1f
    1046:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1048:	98 a1       	ldd	r25, Y+32	; 0x20
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <APP_setPassword+0x504>
    104e:	98 a3       	std	Y+32, r25	; 0x20
    1050:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1052:	89 a1       	ldd	r24, Y+33	; 0x21
    1054:	9a a1       	ldd	r25, Y+34	; 0x22
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	9a a3       	std	Y+34, r25	; 0x22
    105a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105c:	89 a1       	ldd	r24, Y+33	; 0x21
    105e:	9a a1       	ldd	r25, Y+34	; 0x22
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	69 f7       	brne	.-38     	; 0x103e <APP_setPassword+0x4f8>
    1064:	2e c1       	rjmp	.+604    	; 0x12c2 <APP_setPassword+0x77c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1066:	6b a1       	ldd	r22, Y+35	; 0x23
    1068:	7c a1       	ldd	r23, Y+36	; 0x24
    106a:	8d a1       	ldd	r24, Y+37	; 0x25
    106c:	9e a1       	ldd	r25, Y+38	; 0x26
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9a a3       	std	Y+34, r25	; 0x22
    1078:	89 a3       	std	Y+33, r24	; 0x21
    107a:	89 a1       	ldd	r24, Y+33	; 0x21
    107c:	9a a1       	ldd	r25, Y+34	; 0x22
    107e:	9e 8f       	std	Y+30, r25	; 0x1e
    1080:	8d 8f       	std	Y+29, r24	; 0x1d
    1082:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1084:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <APP_setPassword+0x540>
    108a:	9e 8f       	std	Y+30, r25	; 0x1e
    108c:	8d 8f       	std	Y+29, r24	; 0x1d
    108e:	19 c1       	rjmp	.+562    	; 0x12c2 <APP_setPassword+0x77c>
			_delay_ms(1000);
			return;
		} else if (status == PASSWORD_TRIALS_EXHAUSTED) {
    1090:	fe 01       	movw	r30, r28
    1092:	ea 5a       	subi	r30, 0xAA	; 170
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 81       	ld	r24, Z
    1098:	8c 3f       	cpi	r24, 0xFC	; 252
    109a:	09 f0       	breq	.+2      	; 0x109e <APP_setPassword+0x558>
    109c:	61 cd       	rjmp	.-1342   	; 0xb60 <APP_setPassword+0x1a>
			LCD_clearScreen();
    109e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_moveCursor(0, 5);
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	65 e0       	ldi	r22, 0x05	; 5
    10a6:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
			LCD_displayString("Wrong");
    10aa:	80 e6       	ldi	r24, 0x60	; 96
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
			LCD_moveCursor(1, 2);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	62 e0       	ldi	r22, 0x02	; 2
    10b6:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
			LCD_displayString("Confirmation");
    10ba:	86 e6       	ldi	r24, 0x66	; 102
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	aa e7       	ldi	r26, 0x7A	; 122
    10c8:	b4 e4       	ldi	r27, 0x44	; 68
    10ca:	89 8f       	std	Y+25, r24	; 0x19
    10cc:	9a 8f       	std	Y+26, r25	; 0x1a
    10ce:	ab 8f       	std	Y+27, r26	; 0x1b
    10d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d2:	69 8d       	ldd	r22, Y+25	; 0x19
    10d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a ef       	ldi	r20, 0xFA	; 250
    10e0:	54 e4       	ldi	r21, 0x44	; 68
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	8d 8b       	std	Y+21, r24	; 0x15
    10ec:	9e 8b       	std	Y+22, r25	; 0x16
    10ee:	af 8b       	std	Y+23, r26	; 0x17
    10f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10f2:	6d 89       	ldd	r22, Y+21	; 0x15
    10f4:	7e 89       	ldd	r23, Y+22	; 0x16
    10f6:	8f 89       	ldd	r24, Y+23	; 0x17
    10f8:	98 8d       	ldd	r25, Y+24	; 0x18
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1106:	88 23       	and	r24, r24
    1108:	2c f4       	brge	.+10     	; 0x1114 <APP_setPassword+0x5ce>
		__ticks = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9c 8b       	std	Y+20, r25	; 0x14
    1110:	8b 8b       	std	Y+19, r24	; 0x13
    1112:	3f c0       	rjmp	.+126    	; 0x1192 <APP_setPassword+0x64c>
	else if (__tmp > 65535)
    1114:	6d 89       	ldd	r22, Y+21	; 0x15
    1116:	7e 89       	ldd	r23, Y+22	; 0x16
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	98 8d       	ldd	r25, Y+24	; 0x18
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	3f ef       	ldi	r19, 0xFF	; 255
    1120:	4f e7       	ldi	r20, 0x7F	; 127
    1122:	57 e4       	ldi	r21, 0x47	; 71
    1124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1128:	18 16       	cp	r1, r24
    112a:	4c f5       	brge	.+82     	; 0x117e <APP_setPassword+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112c:	69 8d       	ldd	r22, Y+25	; 0x19
    112e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e2       	ldi	r20, 0x20	; 32
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9c 8b       	std	Y+20, r25	; 0x14
    1152:	8b 8b       	std	Y+19, r24	; 0x13
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <APP_setPassword+0x62e>
    1156:	88 ec       	ldi	r24, 0xC8	; 200
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9a 8b       	std	Y+18, r25	; 0x12
    115c:	89 8b       	std	Y+17, r24	; 0x11
    115e:	89 89       	ldd	r24, Y+17	; 0x11
    1160:	9a 89       	ldd	r25, Y+18	; 0x12
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <APP_setPassword+0x61c>
    1166:	9a 8b       	std	Y+18, r25	; 0x12
    1168:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116a:	8b 89       	ldd	r24, Y+19	; 0x13
    116c:	9c 89       	ldd	r25, Y+20	; 0x14
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9c 8b       	std	Y+20, r25	; 0x14
    1172:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1174:	8b 89       	ldd	r24, Y+19	; 0x13
    1176:	9c 89       	ldd	r25, Y+20	; 0x14
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	69 f7       	brne	.-38     	; 0x1156 <APP_setPassword+0x610>
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <APP_setPassword+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117e:	6d 89       	ldd	r22, Y+21	; 0x15
    1180:	7e 89       	ldd	r23, Y+22	; 0x16
    1182:	8f 89       	ldd	r24, Y+23	; 0x17
    1184:	98 8d       	ldd	r25, Y+24	; 0x18
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9c 8b       	std	Y+20, r25	; 0x14
    1190:	8b 8b       	std	Y+19, r24	; 0x13
    1192:	8b 89       	ldd	r24, Y+19	; 0x13
    1194:	9c 89       	ldd	r25, Y+20	; 0x14
    1196:	98 8b       	std	Y+16, r25	; 0x10
    1198:	8f 87       	std	Y+15, r24	; 0x0f
    119a:	8f 85       	ldd	r24, Y+15	; 0x0f
    119c:	98 89       	ldd	r25, Y+16	; 0x10
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <APP_setPassword+0x658>
    11a2:	98 8b       	std	Y+16, r25	; 0x10
    11a4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_clearScreen();
    11a6:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_displayString("   TRESPASSER");
    11aa:	83 e8       	ldi	r24, 0x83	; 131
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
			for (count = 0; count < BUZZER_TIME - 1; count++)
    11b2:	fe 01       	movw	r30, r28
    11b4:	eb 5a       	subi	r30, 0xAB	; 171
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	10 82       	st	Z, r1
    11ba:	7b c0       	rjmp	.+246    	; 0x12b2 <APP_setPassword+0x76c>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	aa e7       	ldi	r26, 0x7A	; 122
    11c2:	b4 e4       	ldi	r27, 0x44	; 68
    11c4:	8b 87       	std	Y+11, r24	; 0x0b
    11c6:	9c 87       	std	Y+12, r25	; 0x0c
    11c8:	ad 87       	std	Y+13, r26	; 0x0d
    11ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	4a ef       	ldi	r20, 0xFA	; 250
    11da:	54 e4       	ldi	r21, 0x44	; 68
    11dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	8f 83       	std	Y+7, r24	; 0x07
    11e6:	98 87       	std	Y+8, r25	; 0x08
    11e8:	a9 87       	std	Y+9, r26	; 0x09
    11ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e8       	ldi	r20, 0x80	; 128
    11fa:	5f e3       	ldi	r21, 0x3F	; 63
    11fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1200:	88 23       	and	r24, r24
    1202:	2c f4       	brge	.+10     	; 0x120e <APP_setPassword+0x6c8>
		__ticks = 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	3f c0       	rjmp	.+126    	; 0x128c <APP_setPassword+0x746>
	else if (__tmp > 65535)
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	57 e4       	ldi	r21, 0x47	; 71
    121e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1222:	18 16       	cp	r1, r24
    1224:	4c f5       	brge	.+82     	; 0x1278 <APP_setPassword+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1226:	6b 85       	ldd	r22, Y+11	; 0x0b
    1228:	7c 85       	ldd	r23, Y+12	; 0x0c
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e2       	ldi	r20, 0x20	; 32
    1234:	51 e4       	ldi	r21, 0x41	; 65
    1236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	0f c0       	rjmp	.+30     	; 0x126e <APP_setPassword+0x728>
    1250:	88 ec       	ldi	r24, 0xC8	; 200
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <APP_setPassword+0x716>
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	69 f7       	brne	.-38     	; 0x1250 <APP_setPassword+0x70a>
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <APP_setPassword+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1278:	6f 81       	ldd	r22, Y+7	; 0x07
    127a:	78 85       	ldd	r23, Y+8	; 0x08
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <APP_setPassword+0x752>
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	de 01       	movw	r26, r28
    12a2:	ab 5a       	subi	r26, 0xAB	; 171
    12a4:	bf 4f       	sbci	r27, 0xFF	; 255
    12a6:	fe 01       	movw	r30, r28
    12a8:	eb 5a       	subi	r30, 0xAB	; 171
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	80 81       	ld	r24, Z
    12ae:	8f 5f       	subi	r24, 0xFF	; 255
    12b0:	8c 93       	st	X, r24
    12b2:	fe 01       	movw	r30, r28
    12b4:	eb 5a       	subi	r30, 0xAB	; 171
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	80 81       	ld	r24, Z
    12ba:	8b 33       	cpi	r24, 0x3B	; 59
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <APP_setPassword+0x77a>
    12be:	7e cf       	rjmp	.-260    	; 0x11bc <APP_setPassword+0x676>
    12c0:	4f cc       	rjmp	.-1890   	; 0xb60 <APP_setPassword+0x1a>
				_delay_ms(1000);
		}
	}
}
    12c2:	ca 5a       	subi	r28, 0xAA	; 170
    12c4:	df 4f       	sbci	r29, 0xFF	; 255
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <APP_systemControl>:
/**This function controls the system when the system is on the main menu**/
void APP_systemControl(void) {
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	c8 55       	subi	r28, 0x58	; 88
    12e8:	d0 40       	sbci	r29, 0x00	; 0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
	uint8 count = 0;
    12f4:	fe 01       	movw	r30, r28
    12f6:	e8 5a       	subi	r30, 0xA8	; 168
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	10 82       	st	Z, r1
	/**Print the main menu then wait and get the user selection**/
	MENUS_mainMenu();
    12fc:	0e 94 21 18 	call	0x3042	; 0x3042 <MENUS_mainMenu>
	uint8 pressedkey = KEYPAD_getPressedKey();
    1300:	0e 94 83 11 	call	0x2306	; 0x2306 <KEYPAD_getPressedKey>
    1304:	fe 01       	movw	r30, r28
    1306:	e9 5a       	subi	r30, 0xA9	; 169
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 83       	st	Z, r24
	if (pressedkey == OPEN_DOOR) {
    130c:	fe 01       	movw	r30, r28
    130e:	e9 5a       	subi	r30, 0xA9	; 169
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	80 81       	ld	r24, Z
    1314:	8b 32       	cpi	r24, 0x2B	; 43
    1316:	09 f0       	breq	.+2      	; 0x131a <APP_systemControl+0x40>
    1318:	fd c1       	rjmp	.+1018   	; 0x1714 <APP_systemControl+0x43a>
		/**If the user chooses to open the door then get the password**/
		UART_sendByte(OPEN_DOOR);
    131a:	8b e2       	ldi	r24, 0x2B	; 43
    131c:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
		APP_getPassword();
    1320:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <APP_getPassword>
		/**wait for the result from the other µC**/
		uint8 status = UART_receiveByte();
    1324:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_receiveByte>
    1328:	fe 01       	movw	r30, r28
    132a:	ea 5a       	subi	r30, 0xAA	; 170
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	80 83       	st	Z, r24
		if (status == PASSWORD_MATCHED) {
    1330:	fe 01       	movw	r30, r28
    1332:	ea 5a       	subi	r30, 0xAA	; 170
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	8e 3f       	cpi	r24, 0xFE	; 254
    133a:	51 f4       	brne	.+20     	; 0x1350 <APP_systemControl+0x76>
			APP_displayDoorUnlocking();
    133c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <APP_displayDoorUnlocking>
			doordisplaycompleteflag = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	80 93 39 01 	sts	0x0139, r24
			while (doordisplaycompleteflag == 1)
    1346:	80 91 39 01 	lds	r24, 0x0139
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	e1 f3       	breq	.-8      	; 0x1346 <APP_systemControl+0x6c>
    134e:	89 c3       	rjmp	.+1810   	; 0x1a62 <APP_systemControl+0x788>
				;

		} else if (status == PASSWORD_UNMATCHED) {
    1350:	fe 01       	movw	r30, r28
    1352:	ea 5a       	subi	r30, 0xAA	; 170
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 81       	ld	r24, Z
    1358:	8d 3f       	cpi	r24, 0xFD	; 253
    135a:	09 f0       	breq	.+2      	; 0x135e <APP_systemControl+0x84>
    135c:	bb c0       	rjmp	.+374    	; 0x14d4 <APP_systemControl+0x1fa>
			/**if the passwords are not matched tell the user**/
			LCD_clearScreen();
    135e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1362:	81 e9       	ldi	r24, 0x91	; 145
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
    136a:	fe 01       	movw	r30, r28
    136c:	ef 5a       	subi	r30, 0xAF	; 175
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	aa e7       	ldi	r26, 0x7A	; 122
    1376:	b4 e4       	ldi	r27, 0x44	; 68
    1378:	80 83       	st	Z, r24
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	a2 83       	std	Z+2, r26	; 0x02
    137e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1380:	8e 01       	movw	r16, r28
    1382:	03 5b       	subi	r16, 0xB3	; 179
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	fe 01       	movw	r30, r28
    1388:	ef 5a       	subi	r30, 0xAF	; 175
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	4a ef       	ldi	r20, 0xFA	; 250
    139a:	54 e4       	ldi	r21, 0x44	; 68
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	f8 01       	movw	r30, r16
    13a6:	80 83       	st	Z, r24
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	a2 83       	std	Z+2, r26	; 0x02
    13ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ae:	fe 01       	movw	r30, r28
    13b0:	e3 5b       	subi	r30, 0xB3	; 179
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	60 81       	ld	r22, Z
    13b6:	71 81       	ldd	r23, Z+1	; 0x01
    13b8:	82 81       	ldd	r24, Z+2	; 0x02
    13ba:	93 81       	ldd	r25, Z+3	; 0x03
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e8       	ldi	r20, 0x80	; 128
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c8:	88 23       	and	r24, r24
    13ca:	44 f4       	brge	.+16     	; 0x13dc <APP_systemControl+0x102>
		__ticks = 1;
    13cc:	fe 01       	movw	r30, r28
    13ce:	e5 5b       	subi	r30, 0xB5	; 181
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    13da:	64 c0       	rjmp	.+200    	; 0x14a4 <APP_systemControl+0x1ca>
	else if (__tmp > 65535)
    13dc:	fe 01       	movw	r30, r28
    13de:	e3 5b       	subi	r30, 0xB3	; 179
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	60 81       	ld	r22, Z
    13e4:	71 81       	ldd	r23, Z+1	; 0x01
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	93 81       	ldd	r25, Z+3	; 0x03
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	0c f0       	brlt	.+2      	; 0x13fc <APP_systemControl+0x122>
    13fa:	43 c0       	rjmp	.+134    	; 0x1482 <APP_systemControl+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fc:	fe 01       	movw	r30, r28
    13fe:	ef 5a       	subi	r30, 0xAF	; 175
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	8e 01       	movw	r16, r28
    141c:	05 5b       	subi	r16, 0xB5	; 181
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	f8 01       	movw	r30, r16
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
    1432:	1f c0       	rjmp	.+62     	; 0x1472 <APP_systemControl+0x198>
    1434:	fe 01       	movw	r30, r28
    1436:	e7 5b       	subi	r30, 0xB7	; 183
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	88 ec       	ldi	r24, 0xC8	; 200
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	80 83       	st	Z, r24
    1442:	fe 01       	movw	r30, r28
    1444:	e7 5b       	subi	r30, 0xB7	; 183
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <APP_systemControl+0x172>
    1450:	fe 01       	movw	r30, r28
    1452:	e7 5b       	subi	r30, 0xB7	; 183
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	de 01       	movw	r26, r28
    145c:	a5 5b       	subi	r26, 0xB5	; 181
    145e:	bf 4f       	sbci	r27, 0xFF	; 255
    1460:	fe 01       	movw	r30, r28
    1462:	e5 5b       	subi	r30, 0xB5	; 181
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	11 96       	adiw	r26, 0x01	; 1
    146e:	9c 93       	st	X, r25
    1470:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1472:	fe 01       	movw	r30, r28
    1474:	e5 5b       	subi	r30, 0xB5	; 181
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	d1 f6       	brne	.-76     	; 0x1434 <APP_systemControl+0x15a>
    1480:	f0 c2       	rjmp	.+1504   	; 0x1a62 <APP_systemControl+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1482:	8e 01       	movw	r16, r28
    1484:	05 5b       	subi	r16, 0xB5	; 181
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	fe 01       	movw	r30, r28
    148a:	e3 5b       	subi	r30, 0xB3	; 179
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	f8 01       	movw	r30, r16
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	de 01       	movw	r26, r28
    14a6:	a9 5b       	subi	r26, 0xB9	; 185
    14a8:	bf 4f       	sbci	r27, 0xFF	; 255
    14aa:	fe 01       	movw	r30, r28
    14ac:	e5 5b       	subi	r30, 0xB5	; 181
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	91 81       	ldd	r25, Z+1	; 0x01
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	9c 93       	st	X, r25
    14b8:	8e 93       	st	-X, r24
    14ba:	fe 01       	movw	r30, r28
    14bc:	e9 5b       	subi	r30, 0xB9	; 185
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	80 81       	ld	r24, Z
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <APP_systemControl+0x1ea>
    14c8:	fe 01       	movw	r30, r28
    14ca:	e9 5b       	subi	r30, 0xB9	; 185
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	80 83       	st	Z, r24
    14d2:	c7 c2       	rjmp	.+1422   	; 0x1a62 <APP_systemControl+0x788>
			_delay_ms(1000);
			return;
		} else if (status == PASSWORD_TRIALS_EXHAUSTED) {
    14d4:	fe 01       	movw	r30, r28
    14d6:	ea 5a       	subi	r30, 0xAA	; 170
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	80 81       	ld	r24, Z
    14dc:	8c 3f       	cpi	r24, 0xFC	; 252
    14de:	09 f0       	breq	.+2      	; 0x14e2 <APP_systemControl+0x208>
    14e0:	c0 c2       	rjmp	.+1408   	; 0x1a62 <APP_systemControl+0x788>
			/**if the password trials are exhausted tell the user**/
			LCD_clearScreen();
    14e2:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    14e6:	81 e9       	ldi	r24, 0x91	; 145
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
    14ee:	fe 01       	movw	r30, r28
    14f0:	ed 5b       	subi	r30, 0xBD	; 189
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	aa e7       	ldi	r26, 0x7A	; 122
    14fa:	b4 e4       	ldi	r27, 0x44	; 68
    14fc:	80 83       	st	Z, r24
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	a2 83       	std	Z+2, r26	; 0x02
    1502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1504:	8e 01       	movw	r16, r28
    1506:	01 5c       	subi	r16, 0xC1	; 193
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	fe 01       	movw	r30, r28
    150c:	ed 5b       	subi	r30, 0xBD	; 189
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	93 81       	ldd	r25, Z+3	; 0x03
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	4a ef       	ldi	r20, 0xFA	; 250
    151e:	54 e4       	ldi	r21, 0x44	; 68
    1520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	f8 01       	movw	r30, r16
    152a:	80 83       	st	Z, r24
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	a2 83       	std	Z+2, r26	; 0x02
    1530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1532:	fe 01       	movw	r30, r28
    1534:	ff 96       	adiw	r30, 0x3f	; 63
    1536:	60 81       	ld	r22, Z
    1538:	71 81       	ldd	r23, Z+1	; 0x01
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <APP_systemControl+0x27e>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9e af       	std	Y+62, r25	; 0x3e
    1554:	8d af       	std	Y+61, r24	; 0x3d
    1556:	46 c0       	rjmp	.+140    	; 0x15e4 <APP_systemControl+0x30a>
	else if (__tmp > 65535)
    1558:	fe 01       	movw	r30, r28
    155a:	ff 96       	adiw	r30, 0x3f	; 63
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	3f ef       	ldi	r19, 0xFF	; 255
    1568:	4f e7       	ldi	r20, 0x7F	; 127
    156a:	57 e4       	ldi	r21, 0x47	; 71
    156c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1570:	18 16       	cp	r1, r24
    1572:	64 f5       	brge	.+88     	; 0x15cc <APP_systemControl+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1574:	fe 01       	movw	r30, r28
    1576:	ed 5b       	subi	r30, 0xBD	; 189
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9e af       	std	Y+62, r25	; 0x3e
    15a0:	8d af       	std	Y+61, r24	; 0x3d
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <APP_systemControl+0x2e8>
    15a4:	88 ec       	ldi	r24, 0xC8	; 200
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9c af       	std	Y+60, r25	; 0x3c
    15aa:	8b af       	std	Y+59, r24	; 0x3b
    15ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    15ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <APP_systemControl+0x2d6>
    15b4:	9c af       	std	Y+60, r25	; 0x3c
    15b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9e af       	std	Y+62, r25	; 0x3e
    15c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    15c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <APP_systemControl+0x2ca>
    15ca:	16 c0       	rjmp	.+44     	; 0x15f8 <APP_systemControl+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	fe 01       	movw	r30, r28
    15ce:	ff 96       	adiw	r30, 0x3f	; 63
    15d0:	60 81       	ld	r22, Z
    15d2:	71 81       	ldd	r23, Z+1	; 0x01
    15d4:	82 81       	ldd	r24, Z+2	; 0x02
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e af       	std	Y+62, r25	; 0x3e
    15e2:	8d af       	std	Y+61, r24	; 0x3d
    15e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    15e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    15e8:	9a af       	std	Y+58, r25	; 0x3a
    15ea:	89 af       	std	Y+57, r24	; 0x39
    15ec:	89 ad       	ldd	r24, Y+57	; 0x39
    15ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <APP_systemControl+0x316>
    15f4:	9a af       	std	Y+58, r25	; 0x3a
    15f6:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			LCD_clearScreen();
    15f8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_displayString("   TRESPASSER");
    15fc:	83 e8       	ldi	r24, 0x83	; 131
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
			for (count = 0; count < BUZZER_TIME - 1; count++)
    1604:	fe 01       	movw	r30, r28
    1606:	e8 5a       	subi	r30, 0xA8	; 168
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	10 82       	st	Z, r1
    160c:	7b c0       	rjmp	.+246    	; 0x1704 <APP_systemControl+0x42a>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	aa e7       	ldi	r26, 0x7A	; 122
    1614:	b4 e4       	ldi	r27, 0x44	; 68
    1616:	8d ab       	std	Y+53, r24	; 0x35
    1618:	9e ab       	std	Y+54, r25	; 0x36
    161a:	af ab       	std	Y+55, r26	; 0x37
    161c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161e:	6d a9       	ldd	r22, Y+53	; 0x35
    1620:	7e a9       	ldd	r23, Y+54	; 0x36
    1622:	8f a9       	ldd	r24, Y+55	; 0x37
    1624:	98 ad       	ldd	r25, Y+56	; 0x38
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a ef       	ldi	r20, 0xFA	; 250
    162c:	54 e4       	ldi	r21, 0x44	; 68
    162e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	89 ab       	std	Y+49, r24	; 0x31
    1638:	9a ab       	std	Y+50, r25	; 0x32
    163a:	ab ab       	std	Y+51, r26	; 0x33
    163c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    163e:	69 a9       	ldd	r22, Y+49	; 0x31
    1640:	7a a9       	ldd	r23, Y+50	; 0x32
    1642:	8b a9       	ldd	r24, Y+51	; 0x33
    1644:	9c a9       	ldd	r25, Y+52	; 0x34
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e8       	ldi	r20, 0x80	; 128
    164c:	5f e3       	ldi	r21, 0x3F	; 63
    164e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1652:	88 23       	and	r24, r24
    1654:	2c f4       	brge	.+10     	; 0x1660 <APP_systemControl+0x386>
		__ticks = 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	98 ab       	std	Y+48, r25	; 0x30
    165c:	8f a7       	std	Y+47, r24	; 0x2f
    165e:	3f c0       	rjmp	.+126    	; 0x16de <APP_systemControl+0x404>
	else if (__tmp > 65535)
    1660:	69 a9       	ldd	r22, Y+49	; 0x31
    1662:	7a a9       	ldd	r23, Y+50	; 0x32
    1664:	8b a9       	ldd	r24, Y+51	; 0x33
    1666:	9c a9       	ldd	r25, Y+52	; 0x34
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	3f ef       	ldi	r19, 0xFF	; 255
    166c:	4f e7       	ldi	r20, 0x7F	; 127
    166e:	57 e4       	ldi	r21, 0x47	; 71
    1670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1674:	18 16       	cp	r1, r24
    1676:	4c f5       	brge	.+82     	; 0x16ca <APP_systemControl+0x3f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1678:	6d a9       	ldd	r22, Y+53	; 0x35
    167a:	7e a9       	ldd	r23, Y+54	; 0x36
    167c:	8f a9       	ldd	r24, Y+55	; 0x37
    167e:	98 ad       	ldd	r25, Y+56	; 0x38
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e2       	ldi	r20, 0x20	; 32
    1686:	51 e4       	ldi	r21, 0x41	; 65
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	bc 01       	movw	r22, r24
    1692:	cd 01       	movw	r24, r26
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	98 ab       	std	Y+48, r25	; 0x30
    169e:	8f a7       	std	Y+47, r24	; 0x2f
    16a0:	0f c0       	rjmp	.+30     	; 0x16c0 <APP_systemControl+0x3e6>
    16a2:	88 ec       	ldi	r24, 0xC8	; 200
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9e a7       	std	Y+46, r25	; 0x2e
    16a8:	8d a7       	std	Y+45, r24	; 0x2d
    16aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    16ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <APP_systemControl+0x3d4>
    16b2:	9e a7       	std	Y+46, r25	; 0x2e
    16b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b8:	98 a9       	ldd	r25, Y+48	; 0x30
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	98 ab       	std	Y+48, r25	; 0x30
    16be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16c2:	98 a9       	ldd	r25, Y+48	; 0x30
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	69 f7       	brne	.-38     	; 0x16a2 <APP_systemControl+0x3c8>
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <APP_systemControl+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ca:	69 a9       	ldd	r22, Y+49	; 0x31
    16cc:	7a a9       	ldd	r23, Y+50	; 0x32
    16ce:	8b a9       	ldd	r24, Y+51	; 0x33
    16d0:	9c a9       	ldd	r25, Y+52	; 0x34
    16d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	98 ab       	std	Y+48, r25	; 0x30
    16dc:	8f a7       	std	Y+47, r24	; 0x2f
    16de:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e0:	98 a9       	ldd	r25, Y+48	; 0x30
    16e2:	9c a7       	std	Y+44, r25	; 0x2c
    16e4:	8b a7       	std	Y+43, r24	; 0x2b
    16e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <APP_systemControl+0x410>
    16ee:	9c a7       	std	Y+44, r25	; 0x2c
    16f0:	8b a7       	std	Y+43, r24	; 0x2b
    16f2:	de 01       	movw	r26, r28
    16f4:	a8 5a       	subi	r26, 0xA8	; 168
    16f6:	bf 4f       	sbci	r27, 0xFF	; 255
    16f8:	fe 01       	movw	r30, r28
    16fa:	e8 5a       	subi	r30, 0xA8	; 168
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	8c 93       	st	X, r24
    1704:	fe 01       	movw	r30, r28
    1706:	e8 5a       	subi	r30, 0xA8	; 168
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	8b 33       	cpi	r24, 0x3B	; 59
    170e:	08 f4       	brcc	.+2      	; 0x1712 <APP_systemControl+0x438>
    1710:	7e cf       	rjmp	.-260    	; 0x160e <APP_systemControl+0x334>
    1712:	a7 c1       	rjmp	.+846    	; 0x1a62 <APP_systemControl+0x788>
				_delay_ms(1000);
		}
	} else if (pressedkey == RESET_PASSWORD) {
    1714:	fe 01       	movw	r30, r28
    1716:	e9 5a       	subi	r30, 0xA9	; 169
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	8d 32       	cpi	r24, 0x2D	; 45
    171e:	09 f0       	breq	.+2      	; 0x1722 <APP_systemControl+0x448>
    1720:	a0 c1       	rjmp	.+832    	; 0x1a62 <APP_systemControl+0x788>
		/**if the user chooses to reset the password call the feunction that
		 * changes the password**/
		UART_sendByte(RESET_PASSWORD);
    1722:	8d e2       	ldi	r24, 0x2D	; 45
    1724:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
		APP_getPassword();
    1728:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <APP_getPassword>
		uint8 status = UART_receiveByte();
    172c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_receiveByte>
    1730:	fe 01       	movw	r30, r28
    1732:	eb 5a       	subi	r30, 0xAB	; 171
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	80 83       	st	Z, r24
		if (status == PASSWORD_MATCHED) {
    1738:	fe 01       	movw	r30, r28
    173a:	eb 5a       	subi	r30, 0xAB	; 171
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	8e 3f       	cpi	r24, 0xFE	; 254
    1742:	19 f4       	brne	.+6      	; 0x174a <APP_systemControl+0x470>
			APP_setPassword();
    1744:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_setPassword>
    1748:	8c c1       	rjmp	.+792    	; 0x1a62 <APP_systemControl+0x788>
		} else if (status == PASSWORD_UNMATCHED) {
    174a:	fe 01       	movw	r30, r28
    174c:	eb 5a       	subi	r30, 0xAB	; 171
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	80 81       	ld	r24, Z
    1752:	8d 3f       	cpi	r24, 0xFD	; 253
    1754:	09 f0       	breq	.+2      	; 0x1758 <APP_systemControl+0x47e>
    1756:	79 c0       	rjmp	.+242    	; 0x184a <APP_systemControl+0x570>
			/**if the passwords are not matched tell the user**/
			LCD_clearScreen();
    1758:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    175c:	81 e9       	ldi	r24, 0x91	; 145
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	aa e7       	ldi	r26, 0x7A	; 122
    176a:	b4 e4       	ldi	r27, 0x44	; 68
    176c:	8f a3       	std	Y+39, r24	; 0x27
    176e:	98 a7       	std	Y+40, r25	; 0x28
    1770:	a9 a7       	std	Y+41, r26	; 0x29
    1772:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	6f a1       	ldd	r22, Y+39	; 0x27
    1776:	78 a5       	ldd	r23, Y+40	; 0x28
    1778:	89 a5       	ldd	r24, Y+41	; 0x29
    177a:	9a a5       	ldd	r25, Y+42	; 0x2a
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8b a3       	std	Y+35, r24	; 0x23
    178e:	9c a3       	std	Y+36, r25	; 0x24
    1790:	ad a3       	std	Y+37, r26	; 0x25
    1792:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1794:	6b a1       	ldd	r22, Y+35	; 0x23
    1796:	7c a1       	ldd	r23, Y+36	; 0x24
    1798:	8d a1       	ldd	r24, Y+37	; 0x25
    179a:	9e a1       	ldd	r25, Y+38	; 0x26
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <APP_systemControl+0x4dc>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9a a3       	std	Y+34, r25	; 0x22
    17b2:	89 a3       	std	Y+33, r24	; 0x21
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <APP_systemControl+0x55a>
	else if (__tmp > 65535)
    17b6:	6b a1       	ldd	r22, Y+35	; 0x23
    17b8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ba:	8d a1       	ldd	r24, Y+37	; 0x25
    17bc:	9e a1       	ldd	r25, Y+38	; 0x26
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <APP_systemControl+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	6f a1       	ldd	r22, Y+39	; 0x27
    17d0:	78 a5       	ldd	r23, Y+40	; 0x28
    17d2:	89 a5       	ldd	r24, Y+41	; 0x29
    17d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9a a3       	std	Y+34, r25	; 0x22
    17f4:	89 a3       	std	Y+33, r24	; 0x21
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <APP_systemControl+0x53c>
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	98 a3       	std	Y+32, r25	; 0x20
    17fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1800:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1802:	98 a1       	ldd	r25, Y+32	; 0x20
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <APP_systemControl+0x52a>
    1808:	98 a3       	std	Y+32, r25	; 0x20
    180a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	89 a1       	ldd	r24, Y+33	; 0x21
    180e:	9a a1       	ldd	r25, Y+34	; 0x22
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9a a3       	std	Y+34, r25	; 0x22
    1814:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	89 a1       	ldd	r24, Y+33	; 0x21
    1818:	9a a1       	ldd	r25, Y+34	; 0x22
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <APP_systemControl+0x51e>
    181e:	21 c1       	rjmp	.+578    	; 0x1a62 <APP_systemControl+0x788>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6b a1       	ldd	r22, Y+35	; 0x23
    1822:	7c a1       	ldd	r23, Y+36	; 0x24
    1824:	8d a1       	ldd	r24, Y+37	; 0x25
    1826:	9e a1       	ldd	r25, Y+38	; 0x26
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9a a3       	std	Y+34, r25	; 0x22
    1832:	89 a3       	std	Y+33, r24	; 0x21
    1834:	89 a1       	ldd	r24, Y+33	; 0x21
    1836:	9a a1       	ldd	r25, Y+34	; 0x22
    1838:	9e 8f       	std	Y+30, r25	; 0x1e
    183a:	8d 8f       	std	Y+29, r24	; 0x1d
    183c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    183e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <APP_systemControl+0x566>
    1844:	9e 8f       	std	Y+30, r25	; 0x1e
    1846:	8d 8f       	std	Y+29, r24	; 0x1d
    1848:	0c c1       	rjmp	.+536    	; 0x1a62 <APP_systemControl+0x788>
			_delay_ms(1000);
			return;
		} else if (status == PASSWORD_TRIALS_EXHAUSTED) {
    184a:	fe 01       	movw	r30, r28
    184c:	eb 5a       	subi	r30, 0xAB	; 171
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	8c 3f       	cpi	r24, 0xFC	; 252
    1854:	09 f0       	breq	.+2      	; 0x1858 <APP_systemControl+0x57e>
    1856:	05 c1       	rjmp	.+522    	; 0x1a62 <APP_systemControl+0x788>
			/**if the password trials are exhausted tell the user**/
			LCD_clearScreen();
    1858:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    185c:	81 e9       	ldi	r24, 0x91	; 145
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	aa e7       	ldi	r26, 0x7A	; 122
    186a:	b4 e4       	ldi	r27, 0x44	; 68
    186c:	89 8f       	std	Y+25, r24	; 0x19
    186e:	9a 8f       	std	Y+26, r25	; 0x1a
    1870:	ab 8f       	std	Y+27, r26	; 0x1b
    1872:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1874:	69 8d       	ldd	r22, Y+25	; 0x19
    1876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	4a ef       	ldi	r20, 0xFA	; 250
    1882:	54 e4       	ldi	r21, 0x44	; 68
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	8d 8b       	std	Y+21, r24	; 0x15
    188e:	9e 8b       	std	Y+22, r25	; 0x16
    1890:	af 8b       	std	Y+23, r26	; 0x17
    1892:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1894:	6d 89       	ldd	r22, Y+21	; 0x15
    1896:	7e 89       	ldd	r23, Y+22	; 0x16
    1898:	8f 89       	ldd	r24, Y+23	; 0x17
    189a:	98 8d       	ldd	r25, Y+24	; 0x18
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e8       	ldi	r20, 0x80	; 128
    18a2:	5f e3       	ldi	r21, 0x3F	; 63
    18a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <APP_systemControl+0x5dc>
		__ticks = 1;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9c 8b       	std	Y+20, r25	; 0x14
    18b2:	8b 8b       	std	Y+19, r24	; 0x13
    18b4:	3f c0       	rjmp	.+126    	; 0x1934 <APP_systemControl+0x65a>
	else if (__tmp > 65535)
    18b6:	6d 89       	ldd	r22, Y+21	; 0x15
    18b8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ba:	8f 89       	ldd	r24, Y+23	; 0x17
    18bc:	98 8d       	ldd	r25, Y+24	; 0x18
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4f e7       	ldi	r20, 0x7F	; 127
    18c4:	57 e4       	ldi	r21, 0x47	; 71
    18c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ca:	18 16       	cp	r1, r24
    18cc:	4c f5       	brge	.+82     	; 0x1920 <APP_systemControl+0x646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	69 8d       	ldd	r22, Y+25	; 0x19
    18d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e2       	ldi	r20, 0x20	; 32
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9c 8b       	std	Y+20, r25	; 0x14
    18f4:	8b 8b       	std	Y+19, r24	; 0x13
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <APP_systemControl+0x63c>
    18f8:	88 ec       	ldi	r24, 0xC8	; 200
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	9a 8b       	std	Y+18, r25	; 0x12
    18fe:	89 8b       	std	Y+17, r24	; 0x11
    1900:	89 89       	ldd	r24, Y+17	; 0x11
    1902:	9a 89       	ldd	r25, Y+18	; 0x12
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <APP_systemControl+0x62a>
    1908:	9a 8b       	std	Y+18, r25	; 0x12
    190a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	8b 89       	ldd	r24, Y+19	; 0x13
    190e:	9c 89       	ldd	r25, Y+20	; 0x14
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	9c 8b       	std	Y+20, r25	; 0x14
    1914:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1916:	8b 89       	ldd	r24, Y+19	; 0x13
    1918:	9c 89       	ldd	r25, Y+20	; 0x14
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	69 f7       	brne	.-38     	; 0x18f8 <APP_systemControl+0x61e>
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <APP_systemControl+0x66e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1920:	6d 89       	ldd	r22, Y+21	; 0x15
    1922:	7e 89       	ldd	r23, Y+22	; 0x16
    1924:	8f 89       	ldd	r24, Y+23	; 0x17
    1926:	98 8d       	ldd	r25, Y+24	; 0x18
    1928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9c 8b       	std	Y+20, r25	; 0x14
    1932:	8b 8b       	std	Y+19, r24	; 0x13
    1934:	8b 89       	ldd	r24, Y+19	; 0x13
    1936:	9c 89       	ldd	r25, Y+20	; 0x14
    1938:	98 8b       	std	Y+16, r25	; 0x10
    193a:	8f 87       	std	Y+15, r24	; 0x0f
    193c:	8f 85       	ldd	r24, Y+15	; 0x0f
    193e:	98 89       	ldd	r25, Y+16	; 0x10
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <APP_systemControl+0x666>
    1944:	98 8b       	std	Y+16, r25	; 0x10
    1946:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_clearScreen();
    1948:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
			LCD_displayString("   TRESPASSER");
    194c:	83 e8       	ldi	r24, 0x83	; 131
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
			for (count = 0; count < BUZZER_TIME - 1; count++)
    1954:	fe 01       	movw	r30, r28
    1956:	e8 5a       	subi	r30, 0xA8	; 168
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	10 82       	st	Z, r1
    195c:	7b c0       	rjmp	.+246    	; 0x1a54 <APP_systemControl+0x77a>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	aa e7       	ldi	r26, 0x7A	; 122
    1964:	b4 e4       	ldi	r27, 0x44	; 68
    1966:	8b 87       	std	Y+11, r24	; 0x0b
    1968:	9c 87       	std	Y+12, r25	; 0x0c
    196a:	ad 87       	std	Y+13, r26	; 0x0d
    196c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1970:	7c 85       	ldd	r23, Y+12	; 0x0c
    1972:	8d 85       	ldd	r24, Y+13	; 0x0d
    1974:	9e 85       	ldd	r25, Y+14	; 0x0e
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a ef       	ldi	r20, 0xFA	; 250
    197c:	54 e4       	ldi	r21, 0x44	; 68
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8f 83       	std	Y+7, r24	; 0x07
    1988:	98 87       	std	Y+8, r25	; 0x08
    198a:	a9 87       	std	Y+9, r26	; 0x09
    198c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198e:	6f 81       	ldd	r22, Y+7	; 0x07
    1990:	78 85       	ldd	r23, Y+8	; 0x08
    1992:	89 85       	ldd	r24, Y+9	; 0x09
    1994:	9a 85       	ldd	r25, Y+10	; 0x0a
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <APP_systemControl+0x6d6>
		__ticks = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
    19ae:	3f c0       	rjmp	.+126    	; 0x1a2e <APP_systemControl+0x754>
	else if (__tmp > 65535)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	57 e4       	ldi	r21, 0x47	; 71
    19c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	4c f5       	brge	.+82     	; 0x1a1a <APP_systemControl+0x740>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	0f c0       	rjmp	.+30     	; 0x1a10 <APP_systemControl+0x736>
    19f2:	88 ec       	ldi	r24, 0xC8	; 200
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9c 83       	std	Y+4, r25	; 0x04
    19f8:	8b 83       	std	Y+3, r24	; 0x03
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <APP_systemControl+0x724>
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	69 f7       	brne	.-38     	; 0x19f2 <APP_systemControl+0x718>
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <APP_systemControl+0x768>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <APP_systemControl+0x760>
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	de 01       	movw	r26, r28
    1a44:	a8 5a       	subi	r26, 0xA8	; 168
    1a46:	bf 4f       	sbci	r27, 0xFF	; 255
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e8 5a       	subi	r30, 0xA8	; 168
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 5f       	subi	r24, 0xFF	; 255
    1a52:	8c 93       	st	X, r24
    1a54:	fe 01       	movw	r30, r28
    1a56:	e8 5a       	subi	r30, 0xA8	; 168
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8b 33       	cpi	r24, 0x3B	; 59
    1a5e:	08 f4       	brcc	.+2      	; 0x1a62 <APP_systemControl+0x788>
    1a60:	7e cf       	rjmp	.-260    	; 0x195e <APP_systemControl+0x684>
				_delay_ms(1000);
		}
	}
}
    1a62:	c8 5a       	subi	r28, 0xA8	; 168
    1a64:	df 4f       	sbci	r29, 0xFF	; 255
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	08 95       	ret

00001a7a <APP_getPassword>:
/**This function gets the password from the user then sends it to the other µC
 * that checks it and returns the result**/
void APP_getPassword(void) {
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	2f 97       	sbiw	r28, 0x0f	; 15
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
	/**Print the menu of entering the Pass**/
	uint8 count = 0;
    1a8e:	1f 86       	std	Y+15, r1	; 0x0f
	MENUS_enterPassMenu();
    1a90:	0e 94 3a 18 	call	0x3074	; 0x3074 <MENUS_enterPassMenu>
	for (count = 0; count < 5; count++) {
    1a94:	1f 86       	std	Y+15, r1	; 0x0f
    1a96:	7c c0       	rjmp	.+248    	; 0x1b90 <APP_getPassword+0x116>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a6 e9       	ldi	r26, 0x96	; 150
    1a9e:	b3 e4       	ldi	r27, 0x43	; 67
    1aa0:	8b 87       	std	Y+11, r24	; 0x0b
    1aa2:	9c 87       	std	Y+12, r25	; 0x0c
    1aa4:	ad 87       	std	Y+13, r26	; 0x0d
    1aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8f 83       	std	Y+7, r24	; 0x07
    1ac2:	98 87       	std	Y+8, r25	; 0x08
    1ac4:	a9 87       	std	Y+9, r26	; 0x09
    1ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <APP_getPassword+0x70>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <APP_getPassword+0xee>
	else if (__tmp > 65535)
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <APP_getPassword+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <APP_getPassword+0xd0>
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	8b 83       	std	Y+3, r24	; 0x03
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <APP_getPassword+0xbe>
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <APP_getPassword+0xb2>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <APP_getPassword+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <APP_getPassword+0xfa>
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
		/**get the user input and send it to the other µC**/
		_delay_ms(KEYPAD_DELAY);
		UART_sendByte(KEYPAD_getPressedKey());
    1b7c:	0e 94 83 11 	call	0x2306	; 0x2306 <KEYPAD_getPressedKey>
    1b80:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
		LCD_displayCharacter('*');
    1b84:	8a e2       	ldi	r24, 0x2A	; 42
    1b86:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_displayCharacter>
 * that checks it and returns the result**/
void APP_getPassword(void) {
	/**Print the menu of entering the Pass**/
	uint8 count = 0;
	MENUS_enterPassMenu();
	for (count = 0; count < 5; count++) {
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	85 30       	cpi	r24, 0x05	; 5
    1b94:	08 f4       	brcc	.+2      	; 0x1b98 <APP_getPassword+0x11e>
    1b96:	80 cf       	rjmp	.-256    	; 0x1a98 <APP_getPassword+0x1e>
		_delay_ms(KEYPAD_DELAY);
		UART_sendByte(KEYPAD_getPressedKey());
		LCD_displayCharacter('*');
	}
	/**wait for the user to press enter**/
	while (KEYPAD_getPressedKey() != ENTER_KEY)
    1b98:	0e 94 83 11 	call	0x2306	; 0x2306 <KEYPAD_getPressedKey>
    1b9c:	80 32       	cpi	r24, 0x20	; 32
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <APP_getPassword+0x11e>
		;
	/**Sending the Enter key to the other µC**/
	UART_sendByte(' ');
    1ba0:	80 e2       	ldi	r24, 0x20	; 32
    1ba2:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
}
    1ba6:	2f 96       	adiw	r28, 0x0f	; 15
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <APP_displayDoorUnlocking>:
void APP_displayDoorUnlocking(void) {
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1bc0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
	LCD_displayString("Door is Unlocking");
    1bc4:	80 ea       	ldi	r24, 0xA0	; 160
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
	Timer1_countSeconds(OPEN_DOOR_TIME);
    1bcc:	8f e0       	ldi	r24, 0x0F	; 15
    1bce:	0e 94 11 19 	call	0x3222	; 0x3222 <Timer1_countSeconds>
	Timer1_setCallBack(APP_displayDoorUnlocked);
    1bd2:	80 ef       	ldi	r24, 0xF0	; 240
    1bd4:	9d e0       	ldi	r25, 0x0D	; 13
    1bd6:	0e 94 05 1a 	call	0x340a	; 0x340a <Timer1_setCallBack>
}
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <APP_displayDoorUnlocked>:
void APP_displayDoorUnlocked(void) {
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1be8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
	LCD_displayString("Door is Unlocked");
    1bec:	82 eb       	ldi	r24, 0xB2	; 178
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
	Timer1_countSeconds(HOLD_DOOR_TIME);
    1bf4:	83 e0       	ldi	r24, 0x03	; 3
    1bf6:	0e 94 11 19 	call	0x3222	; 0x3222 <Timer1_countSeconds>
	Timer1_setCallBack(APP_displayDoorLocking);
    1bfa:	84 e0       	ldi	r24, 0x04	; 4
    1bfc:	9e e0       	ldi	r25, 0x0E	; 14
    1bfe:	0e 94 05 1a 	call	0x340a	; 0x340a <Timer1_setCallBack>
}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <APP_displayDoorLocking>:
void APP_displayDoorLocking(void) {
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1c10:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
	LCD_displayString("Door is Locking");
    1c14:	83 ec       	ldi	r24, 0xC3	; 195
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
	Timer1_countSeconds(CLOSE_DOOR_TIME);
    1c1c:	8f e0       	ldi	r24, 0x0F	; 15
    1c1e:	0e 94 11 19 	call	0x3222	; 0x3222 <Timer1_countSeconds>
	Timer1_setCallBack(APP_displayDoorComplete);
    1c22:	88 e1       	ldi	r24, 0x18	; 24
    1c24:	9e e0       	ldi	r25, 0x0E	; 14
    1c26:	0e 94 05 1a 	call	0x340a	; 0x340a <Timer1_setCallBack>
}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <APP_displayDoorComplete>:
void APP_displayDoorComplete(void) {
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
	doordisplaycompleteflag = 0;
    1c38:	10 92 39 01 	sts	0x0139, r1
}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <GPIO_setupPinDirection>:
#include"gpio.h"
#include"common_macros.h"
#include "avr/io.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <GPIO_setupPinDirection+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <GPIO_setupPinDirection+0x8>
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	6a 83       	std	Y+2, r22	; 0x02
    1c54:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	84 30       	cpi	r24, 0x04	; 4
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <GPIO_setupPinDirection+0x1c>
    1c5c:	d5 c0       	rjmp	.+426    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	88 30       	cpi	r24, 0x08	; 8
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <GPIO_setupPinDirection+0x24>
    1c64:	d1 c0       	rjmp	.+418    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
		return;
	} else {
		switch (port_num) {
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3d 83       	std	Y+5, r19	; 0x05
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <GPIO_setupPinDirection+0x3a>
    1c7a:	43 c0       	rjmp	.+134    	; 0x1d02 <GPIO_setupPinDirection+0xc0>
    1c7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <GPIO_setupPinDirection+0x4e>
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	71 f0       	breq	.+28     	; 0x1caa <GPIO_setupPinDirection+0x68>
    1c8e:	bc c0       	rjmp	.+376    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <GPIO_setupPinDirection+0x5a>
    1c9a:	5f c0       	rjmp	.+190    	; 0x1d5a <GPIO_setupPinDirection+0x118>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_setupPinDirection+0x66>
    1ca6:	85 c0       	rjmp	.+266    	; 0x1db2 <GPIO_setupPinDirection+0x170>
    1ca8:	af c0       	rjmp	.+350    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_INPUT) {
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	88 23       	and	r24, r24
    1cae:	a9 f4       	brne	.+42     	; 0x1cda <GPIO_setupPinDirection+0x98>
				CLEAR_BIT(DDRA, pin_num);
    1cb0:	aa e3       	ldi	r26, 0x3A	; 58
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ea e3       	ldi	r30, 0x3A	; 58
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_setupPinDirection+0x8c>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_setupPinDirection+0x88>
    1cd2:	80 95       	com	r24
    1cd4:	84 23       	and	r24, r20
    1cd6:	8c 93       	st	X, r24
    1cd8:	97 c0       	rjmp	.+302    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRA, pin_num);
    1cda:	aa e3       	ldi	r26, 0x3A	; 58
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	ea e3       	ldi	r30, 0x3A	; 58
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <GPIO_setupPinDirection+0xb6>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <GPIO_setupPinDirection+0xb2>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	83 c0       	rjmp	.+262    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_INPUT) {
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	88 23       	and	r24, r24
    1d06:	a9 f4       	brne	.+42     	; 0x1d32 <GPIO_setupPinDirection+0xf0>
				CLEAR_BIT(DDRB, pin_num);
    1d08:	a7 e3       	ldi	r26, 0x37	; 55
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e7 e3       	ldi	r30, 0x37	; 55
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <GPIO_setupPinDirection+0xe4>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <GPIO_setupPinDirection+0xe0>
    1d2a:	80 95       	com	r24
    1d2c:	84 23       	and	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	6b c0       	rjmp	.+214    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRB, pin_num);
    1d32:	a7 e3       	ldi	r26, 0x37	; 55
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e7 e3       	ldi	r30, 0x37	; 55
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <GPIO_setupPinDirection+0x10e>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <GPIO_setupPinDirection+0x10a>
    1d54:	84 2b       	or	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	57 c0       	rjmp	.+174    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_INPUT) {
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	88 23       	and	r24, r24
    1d5e:	a9 f4       	brne	.+42     	; 0x1d8a <GPIO_setupPinDirection+0x148>
				CLEAR_BIT(DDRC, pin_num);
    1d60:	a4 e3       	ldi	r26, 0x34	; 52
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e4 e3       	ldi	r30, 0x34	; 52
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <GPIO_setupPinDirection+0x13c>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <GPIO_setupPinDirection+0x138>
    1d82:	80 95       	com	r24
    1d84:	84 23       	and	r24, r20
    1d86:	8c 93       	st	X, r24
    1d88:	3f c0       	rjmp	.+126    	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRC, pin_num);
    1d8a:	a4 e3       	ldi	r26, 0x34	; 52
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e4 e3       	ldi	r30, 0x34	; 52
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <GPIO_setupPinDirection+0x166>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <GPIO_setupPinDirection+0x162>
    1dac:	84 2b       	or	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	2b c0       	rjmp	.+86     	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_INPUT) {
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	88 23       	and	r24, r24
    1db6:	a9 f4       	brne	.+42     	; 0x1de2 <GPIO_setupPinDirection+0x1a0>
				CLEAR_BIT(DDRD, pin_num);
    1db8:	a1 e3       	ldi	r26, 0x31	; 49
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e1 e3       	ldi	r30, 0x31	; 49
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <GPIO_setupPinDirection+0x194>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <GPIO_setupPinDirection+0x190>
    1dda:	80 95       	com	r24
    1ddc:	84 23       	and	r24, r20
    1dde:	8c 93       	st	X, r24
    1de0:	13 c0       	rjmp	.+38     	; 0x1e08 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRD, pin_num);
    1de2:	a1 e3       	ldi	r26, 0x31	; 49
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e1 e3       	ldi	r30, 0x31	; 49
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <GPIO_setupPinDirection+0x1be>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <GPIO_setupPinDirection+0x1ba>
    1e04:	84 2b       	or	r24, r20
    1e06:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <GPIO_setupPortDirection>:
void GPIO_setupPortDirection(uint8 port_num, GPIO_PinDirectionType direction) {
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_setupPortDirection+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_setupPortDirection+0x8>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	84 30       	cpi	r24, 0x04	; 4
    1e2c:	90 f5       	brcc	.+100    	; 0x1e92 <GPIO_setupPortDirection+0x7a>
		return;

	} else {
		switch (port_num) {
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	3c 83       	std	Y+4, r19	; 0x04
    1e36:	2b 83       	std	Y+3, r18	; 0x03
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	d1 f0       	breq	.+52     	; 0x1e76 <GPIO_setupPortDirection+0x5e>
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	22 30       	cpi	r18, 0x02	; 2
    1e48:	31 05       	cpc	r19, r1
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <GPIO_setupPortDirection+0x3e>
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	61 f0       	breq	.+24     	; 0x1e6c <GPIO_setupPortDirection+0x54>
    1e54:	1e c0       	rjmp	.+60     	; 0x1e92 <GPIO_setupPortDirection+0x7a>
    1e56:	2b 81       	ldd	r18, Y+3	; 0x03
    1e58:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5a:	22 30       	cpi	r18, 0x02	; 2
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	81 f0       	breq	.+32     	; 0x1e80 <GPIO_setupPortDirection+0x68>
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	83 30       	cpi	r24, 0x03	; 3
    1e66:	91 05       	cpc	r25, r1
    1e68:	81 f0       	breq	.+32     	; 0x1e8a <GPIO_setupPortDirection+0x72>
    1e6a:	13 c0       	rjmp	.+38     	; 0x1e92 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1e6c:	ea e3       	ldi	r30, 0x3A	; 58
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	80 83       	st	Z, r24
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e76:	e7 e3       	ldi	r30, 0x37	; 55
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	80 83       	st	Z, r24
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e80:	e4 e3       	ldi	r30, 0x34	; 52
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	80 83       	st	Z, r24
    1e88:	04 c0       	rjmp	.+8      	; 0x1e92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e8a:	e1 e3       	ldi	r30, 0x31	; 49
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <GPIO_writePin+0x6>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <GPIO_writePin+0x8>
    1ea8:	0f 92       	push	r0
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	6a 83       	std	Y+2, r22	; 0x02
    1eb2:	4b 83       	std	Y+3, r20	; 0x03
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	84 30       	cpi	r24, 0x04	; 4
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <GPIO_writePin+0x1c>
    1eba:	d5 c0       	rjmp	.+426    	; 0x2066 <GPIO_writePin+0x1c6>
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	88 30       	cpi	r24, 0x08	; 8
    1ec0:	08 f0       	brcs	.+2      	; 0x1ec4 <GPIO_writePin+0x24>
    1ec2:	d1 c0       	rjmp	.+418    	; 0x2066 <GPIO_writePin+0x1c6>
		return;
	} else {
		switch (port_num) {
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3d 83       	std	Y+5, r19	; 0x05
    1ecc:	2c 83       	std	Y+4, r18	; 0x04
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <GPIO_writePin+0x3a>
    1ed8:	43 c0       	rjmp	.+134    	; 0x1f60 <GPIO_writePin+0xc0>
    1eda:	2c 81       	ldd	r18, Y+4	; 0x04
    1edc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ede:	22 30       	cpi	r18, 0x02	; 2
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <GPIO_writePin+0x4e>
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	71 f0       	breq	.+28     	; 0x1f08 <GPIO_writePin+0x68>
    1eec:	bc c0       	rjmp	.+376    	; 0x2066 <GPIO_writePin+0x1c6>
    1eee:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef2:	22 30       	cpi	r18, 0x02	; 2
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <GPIO_writePin+0x5a>
    1ef8:	5f c0       	rjmp	.+190    	; 0x1fb8 <GPIO_writePin+0x118>
    1efa:	8c 81       	ldd	r24, Y+4	; 0x04
    1efc:	9d 81       	ldd	r25, Y+5	; 0x05
    1efe:	83 30       	cpi	r24, 0x03	; 3
    1f00:	91 05       	cpc	r25, r1
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <GPIO_writePin+0x66>
    1f04:	85 c0       	rjmp	.+266    	; 0x2010 <GPIO_writePin+0x170>
    1f06:	af c0       	rjmp	.+350    	; 0x2066 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_LOW) {
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	88 23       	and	r24, r24
    1f0c:	a9 f4       	brne	.+42     	; 0x1f38 <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA, pin_num);
    1f0e:	ab e3       	ldi	r26, 0x3B	; 59
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	eb e3       	ldi	r30, 0x3B	; 59
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	48 2f       	mov	r20, r24
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 2e       	mov	r0, r18
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <GPIO_writePin+0x8c>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <GPIO_writePin+0x88>
    1f30:	80 95       	com	r24
    1f32:	84 23       	and	r24, r20
    1f34:	8c 93       	st	X, r24
    1f36:	97 c0       	rjmp	.+302    	; 0x2066 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTA, pin_num);
    1f38:	ab e3       	ldi	r26, 0x3B	; 59
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	eb e3       	ldi	r30, 0x3B	; 59
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <GPIO_writePin+0xb6>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <GPIO_writePin+0xb2>
    1f5a:	84 2b       	or	r24, r20
    1f5c:	8c 93       	st	X, r24
    1f5e:	83 c0       	rjmp	.+262    	; 0x2066 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW) {
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	88 23       	and	r24, r24
    1f64:	a9 f4       	brne	.+42     	; 0x1f90 <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB, pin_num);
    1f66:	a8 e3       	ldi	r26, 0x38	; 56
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e8 e3       	ldi	r30, 0x38	; 56
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	48 2f       	mov	r20, r24
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	02 2e       	mov	r0, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <GPIO_writePin+0xe4>
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	0a 94       	dec	r0
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <GPIO_writePin+0xe0>
    1f88:	80 95       	com	r24
    1f8a:	84 23       	and	r24, r20
    1f8c:	8c 93       	st	X, r24
    1f8e:	6b c0       	rjmp	.+214    	; 0x2066 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTB, pin_num);
    1f90:	a8 e3       	ldi	r26, 0x38	; 56
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e8 e3       	ldi	r30, 0x38	; 56
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	48 2f       	mov	r20, r24
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 2e       	mov	r0, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <GPIO_writePin+0x10e>
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	0a 94       	dec	r0
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <GPIO_writePin+0x10a>
    1fb2:	84 2b       	or	r24, r20
    1fb4:	8c 93       	st	X, r24
    1fb6:	57 c0       	rjmp	.+174    	; 0x2066 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW) {
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	88 23       	and	r24, r24
    1fbc:	a9 f4       	brne	.+42     	; 0x1fe8 <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC, pin_num);
    1fbe:	a5 e3       	ldi	r26, 0x35	; 53
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e5 e3       	ldi	r30, 0x35	; 53
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	48 2f       	mov	r20, r24
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	02 2e       	mov	r0, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <GPIO_writePin+0x13c>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <GPIO_writePin+0x138>
    1fe0:	80 95       	com	r24
    1fe2:	84 23       	and	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTC, pin_num);
    1fe8:	a5 e3       	ldi	r26, 0x35	; 53
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e5 e3       	ldi	r30, 0x35	; 53
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <GPIO_writePin+0x166>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <GPIO_writePin+0x162>
    200a:	84 2b       	or	r24, r20
    200c:	8c 93       	st	X, r24
    200e:	2b c0       	rjmp	.+86     	; 0x2066 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW) {
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	88 23       	and	r24, r24
    2014:	a9 f4       	brne	.+42     	; 0x2040 <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD, pin_num);
    2016:	a2 e3       	ldi	r26, 0x32	; 50
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e2 e3       	ldi	r30, 0x32	; 50
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	48 2f       	mov	r20, r24
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	02 2e       	mov	r0, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <GPIO_writePin+0x194>
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	0a 94       	dec	r0
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <GPIO_writePin+0x190>
    2038:	80 95       	com	r24
    203a:	84 23       	and	r24, r20
    203c:	8c 93       	st	X, r24
    203e:	13 c0       	rjmp	.+38     	; 0x2066 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTD, pin_num);
    2040:	a2 e3       	ldi	r26, 0x32	; 50
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e2 e3       	ldi	r30, 0x32	; 50
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	48 2f       	mov	r20, r24
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	02 2e       	mov	r0, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <GPIO_writePin+0x1be>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	0a 94       	dec	r0
    2060:	e2 f7       	brpl	.-8      	; 0x205a <GPIO_writePin+0x1ba>
    2062:	84 2b       	or	r24, r20
    2064:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value) {
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <GPIO_writePort+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <GPIO_writePort+0x8>
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	84 30       	cpi	r24, 0x04	; 4
    208a:	90 f5       	brcc	.+100    	; 0x20f0 <GPIO_writePort+0x7a>
		return;
	} else {
		switch (port_num) {
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	3c 83       	std	Y+4, r19	; 0x04
    2094:	2b 83       	std	Y+3, r18	; 0x03
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	91 05       	cpc	r25, r1
    209e:	d1 f0       	breq	.+52     	; 0x20d4 <GPIO_writePort+0x5e>
    20a0:	2b 81       	ldd	r18, Y+3	; 0x03
    20a2:	3c 81       	ldd	r19, Y+4	; 0x04
    20a4:	22 30       	cpi	r18, 0x02	; 2
    20a6:	31 05       	cpc	r19, r1
    20a8:	2c f4       	brge	.+10     	; 0x20b4 <GPIO_writePort+0x3e>
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	61 f0       	breq	.+24     	; 0x20ca <GPIO_writePort+0x54>
    20b2:	1e c0       	rjmp	.+60     	; 0x20f0 <GPIO_writePort+0x7a>
    20b4:	2b 81       	ldd	r18, Y+3	; 0x03
    20b6:	3c 81       	ldd	r19, Y+4	; 0x04
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	81 f0       	breq	.+32     	; 0x20de <GPIO_writePort+0x68>
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	91 05       	cpc	r25, r1
    20c6:	81 f0       	breq	.+32     	; 0x20e8 <GPIO_writePort+0x72>
    20c8:	13 c0       	rjmp	.+38     	; 0x20f0 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    20ca:	eb e3       	ldi	r30, 0x3B	; 59
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	80 83       	st	Z, r24
    20d2:	0e c0       	rjmp	.+28     	; 0x20f0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    20d4:	e8 e3       	ldi	r30, 0x38	; 56
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	80 83       	st	Z, r24
    20dc:	09 c0       	rjmp	.+18     	; 0x20f0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    20de:	e5 e3       	ldi	r30, 0x35	; 53
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	80 83       	st	Z, r24
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    20e8:	e2 e3       	ldi	r30, 0x32	; 50
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <GPIO_readPin+0x6>
    2104:	00 d0       	rcall	.+0      	; 0x2106 <GPIO_readPin+0x8>
    2106:	00 d0       	rcall	.+0      	; 0x2108 <GPIO_readPin+0xa>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	8a 83       	std	Y+2, r24	; 0x02
    210e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result = 0;
    2110:	19 82       	std	Y+1, r1	; 0x01
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT)) {
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	84 30       	cpi	r24, 0x04	; 4
    2116:	18 f4       	brcc	.+6      	; 0x211e <GPIO_readPin+0x20>
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	88 30       	cpi	r24, 0x08	; 8
    211c:	18 f0       	brcs	.+6      	; 0x2124 <GPIO_readPin+0x26>
		return result;
    211e:	29 81       	ldd	r18, Y+1	; 0x01
    2120:	2e 83       	std	Y+6, r18	; 0x06
    2122:	9b c0       	rjmp	.+310    	; 0x225a <GPIO_readPin+0x15c>
	}
	switch (port_num) {
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	48 2f       	mov	r20, r24
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	5d 83       	std	Y+5, r21	; 0x05
    212c:	4c 83       	std	Y+4, r20	; 0x04
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	9d 81       	ldd	r25, Y+5	; 0x05
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	91 05       	cpc	r25, r1
    2136:	b1 f1       	breq	.+108    	; 0x21a4 <GPIO_readPin+0xa6>
    2138:	2c 81       	ldd	r18, Y+4	; 0x04
    213a:	3d 81       	ldd	r19, Y+5	; 0x05
    213c:	22 30       	cpi	r18, 0x02	; 2
    213e:	31 05       	cpc	r19, r1
    2140:	34 f4       	brge	.+12     	; 0x214e <GPIO_readPin+0x50>
    2142:	4c 81       	ldd	r20, Y+4	; 0x04
    2144:	5d 81       	ldd	r21, Y+5	; 0x05
    2146:	41 15       	cp	r20, r1
    2148:	51 05       	cpc	r21, r1
    214a:	71 f0       	breq	.+28     	; 0x2168 <GPIO_readPin+0x6a>
    214c:	84 c0       	rjmp	.+264    	; 0x2256 <GPIO_readPin+0x158>
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    2152:	82 30       	cpi	r24, 0x02	; 2
    2154:	91 05       	cpc	r25, r1
    2156:	09 f4       	brne	.+2      	; 0x215a <GPIO_readPin+0x5c>
    2158:	43 c0       	rjmp	.+134    	; 0x21e0 <GPIO_readPin+0xe2>
    215a:	2c 81       	ldd	r18, Y+4	; 0x04
    215c:	3d 81       	ldd	r19, Y+5	; 0x05
    215e:	23 30       	cpi	r18, 0x03	; 3
    2160:	31 05       	cpc	r19, r1
    2162:	09 f4       	brne	.+2      	; 0x2166 <GPIO_readPin+0x68>
    2164:	5b c0       	rjmp	.+182    	; 0x221c <GPIO_readPin+0x11e>
    2166:	77 c0       	rjmp	.+238    	; 0x2256 <GPIO_readPin+0x158>
	case PORTA_ID:
		result = GET_BIT(PINA, pin_num);
    2168:	e9 e3       	ldi	r30, 0x39	; 57
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <GPIO_readPin+0x84>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	2a 95       	dec	r18
    2184:	e2 f7       	brpl	.-8      	; 0x217e <GPIO_readPin+0x80>
    2186:	9a 01       	movw	r18, r20
    2188:	28 23       	and	r18, r24
    218a:	39 23       	and	r19, r25
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a9 01       	movw	r20, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <GPIO_readPin+0x9c>
    2196:	55 95       	asr	r21
    2198:	47 95       	ror	r20
    219a:	8a 95       	dec	r24
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <GPIO_readPin+0x98>
    219e:	ca 01       	movw	r24, r20
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	59 c0       	rjmp	.+178    	; 0x2256 <GPIO_readPin+0x158>
		break;
	case PORTB_ID:
		result = GET_BIT(PINB, pin_num);
    21a4:	e6 e3       	ldi	r30, 0x36	; 54
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	48 2f       	mov	r20, r24
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <GPIO_readPin+0xc0>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	2a 95       	dec	r18
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <GPIO_readPin+0xbc>
    21c2:	9a 01       	movw	r18, r20
    21c4:	28 23       	and	r18, r24
    21c6:	39 23       	and	r19, r25
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	a9 01       	movw	r20, r18
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <GPIO_readPin+0xd8>
    21d2:	55 95       	asr	r21
    21d4:	47 95       	ror	r20
    21d6:	8a 95       	dec	r24
    21d8:	e2 f7       	brpl	.-8      	; 0x21d2 <GPIO_readPin+0xd4>
    21da:	ca 01       	movw	r24, r20
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	3b c0       	rjmp	.+118    	; 0x2256 <GPIO_readPin+0x158>
		break;
	case PORTC_ID:
		result = GET_BIT(PINC, pin_num);
    21e0:	e3 e3       	ldi	r30, 0x33	; 51
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	48 2f       	mov	r20, r24
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <GPIO_readPin+0xfc>
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	2a 95       	dec	r18
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <GPIO_readPin+0xf8>
    21fe:	9a 01       	movw	r18, r20
    2200:	28 23       	and	r18, r24
    2202:	39 23       	and	r19, r25
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a9 01       	movw	r20, r18
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <GPIO_readPin+0x114>
    220e:	55 95       	asr	r21
    2210:	47 95       	ror	r20
    2212:	8a 95       	dec	r24
    2214:	e2 f7       	brpl	.-8      	; 0x220e <GPIO_readPin+0x110>
    2216:	ca 01       	movw	r24, r20
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	1d c0       	rjmp	.+58     	; 0x2256 <GPIO_readPin+0x158>
		break;
	case PORTD_ID:
		result = GET_BIT(PIND, pin_num);
    221c:	e0 e3       	ldi	r30, 0x30	; 48
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	48 2f       	mov	r20, r24
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <GPIO_readPin+0x138>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	2a 95       	dec	r18
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <GPIO_readPin+0x134>
    223a:	9a 01       	movw	r18, r20
    223c:	28 23       	and	r18, r24
    223e:	39 23       	and	r19, r25
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a9 01       	movw	r20, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <GPIO_readPin+0x150>
    224a:	55 95       	asr	r21
    224c:	47 95       	ror	r20
    224e:	8a 95       	dec	r24
    2250:	e2 f7       	brpl	.-8      	; 0x224a <GPIO_readPin+0x14c>
    2252:	ca 01       	movw	r24, r20
    2254:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return result;
    2256:	59 81       	ldd	r21, Y+1	; 0x01
    2258:	5e 83       	std	Y+6, r21	; 0x06
    225a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    225c:	26 96       	adiw	r28, 0x06	; 6
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num) {
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <GPIO_readPort+0x6>
    2274:	00 d0       	rcall	.+0      	; 0x2276 <GPIO_readPort+0x8>
    2276:	0f 92       	push	r0
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 result = 0;
    227e:	19 82       	std	Y+1, r1	; 0x01
	if ((port_num >= NUM_OF_PORTS)) {
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	18 f0       	brcs	.+6      	; 0x228c <GPIO_readPort+0x1e>
		return result;
    2286:	29 81       	ldd	r18, Y+1	; 0x01
    2288:	2d 83       	std	Y+5, r18	; 0x05
    228a:	34 c0       	rjmp	.+104    	; 0x22f4 <GPIO_readPort+0x86>
	}
	switch (port_num) {
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3c 83       	std	Y+4, r19	; 0x04
    2294:	2b 83       	std	Y+3, r18	; 0x03
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	91 05       	cpc	r25, r1
    229e:	d1 f0       	breq	.+52     	; 0x22d4 <GPIO_readPort+0x66>
    22a0:	2b 81       	ldd	r18, Y+3	; 0x03
    22a2:	3c 81       	ldd	r19, Y+4	; 0x04
    22a4:	22 30       	cpi	r18, 0x02	; 2
    22a6:	31 05       	cpc	r19, r1
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <GPIO_readPort+0x46>
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	61 f0       	breq	.+24     	; 0x22ca <GPIO_readPort+0x5c>
    22b2:	1e c0       	rjmp	.+60     	; 0x22f0 <GPIO_readPort+0x82>
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	81 f0       	breq	.+32     	; 0x22de <GPIO_readPort+0x70>
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	83 30       	cpi	r24, 0x03	; 3
    22c4:	91 05       	cpc	r25, r1
    22c6:	81 f0       	breq	.+32     	; 0x22e8 <GPIO_readPort+0x7a>
    22c8:	13 c0       	rjmp	.+38     	; 0x22f0 <GPIO_readPort+0x82>
	case PORTA_ID:
		result = PINA;
    22ca:	e9 e3       	ldi	r30, 0x39	; 57
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	0e c0       	rjmp	.+28     	; 0x22f0 <GPIO_readPort+0x82>
		break;
	case PORTB_ID:
		result = PINB;
    22d4:	e6 e3       	ldi	r30, 0x36	; 54
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	09 c0       	rjmp	.+18     	; 0x22f0 <GPIO_readPort+0x82>
		break;
	case PORTC_ID:
		result = PINC;
    22de:	e3 e3       	ldi	r30, 0x33	; 51
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	04 c0       	rjmp	.+8      	; 0x22f0 <GPIO_readPort+0x82>
		break;
	case PORTD_ID:
		result = PIND;
    22e8:	e0 e3       	ldi	r30, 0x30	; 48
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return result;
    22f0:	99 81       	ldd	r25, Y+1	; 0x01
    22f2:	9d 83       	std	Y+5, r25	; 0x05
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <KEYPAD_getPressedKey>:
#if(NUM_OF_COLS==3)
static uint8 KEYPAD_4x3__adjustKeyNumber(uint8);
#endif
#endif
#ifndef	NOT_POLLING
uint8 KEYPAD_getPressedKey(void) {
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <KEYPAD_getPressedKey+0x6>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	/**Setting all ROW&COL pins as inputs**/
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID,PIN_INPUT);
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + 1,PIN_INPUT);
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	61 e0       	ldi	r22, 0x01	; 1
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + 2,PIN_INPUT);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	62 e0       	ldi	r22, 0x02	; 2
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + 3,PIN_INPUT);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	63 e0       	ldi	r22, 0x03	; 3
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID,PIN_INPUT);
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	64 e0       	ldi	r22, 0x04	; 4
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID + 1,PIN_INPUT);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	65 e0       	ldi	r22, 0x05	; 5
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID + 2,PIN_INPUT);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	66 e0       	ldi	r22, 0x06	; 6
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	/**Enabling the fourth column if and only if the Number of columns is 4**/
#if (NUM_OF_COLS==4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID + 3,PIN_INPUT);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	67 e0       	ldi	r22, 0x07	; 7
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>

	/**Polling until the user presses a key**/
	while (1) {
		/**Scanning over each Column, setting it as output and writing the
		 *  BUTTON_IS_PRESSED on it to detect the activated column**/
		for (row = 0; row < NUM_OF_ROWS; row++) {
    2360:	1a 82       	std	Y+2, r1	; 0x02
    2362:	3a c0       	rjmp	.+116    	; 0x23d8 <KEYPAD_getPressedKey+0xd2>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_ROW_FIRST_PIN_ID + row, PIN_OUTPUT);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	6a 81       	ldd	r22, Y+2	; 0x02
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + row,BUTTON_IS_PRESSED);
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	6a 81       	ldd	r22, Y+2	; 0x02
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <GPIO_writePin>
			/**Scanning over each column and reading the value of the pressed Key
			 * if it corresponds to BUTTON_IS_PRESSED the value of this button is returned**/
			for (col = 0; col < NUM_OF_COLS; col++) {
    2378:	19 82       	std	Y+1, r1	; 0x01
    237a:	23 c0       	rjmp	.+70     	; 0x23c2 <KEYPAD_getPressedKey+0xbc>
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_COL_FIRST_PIN_ID + col) == BUTTON_IS_PRESSED) {
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	98 2f       	mov	r25, r24
    2380:	9c 5f       	subi	r25, 0xFC	; 252
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	69 2f       	mov	r22, r25
    2386:	0e 94 7f 10 	call	0x20fe	; 0x20fe <GPIO_readPin>
    238a:	88 23       	and	r24, r24
    238c:	b9 f4       	brne	.+46     	; 0x23bc <KEYPAD_getPressedKey+0xb6>
					GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + row,BUTTON_IS_RELEASED);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	6a 81       	ldd	r22, Y+2	; 0x02
    2392:	41 e0       	ldi	r20, 0x01	; 1
    2394:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <GPIO_writePin>
					#ifdef STANDARD_KEYPAD
					return ((row * NUM_OF_COLS) + col + 1);

					#else
						#if(NUM_OF_COLS==4)
							return (KEYPAD_4x4__adjustKeyNumber((row * NUM_OF_COLS) + col + 1));
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	98 2f       	mov	r25, r24
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	89 0f       	add	r24, r25
    23ac:	8f 5f       	subi	r24, 0xFF	; 255
    23ae:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <KEYPAD_4x4__adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_ROW_FIRST_PIN_ID + row, PIN_INPUT);
		}
	}
}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret
		for (row = 0; row < NUM_OF_ROWS; row++) {
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_ROW_FIRST_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID + row,BUTTON_IS_PRESSED);
			/**Scanning over each column and reading the value of the pressed Key
			 * if it corresponds to BUTTON_IS_PRESSED the value of this button is returned**/
			for (col = 0; col < NUM_OF_COLS; col++) {
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	8f 5f       	subi	r24, 0xFF	; 255
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	84 30       	cpi	r24, 0x04	; 4
    23c6:	d0 f2       	brcs	.-76     	; 0x237c <KEYPAD_getPressedKey+0x76>

						#endif
						#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_ROW_FIRST_PIN_ID + row, PIN_INPUT);
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	6a 81       	ldd	r22, Y+2	; 0x02
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>

	/**Polling until the user presses a key**/
	while (1) {
		/**Scanning over each Column, setting it as output and writing the
		 *  BUTTON_IS_PRESSED on it to detect the activated column**/
		for (row = 0; row < NUM_OF_ROWS; row++) {
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	8a 83       	std	Y+2, r24	; 0x02
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	84 30       	cpi	r24, 0x04	; 4
    23dc:	18 f2       	brcs	.-122    	; 0x2364 <KEYPAD_getPressedKey+0x5e>
    23de:	c0 cf       	rjmp	.-128    	; 0x2360 <KEYPAD_getPressedKey+0x5a>

000023e0 <KEYPAD_4x4__adjustKeyNumber>:
}
#endif

#ifndef STANDARD_KEYPAD
#if(NUM_OF_COLS==4)
static uint8 KEYPAD_4x4__adjustKeyNumber(uint8 button_number) {
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <KEYPAD_4x4__adjustKeyNumber+0x6>
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <KEYPAD_4x4__adjustKeyNumber+0x8>
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	89 83       	std	Y+1, r24	; 0x01

	switch (button_number) {
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	3c 83       	std	Y+4, r19	; 0x04
    23f6:	2b 83       	std	Y+3, r18	; 0x03
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	88 30       	cpi	r24, 0x08	; 8
    23fe:	91 05       	cpc	r25, r1
    2400:	09 f4       	brne	.+2      	; 0x2404 <KEYPAD_4x4__adjustKeyNumber+0x24>
    2402:	70 c0       	rjmp	.+224    	; 0x24e4 <KEYPAD_4x4__adjustKeyNumber+0x104>
    2404:	2b 81       	ldd	r18, Y+3	; 0x03
    2406:	3c 81       	ldd	r19, Y+4	; 0x04
    2408:	29 30       	cpi	r18, 0x09	; 9
    240a:	31 05       	cpc	r19, r1
    240c:	5c f5       	brge	.+86     	; 0x2464 <KEYPAD_4x4__adjustKeyNumber+0x84>
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	84 30       	cpi	r24, 0x04	; 4
    2414:	91 05       	cpc	r25, r1
    2416:	09 f4       	brne	.+2      	; 0x241a <KEYPAD_4x4__adjustKeyNumber+0x3a>
    2418:	59 c0       	rjmp	.+178    	; 0x24cc <KEYPAD_4x4__adjustKeyNumber+0xec>
    241a:	2b 81       	ldd	r18, Y+3	; 0x03
    241c:	3c 81       	ldd	r19, Y+4	; 0x04
    241e:	25 30       	cpi	r18, 0x05	; 5
    2420:	31 05       	cpc	r19, r1
    2422:	9c f4       	brge	.+38     	; 0x244a <KEYPAD_4x4__adjustKeyNumber+0x6a>
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	82 30       	cpi	r24, 0x02	; 2
    242a:	91 05       	cpc	r25, r1
    242c:	09 f4       	brne	.+2      	; 0x2430 <KEYPAD_4x4__adjustKeyNumber+0x50>
    242e:	48 c0       	rjmp	.+144    	; 0x24c0 <KEYPAD_4x4__adjustKeyNumber+0xe0>
    2430:	2b 81       	ldd	r18, Y+3	; 0x03
    2432:	3c 81       	ldd	r19, Y+4	; 0x04
    2434:	23 30       	cpi	r18, 0x03	; 3
    2436:	31 05       	cpc	r19, r1
    2438:	0c f0       	brlt	.+2      	; 0x243c <KEYPAD_4x4__adjustKeyNumber+0x5c>
    243a:	45 c0       	rjmp	.+138    	; 0x24c6 <KEYPAD_4x4__adjustKeyNumber+0xe6>
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	9c 81       	ldd	r25, Y+4	; 0x04
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	91 05       	cpc	r25, r1
    2444:	09 f4       	brne	.+2      	; 0x2448 <KEYPAD_4x4__adjustKeyNumber+0x68>
    2446:	39 c0       	rjmp	.+114    	; 0x24ba <KEYPAD_4x4__adjustKeyNumber+0xda>
    2448:	67 c0       	rjmp	.+206    	; 0x2518 <KEYPAD_4x4__adjustKeyNumber+0x138>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	26 30       	cpi	r18, 0x06	; 6
    2450:	31 05       	cpc	r19, r1
    2452:	09 f4       	brne	.+2      	; 0x2456 <KEYPAD_4x4__adjustKeyNumber+0x76>
    2454:	41 c0       	rjmp	.+130    	; 0x24d8 <KEYPAD_4x4__adjustKeyNumber+0xf8>
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	87 30       	cpi	r24, 0x07	; 7
    245c:	91 05       	cpc	r25, r1
    245e:	0c f0       	brlt	.+2      	; 0x2462 <KEYPAD_4x4__adjustKeyNumber+0x82>
    2460:	3e c0       	rjmp	.+124    	; 0x24de <KEYPAD_4x4__adjustKeyNumber+0xfe>
    2462:	37 c0       	rjmp	.+110    	; 0x24d2 <KEYPAD_4x4__adjustKeyNumber+0xf2>
    2464:	2b 81       	ldd	r18, Y+3	; 0x03
    2466:	3c 81       	ldd	r19, Y+4	; 0x04
    2468:	2c 30       	cpi	r18, 0x0C	; 12
    246a:	31 05       	cpc	r19, r1
    246c:	09 f4       	brne	.+2      	; 0x2470 <KEYPAD_4x4__adjustKeyNumber+0x90>
    246e:	46 c0       	rjmp	.+140    	; 0x24fc <KEYPAD_4x4__adjustKeyNumber+0x11c>
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	8d 30       	cpi	r24, 0x0D	; 13
    2476:	91 05       	cpc	r25, r1
    2478:	5c f4       	brge	.+22     	; 0x2490 <KEYPAD_4x4__adjustKeyNumber+0xb0>
    247a:	2b 81       	ldd	r18, Y+3	; 0x03
    247c:	3c 81       	ldd	r19, Y+4	; 0x04
    247e:	2a 30       	cpi	r18, 0x0A	; 10
    2480:	31 05       	cpc	r19, r1
    2482:	b1 f1       	breq	.+108    	; 0x24f0 <KEYPAD_4x4__adjustKeyNumber+0x110>
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	8b 30       	cpi	r24, 0x0B	; 11
    248a:	91 05       	cpc	r25, r1
    248c:	a4 f5       	brge	.+104    	; 0x24f6 <KEYPAD_4x4__adjustKeyNumber+0x116>
    248e:	2d c0       	rjmp	.+90     	; 0x24ea <KEYPAD_4x4__adjustKeyNumber+0x10a>
    2490:	2b 81       	ldd	r18, Y+3	; 0x03
    2492:	3c 81       	ldd	r19, Y+4	; 0x04
    2494:	2e 30       	cpi	r18, 0x0E	; 14
    2496:	31 05       	cpc	r19, r1
    2498:	b9 f1       	breq	.+110    	; 0x2508 <KEYPAD_4x4__adjustKeyNumber+0x128>
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	8e 30       	cpi	r24, 0x0E	; 14
    24a0:	91 05       	cpc	r25, r1
    24a2:	7c f1       	brlt	.+94     	; 0x2502 <KEYPAD_4x4__adjustKeyNumber+0x122>
    24a4:	2b 81       	ldd	r18, Y+3	; 0x03
    24a6:	3c 81       	ldd	r19, Y+4	; 0x04
    24a8:	2f 30       	cpi	r18, 0x0F	; 15
    24aa:	31 05       	cpc	r19, r1
    24ac:	79 f1       	breq	.+94     	; 0x250c <KEYPAD_4x4__adjustKeyNumber+0x12c>
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	80 31       	cpi	r24, 0x10	; 16
    24b4:	91 05       	cpc	r25, r1
    24b6:	69 f1       	breq	.+90     	; 0x2512 <KEYPAD_4x4__adjustKeyNumber+0x132>
    24b8:	2f c0       	rjmp	.+94     	; 0x2518 <KEYPAD_4x4__adjustKeyNumber+0x138>
	case 1:
		return 7;
    24ba:	97 e0       	ldi	r25, 0x07	; 7
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	2e c0       	rjmp	.+92     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 2:
		return 8;
    24c0:	28 e0       	ldi	r18, 0x08	; 8
    24c2:	2a 83       	std	Y+2, r18	; 0x02
    24c4:	2b c0       	rjmp	.+86     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 3:
		return 9;
    24c6:	39 e0       	ldi	r19, 0x09	; 9
    24c8:	3a 83       	std	Y+2, r19	; 0x02
    24ca:	28 c0       	rjmp	.+80     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 4:
		return '%';
    24cc:	85 e2       	ldi	r24, 0x25	; 37
    24ce:	8a 83       	std	Y+2, r24	; 0x02
    24d0:	25 c0       	rjmp	.+74     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 5:
		return 4;
    24d2:	94 e0       	ldi	r25, 0x04	; 4
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	22 c0       	rjmp	.+68     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 6:
		return 5;
    24d8:	25 e0       	ldi	r18, 0x05	; 5
    24da:	2a 83       	std	Y+2, r18	; 0x02
    24dc:	1f c0       	rjmp	.+62     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 7:
		return 6;
    24de:	36 e0       	ldi	r19, 0x06	; 6
    24e0:	3a 83       	std	Y+2, r19	; 0x02
    24e2:	1c c0       	rjmp	.+56     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 8:
		return '*';
    24e4:	8a e2       	ldi	r24, 0x2A	; 42
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	19 c0       	rjmp	.+50     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 9:
		return 1;
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	16 c0       	rjmp	.+44     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 10:
		return 2;
    24f0:	22 e0       	ldi	r18, 0x02	; 2
    24f2:	2a 83       	std	Y+2, r18	; 0x02
    24f4:	13 c0       	rjmp	.+38     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 11:
		return 3;
    24f6:	33 e0       	ldi	r19, 0x03	; 3
    24f8:	3a 83       	std	Y+2, r19	; 0x02
    24fa:	10 c0       	rjmp	.+32     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 12:
		return '-';
    24fc:	8d e2       	ldi	r24, 0x2D	; 45
    24fe:	8a 83       	std	Y+2, r24	; 0x02
    2500:	0d c0       	rjmp	.+26     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 13:
		return ' ';
    2502:	90 e2       	ldi	r25, 0x20	; 32
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	0a c0       	rjmp	.+20     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 14:
		return 0;
    2508:	1a 82       	std	Y+2, r1	; 0x02
    250a:	08 c0       	rjmp	.+16     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 15:
		return '=';
    250c:	2d e3       	ldi	r18, 0x3D	; 61
    250e:	2a 83       	std	Y+2, r18	; 0x02
    2510:	05 c0       	rjmp	.+10     	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	case 16:
		return '+';
    2512:	3b e2       	ldi	r19, 0x2B	; 43
    2514:	3a 83       	std	Y+2, r19	; 0x02
    2516:	02 c0       	rjmp	.+4      	; 0x251c <KEYPAD_4x4__adjustKeyNumber+0x13c>
		break;
	default:
		return button_number;
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	8a 83       	std	Y+2, r24	; 0x02
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <LCD_init>:
#if((LCD_DATA_MODE!=8)&&(LCD_DATA_MODE!=4))

#error "Invalid Bitmode"

#endif
void LCD_init(void) {
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	2e 97       	sbiw	r28, 0x0e	; 14
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
	/**Enable and Register Select Pins Initialization*/
	GPIO_setupPinDirection(LCD_E_PORT, LCD_E_PIN, PIN_OUTPUT);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	62 e0       	ldi	r22, 0x02	; 2
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	61 e0       	ldi	r22, 0x01	; 1
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_setupPinDirection>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a0 ea       	ldi	r26, 0xA0	; 160
    255a:	b1 e4       	ldi	r27, 0x41	; 65
    255c:	8b 87       	std	Y+11, r24	; 0x0b
    255e:	9c 87       	std	Y+12, r25	; 0x0c
    2560:	ad 87       	std	Y+13, r26	; 0x0d
    2562:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2564:	6b 85       	ldd	r22, Y+11	; 0x0b
    2566:	7c 85       	ldd	r23, Y+12	; 0x0c
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	9e 85       	ldd	r25, Y+14	; 0x0e
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a ef       	ldi	r20, 0xFA	; 250
    2572:	54 e4       	ldi	r21, 0x44	; 68
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8f 83       	std	Y+7, r24	; 0x07
    257e:	98 87       	std	Y+8, r25	; 0x08
    2580:	a9 87       	std	Y+9, r26	; 0x09
    2582:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <LCD_init+0x7a>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	3f c0       	rjmp	.+126    	; 0x2624 <LCD_init+0xf8>
	else if (__tmp > 65535)
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	3f ef       	ldi	r19, 0xFF	; 255
    25b2:	4f e7       	ldi	r20, 0x7F	; 127
    25b4:	57 e4       	ldi	r21, 0x47	; 71
    25b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ba:	18 16       	cp	r1, r24
    25bc:	4c f5       	brge	.+82     	; 0x2610 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e2       	ldi	r20, 0x20	; 32
    25cc:	51 e4       	ldi	r21, 0x41	; 65
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	0f c0       	rjmp	.+30     	; 0x2606 <LCD_init+0xda>
    25e8:	88 ec       	ldi	r24, 0xC8	; 200
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	8b 83       	std	Y+3, r24	; 0x03
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <LCD_init+0xc8>
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	69 f7       	brne	.-38     	; 0x25e8 <LCD_init+0xbc>
    260e:	14 c0       	rjmp	.+40     	; 0x2638 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2610:	6f 81       	ldd	r22, Y+7	; 0x07
    2612:	78 85       	ldd	r23, Y+8	; 0x08
    2614:	89 85       	ldd	r24, Y+9	; 0x09
    2616:	9a 85       	ldd	r25, Y+10	; 0x0a
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	9e 81       	ldd	r25, Y+6	; 0x06
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <LCD_init+0x104>
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_FOUR_BIT_MODE_INIT2);
	LCD_sendCommand(LCD_FOUR_BIT_MODE_INIT);

#elif(LCD_DATA_MODE==8)
	{
		GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	6f ef       	ldi	r22, 0xFF	; 255
    263c:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_setupPortDirection>
		LCD_sendCommand(LCD_EIGHT_BIT_MODE_INIT);
    2640:	88 e3       	ldi	r24, 0x38	; 56
    2642:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_sendCommand>
	}
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    2646:	8c e0       	ldi	r24, 0x0C	; 12
    2648:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_sendCommand>

}
    2652:	2e 96       	adiw	r28, 0x0e	; 14
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <LCD_sendCommand>:
/**Send a command to the LCD**/
void LCD_sendCommand(uint8 command) {
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	e9 97       	sbiw	r28, 0x39	; 57
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <GPIO_writePin>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a0 e8       	ldi	r26, 0x80	; 128
    268a:	bf e3       	ldi	r27, 0x3F	; 63
    268c:	8d ab       	std	Y+53, r24	; 0x35
    268e:	9e ab       	std	Y+54, r25	; 0x36
    2690:	af ab       	std	Y+55, r26	; 0x37
    2692:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2694:	6d a9       	ldd	r22, Y+53	; 0x35
    2696:	7e a9       	ldd	r23, Y+54	; 0x36
    2698:	8f a9       	ldd	r24, Y+55	; 0x37
    269a:	98 ad       	ldd	r25, Y+56	; 0x38
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	4a ef       	ldi	r20, 0xFA	; 250
    26a2:	54 e4       	ldi	r21, 0x44	; 68
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	89 ab       	std	Y+49, r24	; 0x31
    26ae:	9a ab       	std	Y+50, r25	; 0x32
    26b0:	ab ab       	std	Y+51, r26	; 0x33
    26b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26b4:	69 a9       	ldd	r22, Y+49	; 0x31
    26b6:	7a a9       	ldd	r23, Y+50	; 0x32
    26b8:	8b a9       	ldd	r24, Y+51	; 0x33
    26ba:	9c a9       	ldd	r25, Y+52	; 0x34
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e8       	ldi	r20, 0x80	; 128
    26c2:	5f e3       	ldi	r21, 0x3F	; 63
    26c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c8:	88 23       	and	r24, r24
    26ca:	2c f4       	brge	.+10     	; 0x26d6 <LCD_sendCommand+0x72>
		__ticks = 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	98 ab       	std	Y+48, r25	; 0x30
    26d2:	8f a7       	std	Y+47, r24	; 0x2f
    26d4:	3f c0       	rjmp	.+126    	; 0x2754 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    26d6:	69 a9       	ldd	r22, Y+49	; 0x31
    26d8:	7a a9       	ldd	r23, Y+50	; 0x32
    26da:	8b a9       	ldd	r24, Y+51	; 0x33
    26dc:	9c a9       	ldd	r25, Y+52	; 0x34
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	3f ef       	ldi	r19, 0xFF	; 255
    26e2:	4f e7       	ldi	r20, 0x7F	; 127
    26e4:	57 e4       	ldi	r21, 0x47	; 71
    26e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	4c f5       	brge	.+82     	; 0x2740 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ee:	6d a9       	ldd	r22, Y+53	; 0x35
    26f0:	7e a9       	ldd	r23, Y+54	; 0x36
    26f2:	8f a9       	ldd	r24, Y+55	; 0x37
    26f4:	98 ad       	ldd	r25, Y+56	; 0x38
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e2       	ldi	r20, 0x20	; 32
    26fc:	51 e4       	ldi	r21, 0x41	; 65
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	98 ab       	std	Y+48, r25	; 0x30
    2714:	8f a7       	std	Y+47, r24	; 0x2f
    2716:	0f c0       	rjmp	.+30     	; 0x2736 <LCD_sendCommand+0xd2>
    2718:	88 ec       	ldi	r24, 0xC8	; 200
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9e a7       	std	Y+46, r25	; 0x2e
    271e:	8d a7       	std	Y+45, r24	; 0x2d
    2720:	8d a5       	ldd	r24, Y+45	; 0x2d
    2722:	9e a5       	ldd	r25, Y+46	; 0x2e
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <LCD_sendCommand+0xc0>
    2728:	9e a7       	std	Y+46, r25	; 0x2e
    272a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272c:	8f a5       	ldd	r24, Y+47	; 0x2f
    272e:	98 a9       	ldd	r25, Y+48	; 0x30
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	98 ab       	std	Y+48, r25	; 0x30
    2734:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2736:	8f a5       	ldd	r24, Y+47	; 0x2f
    2738:	98 a9       	ldd	r25, Y+48	; 0x30
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	69 f7       	brne	.-38     	; 0x2718 <LCD_sendCommand+0xb4>
    273e:	14 c0       	rjmp	.+40     	; 0x2768 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2740:	69 a9       	ldd	r22, Y+49	; 0x31
    2742:	7a a9       	ldd	r23, Y+50	; 0x32
    2744:	8b a9       	ldd	r24, Y+51	; 0x33
    2746:	9c a9       	ldd	r25, Y+52	; 0x34
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	98 ab       	std	Y+48, r25	; 0x30
    2752:	8f a7       	std	Y+47, r24	; 0x2f
    2754:	8f a5       	ldd	r24, Y+47	; 0x2f
    2756:	98 a9       	ldd	r25, Y+48	; 0x30
    2758:	9c a7       	std	Y+44, r25	; 0x2c
    275a:	8b a7       	std	Y+43, r24	; 0x2b
    275c:	8b a5       	ldd	r24, Y+43	; 0x2b
    275e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <LCD_sendCommand+0xfc>
    2764:	9c a7       	std	Y+44, r25	; 0x2c
    2766:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/*Should be tas = 50ns min.*/
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	62 e0       	ldi	r22, 0x02	; 2
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <GPIO_writePin>
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a0 e8       	ldi	r26, 0x80	; 128
    2778:	bf e3       	ldi	r27, 0x3F	; 63
    277a:	8f a3       	std	Y+39, r24	; 0x27
    277c:	98 a7       	std	Y+40, r25	; 0x28
    277e:	a9 a7       	std	Y+41, r26	; 0x29
    2780:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2782:	6f a1       	ldd	r22, Y+39	; 0x27
    2784:	78 a5       	ldd	r23, Y+40	; 0x28
    2786:	89 a5       	ldd	r24, Y+41	; 0x29
    2788:	9a a5       	ldd	r25, Y+42	; 0x2a
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	4a ef       	ldi	r20, 0xFA	; 250
    2790:	54 e4       	ldi	r21, 0x44	; 68
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	8b a3       	std	Y+35, r24	; 0x23
    279c:	9c a3       	std	Y+36, r25	; 0x24
    279e:	ad a3       	std	Y+37, r26	; 0x25
    27a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27a2:	6b a1       	ldd	r22, Y+35	; 0x23
    27a4:	7c a1       	ldd	r23, Y+36	; 0x24
    27a6:	8d a1       	ldd	r24, Y+37	; 0x25
    27a8:	9e a1       	ldd	r25, Y+38	; 0x26
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e8       	ldi	r20, 0x80	; 128
    27b0:	5f e3       	ldi	r21, 0x3F	; 63
    27b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b6:	88 23       	and	r24, r24
    27b8:	2c f4       	brge	.+10     	; 0x27c4 <LCD_sendCommand+0x160>
		__ticks = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9a a3       	std	Y+34, r25	; 0x22
    27c0:	89 a3       	std	Y+33, r24	; 0x21
    27c2:	3f c0       	rjmp	.+126    	; 0x2842 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    27c4:	6b a1       	ldd	r22, Y+35	; 0x23
    27c6:	7c a1       	ldd	r23, Y+36	; 0x24
    27c8:	8d a1       	ldd	r24, Y+37	; 0x25
    27ca:	9e a1       	ldd	r25, Y+38	; 0x26
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	4c f5       	brge	.+82     	; 0x282e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27dc:	6f a1       	ldd	r22, Y+39	; 0x27
    27de:	78 a5       	ldd	r23, Y+40	; 0x28
    27e0:	89 a5       	ldd	r24, Y+41	; 0x29
    27e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e2       	ldi	r20, 0x20	; 32
    27ea:	51 e4       	ldi	r21, 0x41	; 65
    27ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9a a3       	std	Y+34, r25	; 0x22
    2802:	89 a3       	std	Y+33, r24	; 0x21
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <LCD_sendCommand+0x1c0>
    2806:	88 ec       	ldi	r24, 0xC8	; 200
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	98 a3       	std	Y+32, r25	; 0x20
    280c:	8f 8f       	std	Y+31, r24	; 0x1f
    280e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2810:	98 a1       	ldd	r25, Y+32	; 0x20
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <LCD_sendCommand+0x1ae>
    2816:	98 a3       	std	Y+32, r25	; 0x20
    2818:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281a:	89 a1       	ldd	r24, Y+33	; 0x21
    281c:	9a a1       	ldd	r25, Y+34	; 0x22
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	9a a3       	std	Y+34, r25	; 0x22
    2822:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2824:	89 a1       	ldd	r24, Y+33	; 0x21
    2826:	9a a1       	ldd	r25, Y+34	; 0x22
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	69 f7       	brne	.-38     	; 0x2806 <LCD_sendCommand+0x1a2>
    282c:	14 c0       	rjmp	.+40     	; 0x2856 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282e:	6b a1       	ldd	r22, Y+35	; 0x23
    2830:	7c a1       	ldd	r23, Y+36	; 0x24
    2832:	8d a1       	ldd	r24, Y+37	; 0x25
    2834:	9e a1       	ldd	r25, Y+38	; 0x26
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9a a3       	std	Y+34, r25	; 0x22
    2840:	89 a3       	std	Y+33, r24	; 0x21
    2842:	89 a1       	ldd	r24, Y+33	; 0x21
    2844:	9a a1       	ldd	r25, Y+34	; 0x22
    2846:	9e 8f       	std	Y+30, r25	; 0x1e
    2848:	8d 8f       	std	Y+29, r24	; 0x1d
    284a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    284c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	f1 f7       	brne	.-4      	; 0x284e <LCD_sendCommand+0x1ea>
    2852:	9e 8f       	std	Y+30, r25	; 0x1e
    2854:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT, LCD_DB7_PIN, GET_BIT(command,3));
	_delay_ms(1);/*should be tdsw = 100ns*/
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
	_delay_ms(1);/*should be th =  13ns*/
#elif(LCD_DATA_MODE==8)
	GPIO_writePort(LCD_DATA_PORT, command);
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	69 ad       	ldd	r22, Y+57	; 0x39
    285a:	0e 94 3b 10 	call	0x2076	; 0x2076 <GPIO_writePort>
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a0 e8       	ldi	r26, 0x80	; 128
    2864:	bf e3       	ldi	r27, 0x3F	; 63
    2866:	89 8f       	std	Y+25, r24	; 0x19
    2868:	9a 8f       	std	Y+26, r25	; 0x1a
    286a:	ab 8f       	std	Y+27, r26	; 0x1b
    286c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286e:	69 8d       	ldd	r22, Y+25	; 0x19
    2870:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	4a ef       	ldi	r20, 0xFA	; 250
    287c:	54 e4       	ldi	r21, 0x44	; 68
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	8d 8b       	std	Y+21, r24	; 0x15
    2888:	9e 8b       	std	Y+22, r25	; 0x16
    288a:	af 8b       	std	Y+23, r26	; 0x17
    288c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    288e:	6d 89       	ldd	r22, Y+21	; 0x15
    2890:	7e 89       	ldd	r23, Y+22	; 0x16
    2892:	8f 89       	ldd	r24, Y+23	; 0x17
    2894:	98 8d       	ldd	r25, Y+24	; 0x18
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e8       	ldi	r20, 0x80	; 128
    289c:	5f e3       	ldi	r21, 0x3F	; 63
    289e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28a2:	88 23       	and	r24, r24
    28a4:	2c f4       	brge	.+10     	; 0x28b0 <LCD_sendCommand+0x24c>
		__ticks = 1;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9c 8b       	std	Y+20, r25	; 0x14
    28ac:	8b 8b       	std	Y+19, r24	; 0x13
    28ae:	3f c0       	rjmp	.+126    	; 0x292e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    28b0:	6d 89       	ldd	r22, Y+21	; 0x15
    28b2:	7e 89       	ldd	r23, Y+22	; 0x16
    28b4:	8f 89       	ldd	r24, Y+23	; 0x17
    28b6:	98 8d       	ldd	r25, Y+24	; 0x18
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	3f ef       	ldi	r19, 0xFF	; 255
    28bc:	4f e7       	ldi	r20, 0x7F	; 127
    28be:	57 e4       	ldi	r21, 0x47	; 71
    28c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c4:	18 16       	cp	r1, r24
    28c6:	4c f5       	brge	.+82     	; 0x291a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e2       	ldi	r20, 0x20	; 32
    28d6:	51 e4       	ldi	r21, 0x41	; 65
    28d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	9c 8b       	std	Y+20, r25	; 0x14
    28ee:	8b 8b       	std	Y+19, r24	; 0x13
    28f0:	0f c0       	rjmp	.+30     	; 0x2910 <LCD_sendCommand+0x2ac>
    28f2:	88 ec       	ldi	r24, 0xC8	; 200
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9a 8b       	std	Y+18, r25	; 0x12
    28f8:	89 8b       	std	Y+17, r24	; 0x11
    28fa:	89 89       	ldd	r24, Y+17	; 0x11
    28fc:	9a 89       	ldd	r25, Y+18	; 0x12
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <LCD_sendCommand+0x29a>
    2902:	9a 8b       	std	Y+18, r25	; 0x12
    2904:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2906:	8b 89       	ldd	r24, Y+19	; 0x13
    2908:	9c 89       	ldd	r25, Y+20	; 0x14
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	9c 8b       	std	Y+20, r25	; 0x14
    290e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2910:	8b 89       	ldd	r24, Y+19	; 0x13
    2912:	9c 89       	ldd	r25, Y+20	; 0x14
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	69 f7       	brne	.-38     	; 0x28f2 <LCD_sendCommand+0x28e>
    2918:	14 c0       	rjmp	.+40     	; 0x2942 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291a:	6d 89       	ldd	r22, Y+21	; 0x15
    291c:	7e 89       	ldd	r23, Y+22	; 0x16
    291e:	8f 89       	ldd	r24, Y+23	; 0x17
    2920:	98 8d       	ldd	r25, Y+24	; 0x18
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9c 8b       	std	Y+20, r25	; 0x14
    292c:	8b 8b       	std	Y+19, r24	; 0x13
    292e:	8b 89       	ldd	r24, Y+19	; 0x13
    2930:	9c 89       	ldd	r25, Y+20	; 0x14
    2932:	98 8b       	std	Y+16, r25	; 0x10
    2934:	8f 87       	std	Y+15, r24	; 0x0f
    2936:	8f 85       	ldd	r24, Y+15	; 0x0f
    2938:	98 89       	ldd	r25, Y+16	; 0x10
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <LCD_sendCommand+0x2d6>
    293e:	98 8b       	std	Y+16, r25	; 0x10
    2940:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);/*should be tdsw = 100ns*/
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	62 e0       	ldi	r22, 0x02	; 2
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <GPIO_writePin>
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	a0 e8       	ldi	r26, 0x80	; 128
    2952:	bf e3       	ldi	r27, 0x3F	; 63
    2954:	8b 87       	std	Y+11, r24	; 0x0b
    2956:	9c 87       	std	Y+12, r25	; 0x0c
    2958:	ad 87       	std	Y+13, r26	; 0x0d
    295a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295c:	6b 85       	ldd	r22, Y+11	; 0x0b
    295e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2960:	8d 85       	ldd	r24, Y+13	; 0x0d
    2962:	9e 85       	ldd	r25, Y+14	; 0x0e
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4a ef       	ldi	r20, 0xFA	; 250
    296a:	54 e4       	ldi	r21, 0x44	; 68
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	8f 83       	std	Y+7, r24	; 0x07
    2976:	98 87       	std	Y+8, r25	; 0x08
    2978:	a9 87       	std	Y+9, r26	; 0x09
    297a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    297c:	6f 81       	ldd	r22, Y+7	; 0x07
    297e:	78 85       	ldd	r23, Y+8	; 0x08
    2980:	89 85       	ldd	r24, Y+9	; 0x09
    2982:	9a 85       	ldd	r25, Y+10	; 0x0a
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	2c f4       	brge	.+10     	; 0x299e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	3f c0       	rjmp	.+126    	; 0x2a1c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    299e:	6f 81       	ldd	r22, Y+7	; 0x07
    29a0:	78 85       	ldd	r23, Y+8	; 0x08
    29a2:	89 85       	ldd	r24, Y+9	; 0x09
    29a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	3f ef       	ldi	r19, 0xFF	; 255
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	57 e4       	ldi	r21, 0x47	; 71
    29ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b2:	18 16       	cp	r1, r24
    29b4:	4c f5       	brge	.+82     	; 0x2a08 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    29bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e2       	ldi	r20, 0x20	; 32
    29c4:	51 e4       	ldi	r21, 0x41	; 65
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	0f c0       	rjmp	.+30     	; 0x29fe <LCD_sendCommand+0x39a>
    29e0:	88 ec       	ldi	r24, 0xC8	; 200
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9c 83       	std	Y+4, r25	; 0x04
    29e6:	8b 83       	std	Y+3, r24	; 0x03
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	9c 81       	ldd	r25, Y+4	; 0x04
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_sendCommand+0x388>
    29f0:	9c 83       	std	Y+4, r25	; 0x04
    29f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <LCD_sendCommand+0x37c>
    2a06:	14 c0       	rjmp	.+40     	; 0x2a30 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0a:	78 85       	ldd	r23, Y+8	; 0x08
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	9a 83       	std	Y+2, r25	; 0x02
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_sendCommand+0x3c4>
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);/*should be th =  13ns*/
#endif
}
    2a30:	e9 96       	adiw	r28, 0x39	; 57
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <LCD_displayCharacter>:
/**Display a Character**/
void LCD_displayCharacter(uint8 character) {
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	e9 97       	sbiw	r28, 0x39	; 57
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <GPIO_writePin>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a0 e8       	ldi	r26, 0x80	; 128
    2a68:	bf e3       	ldi	r27, 0x3F	; 63
    2a6a:	8d ab       	std	Y+53, r24	; 0x35
    2a6c:	9e ab       	std	Y+54, r25	; 0x36
    2a6e:	af ab       	std	Y+55, r26	; 0x37
    2a70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	6d a9       	ldd	r22, Y+53	; 0x35
    2a74:	7e a9       	ldd	r23, Y+54	; 0x36
    2a76:	8f a9       	ldd	r24, Y+55	; 0x37
    2a78:	98 ad       	ldd	r25, Y+56	; 0x38
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a ef       	ldi	r20, 0xFA	; 250
    2a80:	54 e4       	ldi	r21, 0x44	; 68
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	89 ab       	std	Y+49, r24	; 0x31
    2a8c:	9a ab       	std	Y+50, r25	; 0x32
    2a8e:	ab ab       	std	Y+51, r26	; 0x33
    2a90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a92:	69 a9       	ldd	r22, Y+49	; 0x31
    2a94:	7a a9       	ldd	r23, Y+50	; 0x32
    2a96:	8b a9       	ldd	r24, Y+51	; 0x33
    2a98:	9c a9       	ldd	r25, Y+52	; 0x34
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	2c f4       	brge	.+10     	; 0x2ab4 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	98 ab       	std	Y+48, r25	; 0x30
    2ab0:	8f a7       	std	Y+47, r24	; 0x2f
    2ab2:	3f c0       	rjmp	.+126    	; 0x2b32 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2ab4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab8:	8b a9       	ldd	r24, Y+51	; 0x33
    2aba:	9c a9       	ldd	r25, Y+52	; 0x34
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac8:	18 16       	cp	r1, r24
    2aca:	4c f5       	brge	.+82     	; 0x2b1e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	6d a9       	ldd	r22, Y+53	; 0x35
    2ace:	7e a9       	ldd	r23, Y+54	; 0x36
    2ad0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ad2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	cd 01       	movw	r24, r26
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	98 ab       	std	Y+48, r25	; 0x30
    2af2:	8f a7       	std	Y+47, r24	; 0x2f
    2af4:	0f c0       	rjmp	.+30     	; 0x2b14 <LCD_displayCharacter+0xd2>
    2af6:	88 ec       	ldi	r24, 0xC8	; 200
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	9e a7       	std	Y+46, r25	; 0x2e
    2afc:	8d a7       	std	Y+45, r24	; 0x2d
    2afe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b00:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_displayCharacter+0xc0>
    2b06:	9e a7       	std	Y+46, r25	; 0x2e
    2b08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	98 ab       	std	Y+48, r25	; 0x30
    2b12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b16:	98 a9       	ldd	r25, Y+48	; 0x30
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	69 f7       	brne	.-38     	; 0x2af6 <LCD_displayCharacter+0xb4>
    2b1c:	14 c0       	rjmp	.+40     	; 0x2b46 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b20:	7a a9       	ldd	r23, Y+50	; 0x32
    2b22:	8b a9       	ldd	r24, Y+51	; 0x33
    2b24:	9c a9       	ldd	r25, Y+52	; 0x34
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	98 ab       	std	Y+48, r25	; 0x30
    2b30:	8f a7       	std	Y+47, r24	; 0x2f
    2b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b34:	98 a9       	ldd	r25, Y+48	; 0x30
    2b36:	9c a7       	std	Y+44, r25	; 0x2c
    2b38:	8b a7       	std	Y+43, r24	; 0x2b
    2b3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_displayCharacter+0xfc>
    2b42:	9c a7       	std	Y+44, r25	; 0x2c
    2b44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);/*Should be tas = 50ns min.*/
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_HIGH);
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	62 e0       	ldi	r22, 0x02	; 2
    2b4a:	41 e0       	ldi	r20, 0x01	; 1
    2b4c:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <GPIO_writePin>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e8       	ldi	r26, 0x80	; 128
    2b56:	bf e3       	ldi	r27, 0x3F	; 63
    2b58:	8f a3       	std	Y+39, r24	; 0x27
    2b5a:	98 a7       	std	Y+40, r25	; 0x28
    2b5c:	a9 a7       	std	Y+41, r26	; 0x29
    2b5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	6f a1       	ldd	r22, Y+39	; 0x27
    2b62:	78 a5       	ldd	r23, Y+40	; 0x28
    2b64:	89 a5       	ldd	r24, Y+41	; 0x29
    2b66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	4a ef       	ldi	r20, 0xFA	; 250
    2b6e:	54 e4       	ldi	r21, 0x44	; 68
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8b a3       	std	Y+35, r24	; 0x23
    2b7a:	9c a3       	std	Y+36, r25	; 0x24
    2b7c:	ad a3       	std	Y+37, r26	; 0x25
    2b7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b80:	6b a1       	ldd	r22, Y+35	; 0x23
    2b82:	7c a1       	ldd	r23, Y+36	; 0x24
    2b84:	8d a1       	ldd	r24, Y+37	; 0x25
    2b86:	9e a1       	ldd	r25, Y+38	; 0x26
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e8       	ldi	r20, 0x80	; 128
    2b8e:	5f e3       	ldi	r21, 0x3F	; 63
    2b90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9a a3       	std	Y+34, r25	; 0x22
    2b9e:	89 a3       	std	Y+33, r24	; 0x21
    2ba0:	3f c0       	rjmp	.+126    	; 0x2c20 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	4c f5       	brge	.+82     	; 0x2c0c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	6f a1       	ldd	r22, Y+39	; 0x27
    2bbc:	78 a5       	ldd	r23, Y+40	; 0x28
    2bbe:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e2       	ldi	r20, 0x20	; 32
    2bc8:	51 e4       	ldi	r21, 0x41	; 65
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9a a3       	std	Y+34, r25	; 0x22
    2be0:	89 a3       	std	Y+33, r24	; 0x21
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <LCD_displayCharacter+0x1c0>
    2be4:	88 ec       	ldi	r24, 0xC8	; 200
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	98 a3       	std	Y+32, r25	; 0x20
    2bea:	8f 8f       	std	Y+31, r24	; 0x1f
    2bec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bee:	98 a1       	ldd	r25, Y+32	; 0x20
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <LCD_displayCharacter+0x1ae>
    2bf4:	98 a3       	std	Y+32, r25	; 0x20
    2bf6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9a a3       	std	Y+34, r25	; 0x22
    2c00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c02:	89 a1       	ldd	r24, Y+33	; 0x21
    2c04:	9a a1       	ldd	r25, Y+34	; 0x22
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <LCD_displayCharacter+0x1a2>
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c10:	8d a1       	ldd	r24, Y+37	; 0x25
    2c12:	9e a1       	ldd	r25, Y+38	; 0x26
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9a a3       	std	Y+34, r25	; 0x22
    2c1e:	89 a3       	std	Y+33, r24	; 0x21
    2c20:	89 a1       	ldd	r24, Y+33	; 0x21
    2c22:	9a a1       	ldd	r25, Y+34	; 0x22
    2c24:	9e 8f       	std	Y+30, r25	; 0x1e
    2c26:	8d 8f       	std	Y+29, r24	; 0x1d
    2c28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <LCD_displayCharacter+0x1ea>
    2c30:	9e 8f       	std	Y+30, r25	; 0x1e
    2c32:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT, LCD_DB7_PIN, GET_BIT(character,3));
	_delay_ms(1);/*should be tdsw = 100ns*/
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
	_delay_ms(1);/*should be th =  13ns*/
#elif(LCD_DATA_MODE==8)
	GPIO_writePort(LCD_DATA_PORT, character);
    2c34:	82 e0       	ldi	r24, 0x02	; 2
    2c36:	69 ad       	ldd	r22, Y+57	; 0x39
    2c38:	0e 94 3b 10 	call	0x2076	; 0x2076 <GPIO_writePort>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e8       	ldi	r26, 0x80	; 128
    2c42:	bf e3       	ldi	r27, 0x3F	; 63
    2c44:	89 8f       	std	Y+25, r24	; 0x19
    2c46:	9a 8f       	std	Y+26, r25	; 0x1a
    2c48:	ab 8f       	std	Y+27, r26	; 0x1b
    2c4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4a ef       	ldi	r20, 0xFA	; 250
    2c5a:	54 e4       	ldi	r21, 0x44	; 68
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8d 8b       	std	Y+21, r24	; 0x15
    2c66:	9e 8b       	std	Y+22, r25	; 0x16
    2c68:	af 8b       	std	Y+23, r26	; 0x17
    2c6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c70:	8f 89       	ldd	r24, Y+23	; 0x17
    2c72:	98 8d       	ldd	r25, Y+24	; 0x18
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9c 8b       	std	Y+20, r25	; 0x14
    2c8a:	8b 8b       	std	Y+19, r24	; 0x13
    2c8c:	3f c0       	rjmp	.+126    	; 0x2d0c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c90:	7e 89       	ldd	r23, Y+22	; 0x16
    2c92:	8f 89       	ldd	r24, Y+23	; 0x17
    2c94:	98 8d       	ldd	r25, Y+24	; 0x18
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	57 e4       	ldi	r21, 0x47	; 71
    2c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	4c f5       	brge	.+82     	; 0x2cf8 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	9c 8b       	std	Y+20, r25	; 0x14
    2ccc:	8b 8b       	std	Y+19, r24	; 0x13
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <LCD_displayCharacter+0x2ac>
    2cd0:	88 ec       	ldi	r24, 0xC8	; 200
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9a 8b       	std	Y+18, r25	; 0x12
    2cd6:	89 8b       	std	Y+17, r24	; 0x11
    2cd8:	89 89       	ldd	r24, Y+17	; 0x11
    2cda:	9a 89       	ldd	r25, Y+18	; 0x12
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <LCD_displayCharacter+0x29a>
    2ce0:	9a 8b       	std	Y+18, r25	; 0x12
    2ce2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <LCD_displayCharacter+0x28e>
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	9c 8b       	std	Y+20, r25	; 0x14
    2d0a:	8b 8b       	std	Y+19, r24	; 0x13
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	98 8b       	std	Y+16, r25	; 0x10
    2d12:	8f 87       	std	Y+15, r24	; 0x0f
    2d14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d16:	98 89       	ldd	r25, Y+16	; 0x10
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_displayCharacter+0x2d6>
    2d1c:	98 8b       	std	Y+16, r25	; 0x10
    2d1e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);/*should be tdsw = 100ns*/
	GPIO_writePin(LCD_E_PORT, LCD_E_PIN, LOGIC_LOW);
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	62 e0       	ldi	r22, 0x02	; 2
    2d24:	40 e0       	ldi	r20, 0x00	; 0
    2d26:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <GPIO_writePin>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	a0 e8       	ldi	r26, 0x80	; 128
    2d30:	bf e3       	ldi	r27, 0x3F	; 63
    2d32:	8b 87       	std	Y+11, r24	; 0x0b
    2d34:	9c 87       	std	Y+12, r25	; 0x0c
    2d36:	ad 87       	std	Y+13, r26	; 0x0d
    2d38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	4a ef       	ldi	r20, 0xFA	; 250
    2d48:	54 e4       	ldi	r21, 0x44	; 68
    2d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	8f 83       	std	Y+7, r24	; 0x07
    2d54:	98 87       	std	Y+8, r25	; 0x08
    2d56:	a9 87       	std	Y+9, r26	; 0x09
    2d58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5c:	78 85       	ldd	r23, Y+8	; 0x08
    2d5e:	89 85       	ldd	r24, Y+9	; 0x09
    2d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e8       	ldi	r20, 0x80	; 128
    2d68:	5f e3       	ldi	r21, 0x3F	; 63
    2d6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d6e:	88 23       	and	r24, r24
    2d70:	2c f4       	brge	.+10     	; 0x2d7c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	3f c0       	rjmp	.+126    	; 0x2dfa <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7e:	78 85       	ldd	r23, Y+8	; 0x08
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	3f ef       	ldi	r19, 0xFF	; 255
    2d88:	4f e7       	ldi	r20, 0x7F	; 127
    2d8a:	57 e4       	ldi	r21, 0x47	; 71
    2d8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d90:	18 16       	cp	r1, r24
    2d92:	4c f5       	brge	.+82     	; 0x2de6 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e2       	ldi	r20, 0x20	; 32
    2da2:	51 e4       	ldi	r21, 0x41	; 65
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	bc 01       	movw	r22, r24
    2dae:	cd 01       	movw	r24, r26
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	9e 83       	std	Y+6, r25	; 0x06
    2dba:	8d 83       	std	Y+5, r24	; 0x05
    2dbc:	0f c0       	rjmp	.+30     	; 0x2ddc <LCD_displayCharacter+0x39a>
    2dbe:	88 ec       	ldi	r24, 0xC8	; 200
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9c 83       	std	Y+4, r25	; 0x04
    2dc4:	8b 83       	std	Y+3, r24	; 0x03
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <LCD_displayCharacter+0x388>
    2dce:	9c 83       	std	Y+4, r25	; 0x04
    2dd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	69 f7       	brne	.-38     	; 0x2dbe <LCD_displayCharacter+0x37c>
    2de4:	14 c0       	rjmp	.+40     	; 0x2e0e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de6:	6f 81       	ldd	r22, Y+7	; 0x07
    2de8:	78 85       	ldd	r23, Y+8	; 0x08
    2dea:	89 85       	ldd	r24, Y+9	; 0x09
    2dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfe:	9a 83       	std	Y+2, r25	; 0x02
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	9a 81       	ldd	r25, Y+2	; 0x02
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <LCD_displayCharacter+0x3c4>
    2e0a:	9a 83       	std	Y+2, r25	; 0x02
    2e0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);/*should be th =  13ns*/
#endif
}
    2e0e:	e9 96       	adiw	r28, 0x39	; 57
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	08 95       	ret

00002e20 <LCD_displayString>:
/**Display a String**/
void LCD_displayString(const char str[]) {
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <LCD_displayString+0x6>
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <LCD_displayString+0x8>
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	9c 83       	std	Y+4, r25	; 0x04
    2e2e:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    2e30:	1a 82       	std	Y+2, r1	; 0x02
    2e32:	19 82       	std	Y+1, r1	; 0x01
    2e34:	0f c0       	rjmp	.+30     	; 0x2e54 <LCD_displayString+0x34>
	while (str[count] != '\0') {
		LCD_displayCharacter(str[count]);
    2e36:	29 81       	ldd	r18, Y+1	; 0x01
    2e38:	3a 81       	ldd	r19, Y+2	; 0x02
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	fc 01       	movw	r30, r24
    2e40:	e2 0f       	add	r30, r18
    2e42:	f3 1f       	adc	r31, r19
    2e44:	80 81       	ld	r24, Z
    2e46:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCD_displayCharacter>
		count++;
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	9a 83       	std	Y+2, r25	; 0x02
    2e52:	89 83       	std	Y+1, r24	; 0x01
#endif
}
/**Display a String**/
void LCD_displayString(const char str[]) {
	int count = 0;
	while (str[count] != '\0') {
    2e54:	29 81       	ldd	r18, Y+1	; 0x01
    2e56:	3a 81       	ldd	r19, Y+2	; 0x02
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	e2 0f       	add	r30, r18
    2e60:	f3 1f       	adc	r31, r19
    2e62:	80 81       	ld	r24, Z
    2e64:	88 23       	and	r24, r24
    2e66:	39 f7       	brne	.-50     	; 0x2e36 <LCD_displayString+0x16>
		LCD_displayCharacter(str[count]);
		count++;
	}
}
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <LCD_moveCursor>:
/**Change the cursor Location to a specific row and column**/
void LCD_moveCursor(uint8 row, uint8 col) {
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	00 d0       	rcall	.+0      	; 0x2e7c <LCD_moveCursor+0x6>
    2e7c:	00 d0       	rcall	.+0      	; 0x2e7e <LCD_moveCursor+0x8>
    2e7e:	0f 92       	push	r0
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	8a 83       	std	Y+2, r24	; 0x02
    2e86:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address = 0;
    2e88:	19 82       	std	Y+1, r1	; 0x01
	switch (row) {
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	3d 83       	std	Y+5, r19	; 0x05
    2e92:	2c 83       	std	Y+4, r18	; 0x04
    2e94:	8c 81       	ldd	r24, Y+4	; 0x04
    2e96:	9d 81       	ldd	r25, Y+5	; 0x05
    2e98:	81 30       	cpi	r24, 0x01	; 1
    2e9a:	91 05       	cpc	r25, r1
    2e9c:	c1 f0       	breq	.+48     	; 0x2ece <LCD_moveCursor+0x58>
    2e9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea2:	22 30       	cpi	r18, 0x02	; 2
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <LCD_moveCursor+0x3c>
    2ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	61 f0       	breq	.+24     	; 0x2ec8 <LCD_moveCursor+0x52>
    2eb0:	1a c0       	rjmp	.+52     	; 0x2ee6 <LCD_moveCursor+0x70>
    2eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb6:	22 30       	cpi	r18, 0x02	; 2
    2eb8:	31 05       	cpc	r19, r1
    2eba:	69 f0       	breq	.+26     	; 0x2ed6 <LCD_moveCursor+0x60>
    2ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec0:	83 30       	cpi	r24, 0x03	; 3
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	61 f0       	breq	.+24     	; 0x2ede <LCD_moveCursor+0x68>
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <LCD_moveCursor+0x70>
	case 0:
		lcd_memory_address = col + 0x00;
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	0d c0       	rjmp	.+26     	; 0x2ee8 <LCD_moveCursor+0x72>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	80 5c       	subi	r24, 0xC0	; 192
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	09 c0       	rjmp	.+18     	; 0x2ee8 <LCD_moveCursor+0x72>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	80 5f       	subi	r24, 0xF0	; 240
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	05 c0       	rjmp	.+10     	; 0x2ee8 <LCD_moveCursor+0x72>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	80 5b       	subi	r24, 0xB0	; 176
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <LCD_moveCursor+0x72>
		break;
	default:
		lcd_memory_address = 0x00;
    2ee6:	19 82       	std	Y+1, r1	; 0x01
	}
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | lcd_memory_address);
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	80 68       	ori	r24, 0x80	; 128
    2eec:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_sendCommand>

}
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <LCD_displayStringRowColumn>:
/**Print the string in a specific location**/
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char str[]) {
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <LCD_displayStringRowColumn+0x6>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <LCD_displayStringRowColumn+0x8>
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	6a 83       	std	Y+2, r22	; 0x02
    2f10:	5c 83       	std	Y+4, r21	; 0x04
    2f12:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	6a 81       	ldd	r22, Y+2	; 0x02
    2f18:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString(str);
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f20:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
}
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <LCD_integerToString>:
/**Print a given number**/
void LCD_integerToString(int num) {
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	62 97       	sbiw	r28, 0x12	; 18
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	9a 8b       	std	Y+18, r25	; 0x12
    2f48:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(num, buff, 10);
    2f4a:	89 89       	ldd	r24, Y+17	; 0x11
    2f4c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4e:	9e 01       	movw	r18, r28
    2f50:	2f 5f       	subi	r18, 0xFF	; 255
    2f52:	3f 4f       	sbci	r19, 0xFF	; 255
    2f54:	b9 01       	movw	r22, r18
    2f56:	4a e0       	ldi	r20, 0x0A	; 10
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <itoa>
	LCD_displayString(buff);
    2f5e:	ce 01       	movw	r24, r28
    2f60:	01 96       	adiw	r24, 0x01	; 1
    2f62:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
}
    2f66:	62 96       	adiw	r28, 0x12	; 18
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <LCD_clearScreen>:
/**Clear the Screen**/
void LCD_clearScreen(void) {
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_sendCommand>
}
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <main>:
#include"app.h"
#include"timer1.h"
#include<util/delay.h>
#define	WRONG_CONFIRMATION	255

int main() {
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	6a 97       	sbiw	r28, 0x1a	; 26
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
	{
		Timer1_ConfigType config = { 0,ONE_SECOND_COUNT,
					TIMER1_FCPU_1024, TIMER1_COMPARE };
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	9a 8b       	std	Y+18, r25	; 0x12
    2fa6:	89 8b       	std	Y+17, r24	; 0x11
    2fa8:	e5 e4       	ldi	r30, 0x45	; 69
    2faa:	f1 e0       	ldi	r31, 0x01	; 1
    2fac:	fc 8b       	std	Y+20, r31	; 0x14
    2fae:	eb 8b       	std	Y+19, r30	; 0x13
    2fb0:	f6 e0       	ldi	r31, 0x06	; 6
    2fb2:	fd 8b       	std	Y+21, r31	; 0x15
    2fb4:	eb 89       	ldd	r30, Y+19	; 0x13
    2fb6:	fc 89       	ldd	r31, Y+20	; 0x14
    2fb8:	00 80       	ld	r0, Z
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fbe:	01 96       	adiw	r24, 0x01	; 1
    2fc0:	9c 8b       	std	Y+20, r25	; 0x14
    2fc2:	8b 8b       	std	Y+19, r24	; 0x13
    2fc4:	e9 89       	ldd	r30, Y+17	; 0x11
    2fc6:	fa 89       	ldd	r31, Y+18	; 0x12
    2fc8:	00 82       	st	Z, r0
    2fca:	89 89       	ldd	r24, Y+17	; 0x11
    2fcc:	9a 89       	ldd	r25, Y+18	; 0x12
    2fce:	01 96       	adiw	r24, 0x01	; 1
    2fd0:	9a 8b       	std	Y+18, r25	; 0x12
    2fd2:	89 8b       	std	Y+17, r24	; 0x11
    2fd4:	9d 89       	ldd	r25, Y+21	; 0x15
    2fd6:	91 50       	subi	r25, 0x01	; 1
    2fd8:	9d 8b       	std	Y+21, r25	; 0x15
    2fda:	ed 89       	ldd	r30, Y+21	; 0x15
    2fdc:	ee 23       	and	r30, r30
    2fde:	51 f7       	brne	.-44     	; 0x2fb4 <main+0x28>
			Timer1_init(&config);
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	0e 94 27 19 	call	0x324e	; 0x324e <Timer1_init>
		UART_ConfigType uartconfig = { 9600, ASYNCH, EIGHTBIT, RECEIVEPOLLING,
				TRANSMITPOLLING, ONEBIT, NOPARITY };
    2fe8:	ce 01       	movw	r24, r28
    2fea:	07 96       	adiw	r24, 0x07	; 7
    2fec:	9f 8b       	std	Y+23, r25	; 0x17
    2fee:	8e 8b       	std	Y+22, r24	; 0x16
    2ff0:	eb e3       	ldi	r30, 0x3B	; 59
    2ff2:	f1 e0       	ldi	r31, 0x01	; 1
    2ff4:	f9 8f       	std	Y+25, r31	; 0x19
    2ff6:	e8 8f       	std	Y+24, r30	; 0x18
    2ff8:	fa e0       	ldi	r31, 0x0A	; 10
    2ffa:	fa 8f       	std	Y+26, r31	; 0x1a
    2ffc:	e8 8d       	ldd	r30, Y+24	; 0x18
    2ffe:	f9 8d       	ldd	r31, Y+25	; 0x19
    3000:	00 80       	ld	r0, Z
    3002:	88 8d       	ldd	r24, Y+24	; 0x18
    3004:	99 8d       	ldd	r25, Y+25	; 0x19
    3006:	01 96       	adiw	r24, 0x01	; 1
    3008:	99 8f       	std	Y+25, r25	; 0x19
    300a:	88 8f       	std	Y+24, r24	; 0x18
    300c:	ee 89       	ldd	r30, Y+22	; 0x16
    300e:	ff 89       	ldd	r31, Y+23	; 0x17
    3010:	00 82       	st	Z, r0
    3012:	8e 89       	ldd	r24, Y+22	; 0x16
    3014:	9f 89       	ldd	r25, Y+23	; 0x17
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	9f 8b       	std	Y+23, r25	; 0x17
    301a:	8e 8b       	std	Y+22, r24	; 0x16
    301c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    301e:	91 50       	subi	r25, 0x01	; 1
    3020:	9a 8f       	std	Y+26, r25	; 0x1a
    3022:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3024:	ee 23       	and	r30, r30
    3026:	51 f7       	brne	.-44     	; 0x2ffc <main+0x70>
		UART_init(&uartconfig);
    3028:	ce 01       	movw	r24, r28
    302a:	07 96       	adiw	r24, 0x07	; 7
    302c:	0e 94 4f 1a 	call	0x349e	; 0x349e <UART_init>
	}
	LCD_init();
    3030:	0e 94 96 12 	call	0x252c	; 0x252c <LCD_init>
	LCD_clearScreen();
    3034:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
	APP_setPassword();
    3038:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_setPassword>
	while (1) {
		APP_systemControl();
    303c:	0e 94 6d 09 	call	0x12da	; 0x12da <APP_systemControl>
    3040:	fd cf       	rjmp	.-6      	; 0x303c <main+0xb0>

00003042 <MENUS_mainMenu>:
 * Description : This file Contains the Menus of the Door Locker Application
 * µC		   : ATMega 32 (8-BIT)
 * Date 	   : 4/11/2022(November)
 *******************************************************************************/
#include"lcd.h"
void MENUS_mainMenu(void){
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    304a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	60 e0       	ldi	r22, 0x00	; 0
    3052:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("+ : Open Door");
    3056:	83 ed       	ldi	r24, 0xD3	; 211
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
	LCD_moveCursor(1,0);
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	60 e0       	ldi	r22, 0x00	; 0
    3062:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    3066:	81 ee       	ldi	r24, 0xE1	; 225
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
}
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <MENUS_enterPassMenu>:
void MENUS_enterPassMenu(void){
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    307c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("Plz enter pass:");
    3088:	81 ef       	ldi	r24, 0xF1	; 241
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
	LCD_moveCursor(1,0);
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
}
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <MENUS_reenterPassMenu>:
void MENUS_reenterPassMenu(void){
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    30a6:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("Plz re-enter the");
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
	LCD_moveCursor(1,0);
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("same pass:");
    30c2:	82 e1       	ldi	r24, 0x12	; 18
    30c4:	91 e0       	ldi	r25, 0x01	; 1
    30c6:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
}
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <MENUS_enterNewPassMenu>:
void MENUS_enterNewPassMenu(void){
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    30d8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("Plz enter new");
    30e4:	8d e1       	ldi	r24, 0x1D	; 29
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
	LCD_moveCursor(1,0);
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>
	LCD_displayString("Pass:");
    30f4:	8b e2       	ldi	r24, 0x2B	; 43
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayString>
	LCD_moveCursor(1,5);
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	65 e0       	ldi	r22, 0x05	; 5
    3100:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_moveCursor>

}
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	08 95       	ret

0000310a <__vector_9>:
#include<avr/interrupt.h>
static volatile void (*g_callbackptr)(void) = NULL_PTR;
static volatile uint8 num_of_seconds = 0;
static volatile uint8 tick = 0;
static volatile uint8 executionflag = 1;
ISR(TIMER1_OVF_vect) {
    310a:	1f 92       	push	r1
    310c:	0f 92       	push	r0
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	0f 92       	push	r0
    3112:	11 24       	eor	r1, r1
    3114:	2f 93       	push	r18
    3116:	3f 93       	push	r19
    3118:	4f 93       	push	r20
    311a:	5f 93       	push	r21
    311c:	6f 93       	push	r22
    311e:	7f 93       	push	r23
    3120:	8f 93       	push	r24
    3122:	9f 93       	push	r25
    3124:	af 93       	push	r26
    3126:	bf 93       	push	r27
    3128:	ef 93       	push	r30
    312a:	ff 93       	push	r31
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
	tick++;
    3134:	80 91 4f 01 	lds	r24, 0x014F
    3138:	8f 5f       	subi	r24, 0xFF	; 255
    313a:	80 93 4f 01 	sts	0x014F, r24
	if (tick == num_of_seconds) {
    313e:	90 91 4f 01 	lds	r25, 0x014F
    3142:	80 91 4e 01 	lds	r24, 0x014E
    3146:	98 17       	cp	r25, r24
    3148:	99 f4       	brne	.+38     	; 0x3170 <__vector_9+0x66>
		if (g_callbackptr != NULL_PTR) {
    314a:	80 91 4c 01 	lds	r24, 0x014C
    314e:	90 91 4d 01 	lds	r25, 0x014D
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	69 f0       	breq	.+26     	; 0x3170 <__vector_9+0x66>
			tick = 0;
    3156:	10 92 4f 01 	sts	0x014F, r1
			if (executionflag == 1) {
    315a:	80 91 3a 01 	lds	r24, 0x013A
    315e:	81 30       	cpi	r24, 0x01	; 1
    3160:	39 f4       	brne	.+14     	; 0x3170 <__vector_9+0x66>
				executionflag = 0;
    3162:	10 92 3a 01 	sts	0x013A, r1
				g_callbackptr();
    3166:	e0 91 4c 01 	lds	r30, 0x014C
    316a:	f0 91 4d 01 	lds	r31, 0x014D
    316e:	09 95       	icall
			}
		}
	}
}
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	ff 91       	pop	r31
    3176:	ef 91       	pop	r30
    3178:	bf 91       	pop	r27
    317a:	af 91       	pop	r26
    317c:	9f 91       	pop	r25
    317e:	8f 91       	pop	r24
    3180:	7f 91       	pop	r23
    3182:	6f 91       	pop	r22
    3184:	5f 91       	pop	r21
    3186:	4f 91       	pop	r20
    3188:	3f 91       	pop	r19
    318a:	2f 91       	pop	r18
    318c:	0f 90       	pop	r0
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	0f 90       	pop	r0
    3192:	1f 90       	pop	r1
    3194:	18 95       	reti

00003196 <__vector_7>:
ISR(TIMER1_COMPA_vect) {
    3196:	1f 92       	push	r1
    3198:	0f 92       	push	r0
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	0f 92       	push	r0
    319e:	11 24       	eor	r1, r1
    31a0:	2f 93       	push	r18
    31a2:	3f 93       	push	r19
    31a4:	4f 93       	push	r20
    31a6:	5f 93       	push	r21
    31a8:	6f 93       	push	r22
    31aa:	7f 93       	push	r23
    31ac:	8f 93       	push	r24
    31ae:	9f 93       	push	r25
    31b0:	af 93       	push	r26
    31b2:	bf 93       	push	r27
    31b4:	ef 93       	push	r30
    31b6:	ff 93       	push	r31
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
	tick++;
    31c0:	80 91 4f 01 	lds	r24, 0x014F
    31c4:	8f 5f       	subi	r24, 0xFF	; 255
    31c6:	80 93 4f 01 	sts	0x014F, r24
	if (tick == num_of_seconds) {
    31ca:	90 91 4f 01 	lds	r25, 0x014F
    31ce:	80 91 4e 01 	lds	r24, 0x014E
    31d2:	98 17       	cp	r25, r24
    31d4:	99 f4       	brne	.+38     	; 0x31fc <__vector_7+0x66>
		if (g_callbackptr != NULL_PTR) {
    31d6:	80 91 4c 01 	lds	r24, 0x014C
    31da:	90 91 4d 01 	lds	r25, 0x014D
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	69 f0       	breq	.+26     	; 0x31fc <__vector_7+0x66>
			tick = 0;
    31e2:	10 92 4f 01 	sts	0x014F, r1
			if (executionflag == 1) {
    31e6:	80 91 3a 01 	lds	r24, 0x013A
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	39 f4       	brne	.+14     	; 0x31fc <__vector_7+0x66>
				executionflag = 0;
    31ee:	10 92 3a 01 	sts	0x013A, r1
				g_callbackptr();
    31f2:	e0 91 4c 01 	lds	r30, 0x014C
    31f6:	f0 91 4d 01 	lds	r31, 0x014D
    31fa:	09 95       	icall
			}
		}
	}
}
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	ff 91       	pop	r31
    3202:	ef 91       	pop	r30
    3204:	bf 91       	pop	r27
    3206:	af 91       	pop	r26
    3208:	9f 91       	pop	r25
    320a:	8f 91       	pop	r24
    320c:	7f 91       	pop	r23
    320e:	6f 91       	pop	r22
    3210:	5f 91       	pop	r21
    3212:	4f 91       	pop	r20
    3214:	3f 91       	pop	r19
    3216:	2f 91       	pop	r18
    3218:	0f 90       	pop	r0
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	0f 90       	pop	r0
    321e:	1f 90       	pop	r1
    3220:	18 95       	reti

00003222 <Timer1_countSeconds>:
void Timer1_countSeconds(uint8 seconds) {
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	0f 92       	push	r0
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	89 83       	std	Y+1, r24	; 0x01
	executionflag = 1;
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	80 93 3a 01 	sts	0x013A, r24
	tick = 0;
    3234:	10 92 4f 01 	sts	0x014F, r1
	TCNT1 = 0;
    3238:	ec e4       	ldi	r30, 0x4C	; 76
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	11 82       	std	Z+1, r1	; 0x01
    323e:	10 82       	st	Z, r1
	num_of_seconds = seconds;
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	80 93 4e 01 	sts	0x014E, r24

}
    3246:	0f 90       	pop	r0
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <Timer1_init>:
void Timer1_init(const Timer1_ConfigType *config) {
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	00 d0       	rcall	.+0      	; 0x3254 <Timer1_init+0x6>
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	9a 83       	std	Y+2, r25	; 0x02
    325a:	89 83       	std	Y+1, r24	; 0x01
	/**TCCR1A Initialization**/
	CLEAR_BIT(TCCR1A, COM1A0);
    325c:	af e4       	ldi	r26, 0x4F	; 79
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	ef e4       	ldi	r30, 0x4F	; 79
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	8f 7b       	andi	r24, 0xBF	; 191
    3268:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1A1);
    326a:	af e4       	ldi	r26, 0x4F	; 79
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	ef e4       	ldi	r30, 0x4F	; 79
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	8f 77       	andi	r24, 0x7F	; 127
    3276:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B0);
    3278:	af e4       	ldi	r26, 0x4F	; 79
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	ef e4       	ldi	r30, 0x4F	; 79
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	8f 7e       	andi	r24, 0xEF	; 239
    3284:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B1);
    3286:	af e4       	ldi	r26, 0x4F	; 79
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	ef e4       	ldi	r30, 0x4F	; 79
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	8f 7d       	andi	r24, 0xDF	; 223
    3292:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1A);
    3294:	af e4       	ldi	r26, 0x4F	; 79
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	ef e4       	ldi	r30, 0x4F	; 79
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	88 60       	ori	r24, 0x08	; 8
    32a0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    32a2:	af e4       	ldi	r26, 0x4F	; 79
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	ef e4       	ldi	r30, 0x4F	; 79
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	84 60       	ori	r24, 0x04	; 4
    32ae:	8c 93       	st	X, r24
	/**TCCR1B Initialization**/
	if (config->Timer1_Mode == TIMER1_NORMAL) {
    32b0:	e9 81       	ldd	r30, Y+1	; 0x01
    32b2:	fa 81       	ldd	r31, Y+2	; 0x02
    32b4:	85 81       	ldd	r24, Z+5	; 0x05
    32b6:	81 30       	cpi	r24, 0x01	; 1
    32b8:	e9 f4       	brne	.+58     	; 0x32f4 <Timer1_init+0xa6>
		CLEAR_BIT(TCCR1A, WGM10);
    32ba:	af e4       	ldi	r26, 0x4F	; 79
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	ef e4       	ldi	r30, 0x4F	; 79
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	8e 7f       	andi	r24, 0xFE	; 254
    32c6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    32c8:	af e4       	ldi	r26, 0x4F	; 79
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	ef e4       	ldi	r30, 0x4F	; 79
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	8d 7f       	andi	r24, 0xFD	; 253
    32d4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM12);
    32d6:	ae e4       	ldi	r26, 0x4E	; 78
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	ee e4       	ldi	r30, 0x4E	; 78
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	87 7f       	andi	r24, 0xF7	; 247
    32e2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    32e4:	ae e4       	ldi	r26, 0x4E	; 78
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	ee e4       	ldi	r30, 0x4E	; 78
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	8f 7e       	andi	r24, 0xEF	; 239
    32f0:	8c 93       	st	X, r24
    32f2:	21 c0       	rjmp	.+66     	; 0x3336 <Timer1_init+0xe8>
	} else if (config->Timer1_Mode == TIMER1_COMPARE) {
    32f4:	e9 81       	ldd	r30, Y+1	; 0x01
    32f6:	fa 81       	ldd	r31, Y+2	; 0x02
    32f8:	85 81       	ldd	r24, Z+5	; 0x05
    32fa:	88 23       	and	r24, r24
    32fc:	e1 f4       	brne	.+56     	; 0x3336 <Timer1_init+0xe8>
		CLEAR_BIT(TCCR1A, WGM10);
    32fe:	af e4       	ldi	r26, 0x4F	; 79
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	ef e4       	ldi	r30, 0x4F	; 79
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	8e 7f       	andi	r24, 0xFE	; 254
    330a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    330c:	af e4       	ldi	r26, 0x4F	; 79
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	ef e4       	ldi	r30, 0x4F	; 79
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	8d 7f       	andi	r24, 0xFD	; 253
    3318:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, WGM12);
    331a:	ae e4       	ldi	r26, 0x4E	; 78
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	ee e4       	ldi	r30, 0x4E	; 78
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	88 60       	ori	r24, 0x08	; 8
    3326:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    3328:	ae e4       	ldi	r26, 0x4E	; 78
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	ee e4       	ldi	r30, 0x4E	; 78
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	8f 7e       	andi	r24, 0xEF	; 239
    3334:	8c 93       	st	X, r24
	}
	/**Clock Selection**/
	TCCR1B = (TCCR1B & 0xf8) | (config->Timer1_Prescaler & 0x07);
    3336:	ae e4       	ldi	r26, 0x4E	; 78
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	ee e4       	ldi	r30, 0x4E	; 78
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	98 2f       	mov	r25, r24
    3342:	98 7f       	andi	r25, 0xF8	; 248
    3344:	e9 81       	ldd	r30, Y+1	; 0x01
    3346:	fa 81       	ldd	r31, Y+2	; 0x02
    3348:	84 81       	ldd	r24, Z+4	; 0x04
    334a:	87 70       	andi	r24, 0x07	; 7
    334c:	89 2b       	or	r24, r25
    334e:	8c 93       	st	X, r24
	/**Putting the initial Count and the Compare Value**/
	TCNT1 = config->initial_value;
    3350:	ac e4       	ldi	r26, 0x4C	; 76
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e9 81       	ldd	r30, Y+1	; 0x01
    3356:	fa 81       	ldd	r31, Y+2	; 0x02
    3358:	80 81       	ld	r24, Z
    335a:	91 81       	ldd	r25, Z+1	; 0x01
    335c:	11 96       	adiw	r26, 0x01	; 1
    335e:	9c 93       	st	X, r25
    3360:	8e 93       	st	-X, r24
	OCR1A = config->compare_value;
    3362:	aa e4       	ldi	r26, 0x4A	; 74
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e9 81       	ldd	r30, Y+1	; 0x01
    3368:	fa 81       	ldd	r31, Y+2	; 0x02
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	11 96       	adiw	r26, 0x01	; 1
    3370:	9c 93       	st	X, r25
    3372:	8e 93       	st	-X, r24
	/**Selecting The Interrupt Mode**/
	SET_BIT(SREG, 7);
    3374:	af e5       	ldi	r26, 0x5F	; 95
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	ef e5       	ldi	r30, 0x5F	; 95
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	80 68       	ori	r24, 0x80	; 128
    3380:	8c 93       	st	X, r24
	if (config->Timer1_Mode == TIMER1_NORMAL) {
    3382:	e9 81       	ldd	r30, Y+1	; 0x01
    3384:	fa 81       	ldd	r31, Y+2	; 0x02
    3386:	85 81       	ldd	r24, Z+5	; 0x05
    3388:	81 30       	cpi	r24, 0x01	; 1
    338a:	79 f4       	brne	.+30     	; 0x33aa <Timer1_init+0x15c>
		CLEAR_BIT(TIMSK, OCIE1A);
    338c:	a9 e5       	ldi	r26, 0x59	; 89
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e9 e5       	ldi	r30, 0x59	; 89
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	8f 7e       	andi	r24, 0xEF	; 239
    3398:	8c 93       	st	X, r24
		SET_BIT(TIMSK, TOIE1);
    339a:	a9 e5       	ldi	r26, 0x59	; 89
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e9 e5       	ldi	r30, 0x59	; 89
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	84 60       	ori	r24, 0x04	; 4
    33a6:	8c 93       	st	X, r24
    33a8:	13 c0       	rjmp	.+38     	; 0x33d0 <Timer1_init+0x182>
	} else if (config->Timer1_Mode == TIMER1_COMPARE) {
    33aa:	e9 81       	ldd	r30, Y+1	; 0x01
    33ac:	fa 81       	ldd	r31, Y+2	; 0x02
    33ae:	85 81       	ldd	r24, Z+5	; 0x05
    33b0:	88 23       	and	r24, r24
    33b2:	71 f4       	brne	.+28     	; 0x33d0 <Timer1_init+0x182>
		CLEAR_BIT(TIMSK, TOIE1);
    33b4:	a9 e5       	ldi	r26, 0x59	; 89
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	e9 e5       	ldi	r30, 0x59	; 89
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	8b 7f       	andi	r24, 0xFB	; 251
    33c0:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1A);
    33c2:	a9 e5       	ldi	r26, 0x59	; 89
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	e9 e5       	ldi	r30, 0x59	; 89
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	80 61       	ori	r24, 0x10	; 16
    33ce:	8c 93       	st	X, r24
	}

}
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <Timer1_deinit>:
void Timer1_deinit(void) {
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
	/**Clearing all the Timer registers**/
	TCCR1A = 0;
    33e2:	ef e4       	ldi	r30, 0x4F	; 79
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	10 82       	st	Z, r1
	TCCR1B = 0;
    33e8:	ee e4       	ldi	r30, 0x4E	; 78
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	10 82       	st	Z, r1
	TIMSK = 0;
    33ee:	e9 e5       	ldi	r30, 0x59	; 89
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	10 82       	st	Z, r1
	TCNT1 = 0;
    33f4:	ec e4       	ldi	r30, 0x4C	; 76
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	11 82       	std	Z+1, r1	; 0x01
    33fa:	10 82       	st	Z, r1
	OCR1A = 0;
    33fc:	ea e4       	ldi	r30, 0x4A	; 74
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	11 82       	std	Z+1, r1	; 0x01
    3402:	10 82       	st	Z, r1
}
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	08 95       	ret

0000340a <Timer1_setCallBack>:
void Timer1_setCallBack(void (*callbackptr)(void)) {
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	00 d0       	rcall	.+0      	; 0x3410 <Timer1_setCallBack+0x6>
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
    3414:	9a 83       	std	Y+2, r25	; 0x02
    3416:	89 83       	std	Y+1, r24	; 0x01
	/**Setting the Callback PTR to the function that is called by the ISR**/
	g_callbackptr = callbackptr;
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	9a 81       	ldd	r25, Y+2	; 0x02
    341c:	90 93 4d 01 	sts	0x014D, r25
    3420:	80 93 4c 01 	sts	0x014C, r24
}
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <__vector_13>:
volatile uint8 g_uartdata = 0;
void (*g_callbackptr)(void) = NULL_PTR;
/*******************************************************************************
 * 							Interrupt Service Routine						   *
 *******************************************************************************/
ISR(USART_RXC_vect) {
    342e:	1f 92       	push	r1
    3430:	0f 92       	push	r0
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	0f 92       	push	r0
    3436:	11 24       	eor	r1, r1
    3438:	2f 93       	push	r18
    343a:	3f 93       	push	r19
    343c:	4f 93       	push	r20
    343e:	5f 93       	push	r21
    3440:	6f 93       	push	r22
    3442:	7f 93       	push	r23
    3444:	8f 93       	push	r24
    3446:	9f 93       	push	r25
    3448:	af 93       	push	r26
    344a:	bf 93       	push	r27
    344c:	ef 93       	push	r30
    344e:	ff 93       	push	r31
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
	g_uartdata = UDR;
    3458:	ec e2       	ldi	r30, 0x2C	; 44
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	80 93 50 01 	sts	0x0150, r24
	if (g_callbackptr != NULL_PTR) {
    3462:	80 91 51 01 	lds	r24, 0x0151
    3466:	90 91 52 01 	lds	r25, 0x0152
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	29 f0       	breq	.+10     	; 0x3478 <__vector_13+0x4a>
		g_callbackptr();
    346e:	e0 91 51 01 	lds	r30, 0x0151
    3472:	f0 91 52 01 	lds	r31, 0x0152
    3476:	09 95       	icall
	}
}
    3478:	cf 91       	pop	r28
    347a:	df 91       	pop	r29
    347c:	ff 91       	pop	r31
    347e:	ef 91       	pop	r30
    3480:	bf 91       	pop	r27
    3482:	af 91       	pop	r26
    3484:	9f 91       	pop	r25
    3486:	8f 91       	pop	r24
    3488:	7f 91       	pop	r23
    348a:	6f 91       	pop	r22
    348c:	5f 91       	pop	r21
    348e:	4f 91       	pop	r20
    3490:	3f 91       	pop	r19
    3492:	2f 91       	pop	r18
    3494:	0f 90       	pop	r0
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	0f 90       	pop	r0
    349a:	1f 90       	pop	r1
    349c:	18 95       	reti

0000349e <UART_init>:
void UART_init(UART_ConfigType *config) {
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	29 97       	sbiw	r28, 0x09	; 9
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	9c 83       	std	Y+4, r25	; 0x04
    34b4:	8b 83       	std	Y+3, r24	; 0x03
	/**Store the Configuration to be used by other functions**/
	g_uartconfig = *config;
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ba:	23 e5       	ldi	r18, 0x53	; 83
    34bc:	31 e0       	ldi	r19, 0x01	; 1
    34be:	3e 83       	std	Y+6, r19	; 0x06
    34c0:	2d 83       	std	Y+5, r18	; 0x05
    34c2:	98 87       	std	Y+8, r25	; 0x08
    34c4:	8f 83       	std	Y+7, r24	; 0x07
    34c6:	3a e0       	ldi	r19, 0x0A	; 10
    34c8:	39 87       	std	Y+9, r19	; 0x09
    34ca:	ef 81       	ldd	r30, Y+7	; 0x07
    34cc:	f8 85       	ldd	r31, Y+8	; 0x08
    34ce:	00 80       	ld	r0, Z
    34d0:	2f 81       	ldd	r18, Y+7	; 0x07
    34d2:	38 85       	ldd	r19, Y+8	; 0x08
    34d4:	2f 5f       	subi	r18, 0xFF	; 255
    34d6:	3f 4f       	sbci	r19, 0xFF	; 255
    34d8:	38 87       	std	Y+8, r19	; 0x08
    34da:	2f 83       	std	Y+7, r18	; 0x07
    34dc:	ed 81       	ldd	r30, Y+5	; 0x05
    34de:	fe 81       	ldd	r31, Y+6	; 0x06
    34e0:	00 82       	st	Z, r0
    34e2:	2d 81       	ldd	r18, Y+5	; 0x05
    34e4:	3e 81       	ldd	r19, Y+6	; 0x06
    34e6:	2f 5f       	subi	r18, 0xFF	; 255
    34e8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ea:	3e 83       	std	Y+6, r19	; 0x06
    34ec:	2d 83       	std	Y+5, r18	; 0x05
    34ee:	39 85       	ldd	r19, Y+9	; 0x09
    34f0:	31 50       	subi	r19, 0x01	; 1
    34f2:	39 87       	std	Y+9, r19	; 0x09
    34f4:	89 85       	ldd	r24, Y+9	; 0x09
    34f6:	88 23       	and	r24, r24
    34f8:	41 f7       	brne	.-48     	; 0x34ca <UART_init+0x2c>
	/**Enabling Double speed mode**/
	SET_BIT(UCSRA, U2X);
    34fa:	ab e2       	ldi	r26, 0x2B	; 43
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	eb e2       	ldi	r30, 0x2B	; 43
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	82 60       	ori	r24, 0x02	; 2
    3506:	8c 93       	st	X, r24
	/**Enabling Receiving and Transmitting**/
	if (config->UART_ReceiveTechnique != NORECEIVE) {
    3508:	eb 81       	ldd	r30, Y+3	; 0x03
    350a:	fc 81       	ldd	r31, Y+4	; 0x04
    350c:	86 81       	ldd	r24, Z+6	; 0x06
    350e:	88 23       	and	r24, r24
    3510:	41 f0       	breq	.+16     	; 0x3522 <UART_init+0x84>
		SET_BIT(UCSRB, RXEN);
    3512:	aa e2       	ldi	r26, 0x2A	; 42
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	ea e2       	ldi	r30, 0x2A	; 42
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	80 61       	ori	r24, 0x10	; 16
    351e:	8c 93       	st	X, r24
    3520:	07 c0       	rjmp	.+14     	; 0x3530 <UART_init+0x92>
	} else {
		CLEAR_BIT(UCSRB, RXEN);
    3522:	aa e2       	ldi	r26, 0x2A	; 42
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	ea e2       	ldi	r30, 0x2A	; 42
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	8f 7e       	andi	r24, 0xEF	; 239
    352e:	8c 93       	st	X, r24
	}
	if (config->UART_TransmitTechnique != NOTRANSMIT) {
    3530:	eb 81       	ldd	r30, Y+3	; 0x03
    3532:	fc 81       	ldd	r31, Y+4	; 0x04
    3534:	87 81       	ldd	r24, Z+7	; 0x07
    3536:	88 23       	and	r24, r24
    3538:	41 f0       	breq	.+16     	; 0x354a <UART_init+0xac>
		SET_BIT(UCSRB, TXEN);
    353a:	aa e2       	ldi	r26, 0x2A	; 42
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	ea e2       	ldi	r30, 0x2A	; 42
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	88 60       	ori	r24, 0x08	; 8
    3546:	8c 93       	st	X, r24
    3548:	07 c0       	rjmp	.+14     	; 0x3558 <UART_init+0xba>
	} else {
		CLEAR_BIT(UCSRB, TXEN);
    354a:	aa e2       	ldi	r26, 0x2A	; 42
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	ea e2       	ldi	r30, 0x2A	; 42
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	80 81       	ld	r24, Z
    3554:	87 7f       	andi	r24, 0xF7	; 247
    3556:	8c 93       	st	X, r24
	}
	/**UCSRC init**/
	SET_BIT(UCSRC, URSEL);
    3558:	a0 e4       	ldi	r26, 0x40	; 64
    355a:	b0 e0       	ldi	r27, 0x00	; 0
    355c:	e0 e4       	ldi	r30, 0x40	; 64
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	80 81       	ld	r24, Z
    3562:	80 68       	ori	r24, 0x80	; 128
    3564:	8c 93       	st	X, r24
	/**Selecting Asynchronous or Synchronous mode**/
	if (config->UART_Mode == ASYNCH) {
    3566:	eb 81       	ldd	r30, Y+3	; 0x03
    3568:	fc 81       	ldd	r31, Y+4	; 0x04
    356a:	84 81       	ldd	r24, Z+4	; 0x04
    356c:	88 23       	and	r24, r24
    356e:	41 f4       	brne	.+16     	; 0x3580 <UART_init+0xe2>
		CLEAR_BIT(UCSRC, UMSEL);
    3570:	a0 e4       	ldi	r26, 0x40	; 64
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e0 e4       	ldi	r30, 0x40	; 64
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	8f 7b       	andi	r24, 0xBF	; 191
    357c:	8c 93       	st	X, r24
    357e:	07 c0       	rjmp	.+14     	; 0x358e <UART_init+0xf0>
	} else {
		SET_BIT(UCSRC, UMSEL);
    3580:	a0 e4       	ldi	r26, 0x40	; 64
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	e0 e4       	ldi	r30, 0x40	; 64
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	80 64       	ori	r24, 0x40	; 64
    358c:	8c 93       	st	X, r24
	}
	/**Choosing Parity Error check mode**/
	UCSRC = (UCSRC & 0xCF) | ((config->UART_ParityMode & 0x03) << UPM0);
    358e:	a0 e4       	ldi	r26, 0x40	; 64
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	e0 e4       	ldi	r30, 0x40	; 64
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	28 2f       	mov	r18, r24
    359a:	2f 7c       	andi	r18, 0xCF	; 207
    359c:	eb 81       	ldd	r30, Y+3	; 0x03
    359e:	fc 81       	ldd	r31, Y+4	; 0x04
    35a0:	81 85       	ldd	r24, Z+9	; 0x09
    35a2:	88 2f       	mov	r24, r24
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	83 70       	andi	r24, 0x03	; 3
    35a8:	90 70       	andi	r25, 0x00	; 0
    35aa:	82 95       	swap	r24
    35ac:	92 95       	swap	r25
    35ae:	90 7f       	andi	r25, 0xF0	; 240
    35b0:	98 27       	eor	r25, r24
    35b2:	80 7f       	andi	r24, 0xF0	; 240
    35b4:	98 27       	eor	r25, r24
    35b6:	82 2b       	or	r24, r18
    35b8:	8c 93       	st	X, r24
	/**Selecting stop bit*/
	if (config->UART_StopBitMode == ONEBIT) {
    35ba:	eb 81       	ldd	r30, Y+3	; 0x03
    35bc:	fc 81       	ldd	r31, Y+4	; 0x04
    35be:	80 85       	ldd	r24, Z+8	; 0x08
    35c0:	88 23       	and	r24, r24
    35c2:	41 f4       	brne	.+16     	; 0x35d4 <UART_init+0x136>
		CLEAR_BIT(UCSRC, USBS);
    35c4:	a0 e4       	ldi	r26, 0x40	; 64
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e0 e4       	ldi	r30, 0x40	; 64
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	87 7f       	andi	r24, 0xF7	; 247
    35d0:	8c 93       	st	X, r24
    35d2:	0c c0       	rjmp	.+24     	; 0x35ec <UART_init+0x14e>
	} else if (config->UART_StopBitMode == TWOBIT) {
    35d4:	eb 81       	ldd	r30, Y+3	; 0x03
    35d6:	fc 81       	ldd	r31, Y+4	; 0x04
    35d8:	80 85       	ldd	r24, Z+8	; 0x08
    35da:	81 30       	cpi	r24, 0x01	; 1
    35dc:	39 f4       	brne	.+14     	; 0x35ec <UART_init+0x14e>
		SET_BIT(UCSRC, USBS);
    35de:	a0 e4       	ldi	r26, 0x40	; 64
    35e0:	b0 e0       	ldi	r27, 0x00	; 0
    35e2:	e0 e4       	ldi	r30, 0x40	; 64
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	88 60       	ori	r24, 0x08	; 8
    35ea:	8c 93       	st	X, r24
	}
	/**Selecting Character Size**/
	UCSRC = (UCSRC & 0xF9) | ((config->UART_CharacterSize & 0x03) << UCSZ0);
    35ec:	a0 e4       	ldi	r26, 0x40	; 64
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e0 e4       	ldi	r30, 0x40	; 64
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	28 2f       	mov	r18, r24
    35f8:	29 7f       	andi	r18, 0xF9	; 249
    35fa:	eb 81       	ldd	r30, Y+3	; 0x03
    35fc:	fc 81       	ldd	r31, Y+4	; 0x04
    35fe:	85 81       	ldd	r24, Z+5	; 0x05
    3600:	88 2f       	mov	r24, r24
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	83 70       	andi	r24, 0x03	; 3
    3606:	90 70       	andi	r25, 0x00	; 0
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	82 2b       	or	r24, r18
    360e:	8c 93       	st	X, r24
	/**Selecting the BAUD Rate**/
	uint16 UBRR_value = ((uint32) F_CPU / (8 * config->UART_BaudRate) - 1);
    3610:	eb 81       	ldd	r30, Y+3	; 0x03
    3612:	fc 81       	ldd	r31, Y+4	; 0x04
    3614:	80 81       	ld	r24, Z
    3616:	91 81       	ldd	r25, Z+1	; 0x01
    3618:	a2 81       	ldd	r26, Z+2	; 0x02
    361a:	b3 81       	ldd	r27, Z+3	; 0x03
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	aa 1f       	adc	r26, r26
    3622:	bb 1f       	adc	r27, r27
    3624:	88 0f       	add	r24, r24
    3626:	99 1f       	adc	r25, r25
    3628:	aa 1f       	adc	r26, r26
    362a:	bb 1f       	adc	r27, r27
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	aa 1f       	adc	r26, r26
    3632:	bb 1f       	adc	r27, r27
    3634:	9c 01       	movw	r18, r24
    3636:	ad 01       	movw	r20, r26
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	92 e1       	ldi	r25, 0x12	; 18
    363c:	aa e7       	ldi	r26, 0x7A	; 122
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	bc 01       	movw	r22, r24
    3642:	cd 01       	movw	r24, r26
    3644:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <__udivmodsi4>
    3648:	da 01       	movw	r26, r20
    364a:	c9 01       	movw	r24, r18
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	9a 83       	std	Y+2, r25	; 0x02
    3650:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = UBRR_value;
    3652:	e9 e2       	ldi	r30, 0x29	; 41
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	80 83       	st	Z, r24
	UBRRH = UBRR_value >> 8;
    365a:	e0 e4       	ldi	r30, 0x40	; 64
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	89 2f       	mov	r24, r25
    3664:	99 27       	eor	r25, r25
    3666:	80 83       	st	Z, r24
	/**Selecting to either enable or disable Interrupts**/
	if (config->UART_ReceiveTechnique == RECEIVEINTERRUPT) {
    3668:	eb 81       	ldd	r30, Y+3	; 0x03
    366a:	fc 81       	ldd	r31, Y+4	; 0x04
    366c:	86 81       	ldd	r24, Z+6	; 0x06
    366e:	82 30       	cpi	r24, 0x02	; 2
    3670:	71 f4       	brne	.+28     	; 0x368e <UART_init+0x1f0>
		SET_BIT(SREG, 7);
    3672:	af e5       	ldi	r26, 0x5F	; 95
    3674:	b0 e0       	ldi	r27, 0x00	; 0
    3676:	ef e5       	ldi	r30, 0x5F	; 95
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
    367c:	80 68       	ori	r24, 0x80	; 128
    367e:	8c 93       	st	X, r24
		SET_BIT(UCSRB, RXCIE);
    3680:	aa e2       	ldi	r26, 0x2A	; 42
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	ea e2       	ldi	r30, 0x2A	; 42
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	80 68       	ori	r24, 0x80	; 128
    368c:	8c 93       	st	X, r24
	}

}
    368e:	29 96       	adiw	r28, 0x09	; 9
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <UART_setCallBack>:
void UART_setCallBack(void (*callbackptr)(void)) {
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	00 d0       	rcall	.+0      	; 0x36a6 <UART_setCallBack+0x6>
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	9a 83       	std	Y+2, r25	; 0x02
    36ac:	89 83       	std	Y+1, r24	; 0x01
	/**Saving the Callback Function**/
	g_callbackptr = callbackptr;
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	9a 81       	ldd	r25, Y+2	; 0x02
    36b2:	90 93 52 01 	sts	0x0152, r25
    36b6:	80 93 51 01 	sts	0x0151, r24
}
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	08 95       	ret

000036c4 <UART_sendByte>:
void UART_sendByte(uint8 data) {
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	0f 92       	push	r0
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
    36ce:	89 83       	std	Y+1, r24	; 0x01
	/**wait for the register to be empty and then send a byte to be sent**/
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    36d0:	eb e2       	ldi	r30, 0x2B	; 43
    36d2:	f0 e0       	ldi	r31, 0x00	; 0
    36d4:	80 81       	ld	r24, Z
    36d6:	88 2f       	mov	r24, r24
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	80 72       	andi	r24, 0x20	; 32
    36dc:	90 70       	andi	r25, 0x00	; 0
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	b9 f3       	breq	.-18     	; 0x36d0 <UART_sendByte+0xc>
		;
	UDR = data;
    36e2:	ec e2       	ldi	r30, 0x2C	; 44
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	80 83       	st	Z, r24
	return;
}
    36ea:	0f 90       	pop	r0
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <UART_receiveByte>:
uint8 UART_receiveByte(void) {
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	0f 92       	push	r0
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
	/**if Receive Interrupts are disabled wait for the receive to be completed**/
	if (g_uartconfig.UART_ReceiveTechnique == RECEIVEPOLLING) {
    36fc:	80 91 59 01 	lds	r24, 0x0159
    3700:	81 30       	cpi	r24, 0x01	; 1
    3702:	51 f4       	brne	.+20     	; 0x3718 <UART_receiveByte+0x26>
		while (BIT_IS_CLEAR(UCSRA, RXC))
    3704:	eb e2       	ldi	r30, 0x2B	; 43
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	88 23       	and	r24, r24
    370c:	dc f7       	brge	.-10     	; 0x3704 <UART_receiveByte+0x12>
			;
		return UDR;
    370e:	ec e2       	ldi	r30, 0x2C	; 44
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	80 81       	ld	r24, Z
    3714:	89 83       	std	Y+1, r24	; 0x01
    3716:	01 c0       	rjmp	.+2      	; 0x371a <UART_receiveByte+0x28>
	}
	return 0;
    3718:	19 82       	std	Y+1, r1	; 0x01
    371a:	89 81       	ldd	r24, Y+1	; 0x01
}
    371c:	0f 90       	pop	r0
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <UART_sendString>:
void UART_sendString(char str[]) {
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	00 d0       	rcall	.+0      	; 0x372a <UART_sendString+0x6>
    372a:	0f 92       	push	r0
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	9b 83       	std	Y+3, r25	; 0x03
    3732:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    3734:	19 82       	std	Y+1, r1	; 0x01
    3736:	0e c0       	rjmp	.+28     	; 0x3754 <UART_sendString+0x30>
	/**Send the string Character by Character until its completed**/
	while (str[count] != '\0') {
		UART_sendByte(str[count]);
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	28 2f       	mov	r18, r24
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	9b 81       	ldd	r25, Y+3	; 0x03
    3742:	fc 01       	movw	r30, r24
    3744:	e2 0f       	add	r30, r18
    3746:	f3 1f       	adc	r31, r19
    3748:	80 81       	ld	r24, Z
    374a:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <UART_sendByte>
		count++;
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	8f 5f       	subi	r24, 0xFF	; 255
    3752:	89 83       	std	Y+1, r24	; 0x01
	return 0;
}
void UART_sendString(char str[]) {
	uint8 count = 0;
	/**Send the string Character by Character until its completed**/
	while (str[count] != '\0') {
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	28 2f       	mov	r18, r24
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	9b 81       	ldd	r25, Y+3	; 0x03
    375e:	fc 01       	movw	r30, r24
    3760:	e2 0f       	add	r30, r18
    3762:	f3 1f       	adc	r31, r19
    3764:	80 81       	ld	r24, Z
    3766:	88 23       	and	r24, r24
    3768:	39 f7       	brne	.-50     	; 0x3738 <UART_sendString+0x14>
		UART_sendByte(str[count]);
		count++;
	}
	return;
}
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <UART_receiveString>:
void UART_receiveString(char str[]) {
    3776:	0f 93       	push	r16
    3778:	1f 93       	push	r17
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	00 d0       	rcall	.+0      	; 0x3780 <UART_receiveString+0xa>
    3780:	0f 92       	push	r0
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	9b 83       	std	Y+3, r25	; 0x03
    3788:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    378a:	19 82       	std	Y+1, r1	; 0x01
	/**receive the String character by character until you meet a hash**/
	do {
		str[count] = UART_receiveByte();
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	28 2f       	mov	r18, r24
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	8a 81       	ldd	r24, Y+2	; 0x02
    3794:	9b 81       	ldd	r25, Y+3	; 0x03
    3796:	8c 01       	movw	r16, r24
    3798:	02 0f       	add	r16, r18
    379a:	13 1f       	adc	r17, r19
    379c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <UART_receiveByte>
    37a0:	f8 01       	movw	r30, r16
    37a2:	80 83       	st	Z, r24
		count++;
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	8f 5f       	subi	r24, 0xFF	; 255
    37a8:	89 83       	std	Y+1, r24	; 0x01
	} while (str[count - 1] != '#');
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	88 2f       	mov	r24, r24
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	9c 01       	movw	r18, r24
    37b2:	21 50       	subi	r18, 0x01	; 1
    37b4:	30 40       	sbci	r19, 0x00	; 0
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ba:	fc 01       	movw	r30, r24
    37bc:	e2 0f       	add	r30, r18
    37be:	f3 1f       	adc	r31, r19
    37c0:	80 81       	ld	r24, Z
    37c2:	83 32       	cpi	r24, 0x23	; 35
    37c4:	19 f7       	brne	.-58     	; 0x378c <UART_receiveString+0x16>
	str[count - 1] = '\0';
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	88 2f       	mov	r24, r24
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	9c 01       	movw	r18, r24
    37ce:	21 50       	subi	r18, 0x01	; 1
    37d0:	30 40       	sbci	r19, 0x00	; 0
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	9b 81       	ldd	r25, Y+3	; 0x03
    37d6:	fc 01       	movw	r30, r24
    37d8:	e2 0f       	add	r30, r18
    37da:	f3 1f       	adc	r31, r19
    37dc:	10 82       	st	Z, r1
	return;
}
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	08 95       	ret

000037ee <__udivmodsi4>:
    37ee:	a1 e2       	ldi	r26, 0x21	; 33
    37f0:	1a 2e       	mov	r1, r26
    37f2:	aa 1b       	sub	r26, r26
    37f4:	bb 1b       	sub	r27, r27
    37f6:	fd 01       	movw	r30, r26
    37f8:	0d c0       	rjmp	.+26     	; 0x3814 <__udivmodsi4_ep>

000037fa <__udivmodsi4_loop>:
    37fa:	aa 1f       	adc	r26, r26
    37fc:	bb 1f       	adc	r27, r27
    37fe:	ee 1f       	adc	r30, r30
    3800:	ff 1f       	adc	r31, r31
    3802:	a2 17       	cp	r26, r18
    3804:	b3 07       	cpc	r27, r19
    3806:	e4 07       	cpc	r30, r20
    3808:	f5 07       	cpc	r31, r21
    380a:	20 f0       	brcs	.+8      	; 0x3814 <__udivmodsi4_ep>
    380c:	a2 1b       	sub	r26, r18
    380e:	b3 0b       	sbc	r27, r19
    3810:	e4 0b       	sbc	r30, r20
    3812:	f5 0b       	sbc	r31, r21

00003814 <__udivmodsi4_ep>:
    3814:	66 1f       	adc	r22, r22
    3816:	77 1f       	adc	r23, r23
    3818:	88 1f       	adc	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	1a 94       	dec	r1
    381e:	69 f7       	brne	.-38     	; 0x37fa <__udivmodsi4_loop>
    3820:	60 95       	com	r22
    3822:	70 95       	com	r23
    3824:	80 95       	com	r24
    3826:	90 95       	com	r25
    3828:	9b 01       	movw	r18, r22
    382a:	ac 01       	movw	r20, r24
    382c:	bd 01       	movw	r22, r26
    382e:	cf 01       	movw	r24, r30
    3830:	08 95       	ret

00003832 <__prologue_saves__>:
    3832:	2f 92       	push	r2
    3834:	3f 92       	push	r3
    3836:	4f 92       	push	r4
    3838:	5f 92       	push	r5
    383a:	6f 92       	push	r6
    383c:	7f 92       	push	r7
    383e:	8f 92       	push	r8
    3840:	9f 92       	push	r9
    3842:	af 92       	push	r10
    3844:	bf 92       	push	r11
    3846:	cf 92       	push	r12
    3848:	df 92       	push	r13
    384a:	ef 92       	push	r14
    384c:	ff 92       	push	r15
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
    385a:	ca 1b       	sub	r28, r26
    385c:	db 0b       	sbc	r29, r27
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	09 94       	ijmp

0000386a <__epilogue_restores__>:
    386a:	2a 88       	ldd	r2, Y+18	; 0x12
    386c:	39 88       	ldd	r3, Y+17	; 0x11
    386e:	48 88       	ldd	r4, Y+16	; 0x10
    3870:	5f 84       	ldd	r5, Y+15	; 0x0f
    3872:	6e 84       	ldd	r6, Y+14	; 0x0e
    3874:	7d 84       	ldd	r7, Y+13	; 0x0d
    3876:	8c 84       	ldd	r8, Y+12	; 0x0c
    3878:	9b 84       	ldd	r9, Y+11	; 0x0b
    387a:	aa 84       	ldd	r10, Y+10	; 0x0a
    387c:	b9 84       	ldd	r11, Y+9	; 0x09
    387e:	c8 84       	ldd	r12, Y+8	; 0x08
    3880:	df 80       	ldd	r13, Y+7	; 0x07
    3882:	ee 80       	ldd	r14, Y+6	; 0x06
    3884:	fd 80       	ldd	r15, Y+5	; 0x05
    3886:	0c 81       	ldd	r16, Y+4	; 0x04
    3888:	1b 81       	ldd	r17, Y+3	; 0x03
    388a:	aa 81       	ldd	r26, Y+2	; 0x02
    388c:	b9 81       	ldd	r27, Y+1	; 0x01
    388e:	ce 0f       	add	r28, r30
    3890:	d1 1d       	adc	r29, r1
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	ed 01       	movw	r28, r26
    389e:	08 95       	ret

000038a0 <itoa>:
    38a0:	fb 01       	movw	r30, r22
    38a2:	9f 01       	movw	r18, r30
    38a4:	e8 94       	clt
    38a6:	42 30       	cpi	r20, 0x02	; 2
    38a8:	c4 f0       	brlt	.+48     	; 0x38da <itoa+0x3a>
    38aa:	45 32       	cpi	r20, 0x25	; 37
    38ac:	b4 f4       	brge	.+44     	; 0x38da <itoa+0x3a>
    38ae:	4a 30       	cpi	r20, 0x0A	; 10
    38b0:	29 f4       	brne	.+10     	; 0x38bc <itoa+0x1c>
    38b2:	97 fb       	bst	r25, 7
    38b4:	1e f4       	brtc	.+6      	; 0x38bc <itoa+0x1c>
    38b6:	90 95       	com	r25
    38b8:	81 95       	neg	r24
    38ba:	9f 4f       	sbci	r25, 0xFF	; 255
    38bc:	64 2f       	mov	r22, r20
    38be:	77 27       	eor	r23, r23
    38c0:	0e 94 81 1c 	call	0x3902	; 0x3902 <__udivmodhi4>
    38c4:	80 5d       	subi	r24, 0xD0	; 208
    38c6:	8a 33       	cpi	r24, 0x3A	; 58
    38c8:	0c f0       	brlt	.+2      	; 0x38cc <itoa+0x2c>
    38ca:	89 5d       	subi	r24, 0xD9	; 217
    38cc:	81 93       	st	Z+, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	a1 f7       	brne	.-24     	; 0x38bc <itoa+0x1c>
    38d4:	16 f4       	brtc	.+4      	; 0x38da <itoa+0x3a>
    38d6:	5d e2       	ldi	r21, 0x2D	; 45
    38d8:	51 93       	st	Z+, r21
    38da:	10 82       	st	Z, r1
    38dc:	c9 01       	movw	r24, r18
    38de:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <strrev>

000038e2 <strrev>:
    38e2:	dc 01       	movw	r26, r24
    38e4:	fc 01       	movw	r30, r24
    38e6:	67 2f       	mov	r22, r23
    38e8:	71 91       	ld	r23, Z+
    38ea:	77 23       	and	r23, r23
    38ec:	e1 f7       	brne	.-8      	; 0x38e6 <strrev+0x4>
    38ee:	32 97       	sbiw	r30, 0x02	; 2
    38f0:	04 c0       	rjmp	.+8      	; 0x38fa <strrev+0x18>
    38f2:	7c 91       	ld	r23, X
    38f4:	6d 93       	st	X+, r22
    38f6:	70 83       	st	Z, r23
    38f8:	62 91       	ld	r22, -Z
    38fa:	ae 17       	cp	r26, r30
    38fc:	bf 07       	cpc	r27, r31
    38fe:	c8 f3       	brcs	.-14     	; 0x38f2 <strrev+0x10>
    3900:	08 95       	ret

00003902 <__udivmodhi4>:
    3902:	aa 1b       	sub	r26, r26
    3904:	bb 1b       	sub	r27, r27
    3906:	51 e1       	ldi	r21, 0x11	; 17
    3908:	07 c0       	rjmp	.+14     	; 0x3918 <__udivmodhi4_ep>

0000390a <__udivmodhi4_loop>:
    390a:	aa 1f       	adc	r26, r26
    390c:	bb 1f       	adc	r27, r27
    390e:	a6 17       	cp	r26, r22
    3910:	b7 07       	cpc	r27, r23
    3912:	10 f0       	brcs	.+4      	; 0x3918 <__udivmodhi4_ep>
    3914:	a6 1b       	sub	r26, r22
    3916:	b7 0b       	sbc	r27, r23

00003918 <__udivmodhi4_ep>:
    3918:	88 1f       	adc	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	5a 95       	dec	r21
    391e:	a9 f7       	brne	.-22     	; 0x390a <__udivmodhi4_loop>
    3920:	80 95       	com	r24
    3922:	90 95       	com	r25
    3924:	bc 01       	movw	r22, r24
    3926:	cd 01       	movw	r24, r26
    3928:	08 95       	ret

0000392a <_exit>:
    392a:	f8 94       	cli

0000392c <__stop_program>:
    392c:	ff cf       	rjmp	.-2      	; 0x392c <__stop_program>
